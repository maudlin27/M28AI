---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by maudlin27.
--- DateTime: 17/05/2023 21:51
---
--In theory the below shouldt be needed once the FAF-Develop changes are integrated into FAF (expected June 2023), although probably no harm leaving for backwards compatibility
--Commented out for v24 due to compatibility concerns following new approach (where need to wait until after OnCreateAI before generating map)

local M28Events = import('/mods/M28AI/lua/AI/M28Events.lua')
local M28Utilities = import('/mods/M28AI/lua/AI/M28Utilities.lua')
local M28Conditions = import('/mods/M28AI/lua/AI/M28Conditions.lua')
local M28Overseer = import('/mods/M28AI/lua/AI/M28Overseer.lua')

local StandardBrain = import("/lua/aibrain.lua").AIBrain
local M28OldAIBrain = AIBrain
AIBrain = Class(M28OldAIBrain) {



    OnCreateAI = function(self, planName)
        LOG('OnCreateAI for campaign is running for brain '..(self.Nickname or 'nil'))
        --Delalyed check of if should apply M28 logic to the brain
        self.CampaignAI = true
        M28Overseer.iTimeOfLatestBrainToCheckForM28Logic = GetGameTimeSeconds()
        ForkThread(M28Overseer.DecideWhetherToApplyM28ToCampaignAI, self, planName)

        M28OldAIBrain.OnCreateAI(self, planName)


    end,

    OnBeginSession = function(self)
        StandardBrain.OnBeginSession(self)
        import('/mods/M28AI/lua/AI/M28Overseer.lua').bBeginSessionTriggered = true
        if not(self.M28AI) then
            -- requires navigational mesh
            import("/lua/sim/NavUtils.lua").Generate()

            -- requires these datastructures to understand the game
            --[[self.GridReclaim = import("/lua/ai/gridreclaim.lua").Setup(self)
            self.GridBrain = import("/lua/ai/gridbrain.lua").Setup()
            self.GridRecon = import("/lua/ai/gridrecon.lua").Setup(self)
            self.GridPresence = import("/lua/AI/GridPresence.lua").Setup(self)--]]
        end
    end,

}

--[[
local M28Events = import('/mods/M28AI/lua/AI/M28Events.lua')
local M28Utilities = import('/mods/M28AI/lua/AI/M28Utilities.lua')

local M28OldAIBrain = AIBrain
AIBrain = Class(M28OldAIBrain) {



    OnCreateAI = function(self, planName)
        if (ScenarioInfo.ArmySetup[self.Name].AIPersonality == 'm28ai' or ScenarioInfo.ArmySetup[self.Name].AIPersonality == 'm28aicheat') then
            self.M28AI = true
            M28Utilities.bM28AIInGame = true
        end
        if not(self.M28AI) then
            LOG('Running normal aiBrain creation code for brain '..(self.Nickname or 'nil'))
            M28OldAIBrain.OnCreateAI(self, planName)
        end
        ForkThread(M28Events.OnCreateBrain, self, planName, false)
    end,


    --Redundancy - wouldnt expect any of below to trigger for M28, but this is as an extra redundancy
    CreateBrainShared = function(self, planName)
        if self.M28AI then
            --Do nothing
            LOG('Attempted CreateBrainShared for baseAI with M28 brain')
        else
            --LOG('CreateBrainShared for baseAI with no M28AI brain')
            M28OldAIBrain.CreateBrainShared(self, planName)
        end
    end,
    SetCurrentPlan = function(self, bestPlan)
        if self.M28AI then
            --Do nothing
            LOG('Attempted SetCurrentPlan for baseAI with M28 brain')
        else
            --LOG('SetCurrentPlan for baseAI with no M28AI brain')
            M28OldAIBrain.SetCurrentPlan(self, bestPlan)
        end
    end,

    InitializeAttackManager = function(self, attackDataTable)
        if self.M28AI then
            --Do nothing
            LOG('Attempted to initialise attack manager for an M28Brain '..self.Nickname)
        else
            --LOG('base-ai: InitializeAttackManager')
            M28OldAIBrain.InitializeAttackManager(self, attackDataTable)
        end
    end,
    InitializePlatoonBuildManager = function(self)
        if self.M28AI then
            --Do nothing
            LOG('Attempted to initialise platoon build manager for an M28Brain '..self.Nickname)
        else
            --LOG('base-ai: InitializePlatoonBuildManager')
            M28OldAIBrain.InitializePlatoonBuildManager(self)
        end
    end,
    BaseMonitorInitialization = function(self, spec)
        if self.M28AI then
            --Do nothing
            LOG('Attempted to initialise base monitor for an M28Brain '..self.Nickname)
        else
            --LOG('base-ai: BaseMonitorInitialization')
            M28OldAIBrain.BaseMonitorInitialization(self, spec)
        end
    end,
}--]]