---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by maudlin27.
--- DateTime: 02/12/2022 22:33
---
local M28Utilities = import('/mods/M28AI/lua/AI/M28Utilities.lua')
local M28UnitInfo = import('/mods/M28AI/lua/AI/M28UnitInfo.lua')
local M28Economy = import('/mods/M28AI/lua/AI/M28Economy.lua')
local M28Map = import('/mods/M28AI/lua/AI/M28Map.lua')
local M28Overseer = import('/mods/M28AI/lua/AI/M28Overseer.lua')
local M28Orders = import('/mods/M28AI/lua/AI/M28Orders.lua')
local M28Profiler = import('/mods/M28AI/lua/AI/M28Profiler.lua')
local M28Conditions = import('/mods/M28AI/lua/AI/M28Conditions.lua')
local M28Team = import('/mods/M28AI/lua/AI/M28Team.lua')
local M28Engineer = import('/mods/M28AI/lua/AI/M28Engineer.lua')
local NavUtils = M28Utilities.NavUtils
local M28Building = import('/mods/M28AI/lua/AI/M28Building.lua')
local M28Air = import('/mods/M28AI/lua/AI/M28Air.lua')
local M28Micro = import('/mods/M28AI/lua/AI/M28Micro.lua')
local M28ACU = import('/mods/M28AI/lua/AI/M28ACU.lua')
local M28Land = import('/mods/M28AI/lua/AI/M28Land.lua')

reftBlueprintPriorityOverride = 'M28FactoryPreferredBlueprintByCategory' --[x] is the blueprint ref, if there's a priority override it returns a numerical value (higher number = higher priority)
local refiTimeSinceLastOrderCheck = 'M28FactoryTimeSinceLastCheck' --against factory, gametime in seconds when the factory was last checked to consider an order
refiTimeSinceLastFailedToGetOrder = 'M28FactoryTimeFailedToGetOrder' --Against factory, gametimeseconds that factory failed to find anything to do
refbWantNextUnitToBeEngineer = 'M28FacNxtUEng' --true if want next unit to be an engineer
--NOTE: Also have a blueprint blacklist in the landsubteam data - see M28Team

--Factory types (used by subteams)
refiFactoryTypeLand = 1
refiFactoryTypeAir = 2
refiFactoryTypeNaval = 3
refiFactoryTypeOther = 4

--Variables against factory
refiBuildCountByBlueprint = 'M28FacBC' --against oFactory, returns table with key as the unitID, which returns the number of times the factory has been sent an order to build the unit
refiTotalBuildCount = 'M28FacTotBC' --against oFactory, Total number of units the factory has built
reftFactoryRallyPoint = 'M28FacRally' --against oFactory, Location to send units to when theyre built
refiFirstTimeOfLastOrder = 'M28FOrTim' --against oFactory, time that we gave an order for the factory to build a unit (cleared when a unit is built or a different blueprint order is given) - used to spot for factories with units blocking them
refbWantMoreEngineersBeforeUpgrading = 'M28FWnE' --against oFactory, true if have run the factory condition and it concluded wen eeded more engineers before upgrading
refbPausedToStopDefaultAI = 'M28FPsC' --true if we have paused factory to stop a campaign AI giving it orders
refbActiveDelayedCheck = 'M28FAcDC' --true if we are running code to consider if factory has nearby blocked units
refbPrimaryFactoryForIslandOrPond = 'M28FaPrim' --true if this is the primary factory for a zone that has a decent number of mexes (so it doesnt get paused in a mass stall)
reftsFactoryEnhancementPreferences = 'M28FaPref' --false if no enhancements available or wanted, otherwise, contains a table of enhancement strings for a factory to try and get

--Variables against units (generally):
refiTimeOfLastFacBlockOrder = 'M28FacBlkO' --Gametimeseconds that a unit was told to move (to try and unblock a factory)

--Variables against brain
refiHighestFactoryBuildCount = 'M28FacBrTotBC' --against aiBrain, Highest build count of a factory
refbJustBuiltFirstT1Bomber = 'M28AirBlt1B' --true if we have just built the first t1 bomber (Changes to false after 5s)

function GetMostExpensiveBlueprintOfCategory(iCategoryCondition)
    --Much more simplified version of 'GetBlueprintThatCanBuildOfCategory', for cases where we dont yet have the engineer so want a potential blueprint to work with
    local tBlueprints = EntityCategoryGetUnitList(iCategoryCondition)
    local iHighestMassCost = 0
    local tAllBlueprints = __blueprints
    local sMostExpensiveBlueprint
    local iCurMassCost
    for _, sBlueprint in tBlueprints do
        iCurMassCost = (tAllBlueprints[sBlueprint].Economy.BuildCostMass or 0)
        if iCurMassCost > iHighestMassCost then
            iHighestMassCost = iCurMassCost
            sMostExpensiveBlueprint = sBlueprint
        end
    end
    return sMostExpensiveBlueprint
end

function GetBlueprintThatCanBuildOfCategory(aiBrain, iCategoryCondition, oFactory, bGetSlowest, bGetFastest, bGetCheapest, iOptionalCategoryThatMustBeAbleToBuild, bIgnoreTechDifferences, iOptionalMaxSkirtSize, bGetMostExpensive)
    --returns nil if cant find any blueprints that can build
    --NOTE: Can use import("/lua/game.lua").IsRestricted(sBlueprint, iArmyIndex) to see if we are able to build a particular blueprint; moved to M28UnitInfo.IsUnitRestricted for LOUD compatibility
    --NOTE: bGetSlowest is forced to be true for t1 land factories
    local bDebugMessages = false if M28Profiler.bGlobalDebugOverride == true then   bDebugMessages = true end
    local sFunctionRef = 'GetBlueprintThatCanBuildOfCategory'
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerStart)



    if bDebugMessages == true then LOG(sFunctionRef..': Start of code, oFactory='..(oFactory.UnitId or 'nil')..(M28UnitInfo.GetUnitLifetimeCount(oFactory) or 'nil')..'; is iCategoryCondition nil='..tostring(iCategoryCondition == nil)..'; Time='..GetGameTimeSeconds()) end
    --If are a t1 land fac then get the slowest unit (to try and avoid getting LABs if tanks are an option) - disabled as causing issues with not getting skirmisher type units
    --if not(bGetFastest) and not(bGetSlowest) and EntityCategoryContains(M28UnitInfo.refCategoryLandFactory * categories.TECH1, oFactory.UnitId) then bGetSlowest = true end
    local tBlueprints = EntityCategoryGetUnitList(iCategoryCondition)
    local tAllBlueprints = __blueprints
    local tValidBlueprints = {}
    local iValidBlueprints = 0
    local tBestBlueprints = {}
    local iBestBlueprints = 0
    local iHighestTech = 1
    local iCurrentTech = 1
    --if bGetSlowest == nil then bGetSlowest = false end
    --if bGetFastest == nil then bGetFastest = false end
    local iCurSpeed, iCurMass
    local tiLowestSpeedByTech = {1000, 1000, 1000}
    local tiLowestMassByTech = {100000000, 100000000, 100000000}
    local tiHighestSpeedByTech = {0,0,0}
    local tiHighestMassByTech
    if bGetMostExpensive then tiHighestMassByTech = {0,0,0} end
    local oCurBlueprint
    local iHighestPriority = -100
    local bCanBuildRequiredCategory
    local iCategoriesThatBlueprintCanBuild
    local tsBlueprintsMeetingDesiredCategoriesToBuild
    if iOptionalCategoryThatMustBeAbleToBuild then
        tsBlueprintsMeetingDesiredCategoriesToBuild = EntityCategoryGetUnitList(iOptionalCategoryThatMustBeAbleToBuild)
        if bDebugMessages == true then LOG(sFunctionRef..': tsBlueprintsMeetingDesiredCategoriesToBuild='..repru(tsBlueprintsMeetingDesiredCategoriesToBuild)) end
    end





    if bDebugMessages == true then LOG(sFunctionRef..': reftBlueprintPriorityOverride='..repru(aiBrain[reftBlueprintPriorityOverride])) end
    if not(oFactory.CanBuild) then
        if oFactory.UnitId then
            M28Utilities.ErrorHandler('Factory '..oFactory.UnitId..M28UnitInfo.GetUnitLifetimeCount(oFactory)..' doesnt have .canbuild')
        else
            M28Utilities.ErrorHandler('Factory has no UnitId and doesnt have .CanBuild')
        end
        M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
        return nil
    else
        --local Game = import("/lua/game.lua")
        local iArmyIndex = aiBrain:GetArmyIndex()
        for _, sBlueprint in tBlueprints do
            if bDebugMessages == true then LOG(sFunctionRef..': About to see if factory '..oFactory.UnitId..M28UnitInfo.GetUnitLifetimeCount(oFactory)..'; can build blueprint '..(sBlueprint or 'nil')..'; CanBuild='..tostring(oFactory:CanBuild(sBlueprint))..'; iArmyIndex='..(iArmyIndex or 'nil')) end
            if oFactory:CanBuild(sBlueprint) == true and not(M28UnitInfo.IsUnitRestricted(sBlueprint, iArmyIndex)) then
                --Check we can build the desired category
                if not(iOptionalCategoryThatMustBeAbleToBuild) then bCanBuildRequiredCategory = true
                else
                    if bDebugMessages == true then LOG(sFunctionRef..': Have said we need to build a particualr category, will see if sBLueprint='..sBlueprint..' can build this') end
                    bCanBuildRequiredCategory = false
                    iCategoriesThatBlueprintCanBuild = nil
                    if tAllBlueprints[sBlueprint].Economy.BuildableCategory and not(M28Utilities.IsTableEmpty(tsBlueprintsMeetingDesiredCategoriesToBuild)) then
                        if bDebugMessages == true then LOG(sFunctionRef..': sBlueprint has a buildablecategory set, will convert it into a category and see if it matches any of the blueprints we want to be able to build') end
                        for categoryIndex, category in tAllBlueprints[sBlueprint].Economy.BuildableCategory do
                            if categoryIndex == 1 then
                                iCategoriesThatBlueprintCanBuild = ParseEntityCategory(category)
                            else
                                iCategoriesThatBlueprintCanBuild = iCategoriesThatBlueprintCanBuild + ParseEntityCategory(category)
                            end
                        end

                        for iAltBlueprint, sAltBlueprint in tsBlueprintsMeetingDesiredCategoriesToBuild do
                            if bDebugMessages == true then LOG(sFunctionRef..': Considering if sAltBlueprint='..(sAltBlueprint or 'nil')..' has a category that matches with what sBLueprint can build') end
                            if EntityCategoryContains(iCategoriesThatBlueprintCanBuild, sAltBlueprint) then
                                if bDebugMessages == true then LOG(sFunctionRef..': Can build the desired category') end
                                bCanBuildRequiredCategory = true
                                break
                            end
                        end
                    end
                end

                if bCanBuildRequiredCategory then
                    --Check is valid size
                    if not(iOptionalMaxSkirtSize) or M28UnitInfo.GetBuildingSize(sBlueprint) <= iOptionalMaxSkirtSize then
                        --if EntityCategoryContains(iCategoryCondition, sBlueprint) then --tBlueprints is already filtered to just those that meet the categories
                        iValidBlueprints = iValidBlueprints + 1
                        tValidBlueprints[iValidBlueprints] = sBlueprint
                        if bIgnoreTechDifferences then iCurrentTech = 1
                        else
                            if EntityCategoryContains(categories.TECH3 + categories.EXPERIMENTAL, sBlueprint) then iCurrentTech = 3
                            elseif EntityCategoryContains(categories.TECH2, sBlueprint) then iCurrentTech = 2
                            else iCurrentTech = 1
                            end
                        end
                        if bDebugMessages == true then LOG(sFunctionRef..': '..sBlueprint..': iCurrentTech='..iCurrentTech..'; iHighestTech='..iHighestTech) end
                        if iCurrentTech > iHighestTech then
                            iHighestTech = iCurrentTech
                            iHighestPriority = -100
                        end
                        if bDebugMessages == true then LOG(sFunctionRef..': Considering if sBlueprint has a priority specified if we arent looking for slowest or fastest. sBlueprint='..sBlueprint..'; bGetSlowest='..tostring(bGetSlowest)..'; bGetFastest='..tostring(bGetFastest)..'; bGetCheapest='..tostring((bGetCheapest or false))..'; bGetMostExpensive='..tostring(bGetMostExpensive or false)) end
                        if not(bGetSlowest) and not(bGetFastest) and not(bGetCheapest) and not(bGetMostExpensive) and (aiBrain[reftBlueprintPriorityOverride][sBlueprint] or 0) > iHighestPriority then
                            if bDebugMessages == true then LOG(sFunctionRef..': Have a priority specified, or is higher than current priority='..(aiBrain[reftBlueprintPriorityOverride][sBlueprint] or 'nil')..'; iHighestPriority='..iHighestPriority) end
                            iHighestPriority = math.max((aiBrain[reftBlueprintPriorityOverride][sBlueprint] or 0), iHighestPriority)
                        end
                        if bGetSlowest == true or bGetFastest == true then
                            oCurBlueprint = tAllBlueprints[sBlueprint]
                            iCurSpeed = oCurBlueprint.Physics.MaxSpeed
                            if bDebugMessages == true then LOG(sFunctionRef..': '..sBlueprint..': iCurSpeed='..iCurSpeed) end
                            if bGetSlowest == true then
                                if iCurSpeed < tiLowestSpeedByTech[iCurrentTech] then tiLowestSpeedByTech[iCurrentTech] = iCurSpeed end
                            elseif bGetFastest == true then
                                if iCurSpeed > tiHighestSpeedByTech[iCurrentTech] then tiHighestSpeedByTech[iCurrentTech] = iCurSpeed end
                            end
                        elseif bGetCheapest or bGetMostExpensive then
                            oCurBlueprint = tAllBlueprints[sBlueprint]
                            iCurMass = oCurBlueprint.Economy.BuildCostMass
                            if bGetCheapest then
                                if iCurMass < tiLowestMassByTech[iCurrentTech] then tiLowestMassByTech[iCurrentTech] = iCurMass end
                                if bDebugMessages == true then LOG(sFunctionRef..': Want to get cheapest; iCurMass='..iCurMass..'; iCurrentTech='..iCurrentTech..'; tiLowestMassByTech[iCurrentTech]='..tiLowestMassByTech[iCurrentTech]) end
                            elseif bGetMostExpensive then
                                if iCurMass > tiHighestMassByTech[iCurrentTech] then tiHighestMassByTech[iCurrentTech] = iCurMass end
                                if bDebugMessages == true then LOG(sFunctionRef..': Want to get most expensive; iCurMass='..iCurMass..'; iCurrentTech='..iCurrentTech..'; tiHighestMassByTech[iCurrentTech]='..tiHighestMassByTech[iCurrentTech]) end
                            end
                        end
                        --end
                    end
                end
            end
        end
        --Now get a list of blueprints that are this tech level and of the highest priority
        --if bDebugMessages == true then LOG(sFunctionRef..': iHighestTech='..iHighestTech..'; tiHighestSpeedByTech='..tiHighestSpeedByTech[iHighestTech]..'; bGetSlowest='..tostring(bGetSlowest)..'; bGetFastest='..tostring(bGetFastest)) end
        local bIsValid, iCurrentPriority
        local iMinTechToUse = iHighestTech
        local iFastestSpeed = tiHighestSpeedByTech[iHighestTech]
        if bGetFastest == true and iHighestTech >= 3 then
            --If cybran, want loyalist instead of bomb; if Aeon want blaze instead of harbinger or shield disrupter; If sera probably want hover tank instead of siege tank; if UEF want titan
            if tiHighestSpeedByTech[3] <= 3.5 and tiHighestSpeedByTech[2] - tiHighestSpeedByTech[3] >= 0.6 then
                iMinTechToUse = 2
                iFastestSpeed = math.max(tiHighestSpeedByTech[3], tiHighestSpeedByTech[2])
            end
        end

        for _, sBlueprint in tValidBlueprints do
            bIsValid = false
            if EntityCategoryContains(categories.TECH3 + categories.EXPERIMENTAL, sBlueprint) then iCurrentTech = 3
            elseif EntityCategoryContains(categories.TECH2, sBlueprint) then iCurrentTech = 2
            else iCurrentTech = 1
            end
            if bDebugMessages == true then LOG(sFunctionRef..': Cycling through each blueprint in valid blueprints, sBlueprint='..sBlueprint..': Considering whether we have high enough tech to consider, iCurrentTech='..iCurrentTech..'; iMinTechToUse='..iMinTechToUse..'; aiBrain[reftBlueprintPriorityOverride][sBlueprint]='..(aiBrain[reftBlueprintPriorityOverride][sBlueprint] or 'nil')) end
            if iCurrentTech >= iMinTechToUse then
                if not(bGetFastest) and not(bGetSlowest) and not(bGetCheapest) and not(bGetMostExpensive) then iCurrentPriority = aiBrain[reftBlueprintPriorityOverride][sBlueprint] end
                if iCurrentPriority == nil then iCurrentPriority = 0 end
                if bDebugMessages == true then LOG(sFunctionRef..': sBlueprint='..sBlueprint..'; iCurrentTech='..iCurrentTech..'; considering priority, iCurrentPriority='..iCurrentPriority..'; iHighestPriority='..iHighestPriority) end
                if iCurrentPriority >= iHighestPriority then
                    bIsValid = true

                    if not(bGetSlowest) and not(bGetFastest) and not(bGetCheapest) and not(bGetMostExpensive) then
                        if bDebugMessages == true then LOG(sFunctionRef..': Not interested in if slowest or fastest or cheapest so marking BP as valid') end
                        bIsValid = true
                    else
                        if bDebugMessages == true then LOG(sFunctionRef..': Want to get either the slowest, fastest or cheapest') end
                        bIsValid = false
                        if bGetSlowest or bGetFastest then
                            oCurBlueprint = tAllBlueprints[sBlueprint]
                            iCurSpeed = oCurBlueprint.Physics.MaxSpeed
                            if bDebugMessages == true then LOG(sFunctionRef..': sBlueprint='..sBlueprint..'; iCurSpeed='..iCurSpeed) end
                            if bGetSlowest == true then
                                if iCurSpeed <= tiLowestSpeedByTech[iHighestTech] then bIsValid = true end
                            elseif iCurSpeed >= iFastestSpeed then
                                if bDebugMessages == true then LOG(sFunctionRef..': Have the highest speed for tech levels being considered') end
                                bIsValid = true
                            end
                        elseif bGetCheapest or bGetMostExpensive then
                            oCurBlueprint = tAllBlueprints[sBlueprint]
                            iCurMass = oCurBlueprint.Economy.BuildCostMass
                            if bGetCheapest then
                                if iCurMass <= tiLowestMassByTech[iCurrentTech] then bIsValid = true end
                                if bDebugMessages == true then LOG(sFunctionRef..': Want to get cheapest; iCurMass='..iCurMass..'; iCurrentTech='..iCurrentTech..'; tiLowestMassByTech[iCurrentTech]='..tiLowestMassByTech[iCurrentTech]..'; bIsValid='..tostring(bIsValid)) end
                            elseif bGetMostExpensive then
                                if iCurMass >= tiHighestMassByTech[iCurrentTech] then bIsValid = true end
                                if bDebugMessages == true then LOG(sFunctionRef..': Want to get most expensive; iCurMass='..iCurMass..'; iCurrentTech='..iCurrentTech..'; tiHighestMassByTech[iCurrentTech]='..tiHighestMassByTech[iCurrentTech]..'; bIsValid='..tostring(bIsValid)) end
                            end
                        else M28Utilities.ErrorHandler('Missing code')
                        end
                    end
                end
                if bIsValid == true then
                    iBestBlueprints = iBestBlueprints + 1
                    tBestBlueprints[iBestBlueprints] = sBlueprint
                    if bDebugMessages == true then LOG(sFunctionRef..': Have valid blueprint='..sBlueprint) end
                end
            end
        end

        local iBPToBuild = math.random(1, iBestBlueprints)

        if bDebugMessages == true then
            LOG(sFunctionRef..': End of code, iBestBlueprints='..iBestBlueprints..'; Will return random number if this is more than 1, iBPToBuild='..iBPToBuild..'; tBestBlueprints[iBPToBuild]='..(tBestBlueprints[iBPToBuild] or 'nil')..'; tBestBlueprints='..repru(tBestBlueprints))
        end
        M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
        return tBestBlueprints[iBPToBuild]
    end


end

function AdjustBlueprintForOverrides(aiBrain, oFactory, sBPIDToBuild, tLZTeamData, iFactoryTechLevel)
    --Blacklisted units (done on land subteam basis - in theory should work ok if use naval units or air units here as well)
    local bDebugMessages = false if M28Profiler.bGlobalDebugOverride == true then   bDebugMessages = true end
    local sFunctionRef = 'AdjustBlueprintForOverrides'
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerStart)



    local iCurEngineers
    if M28Team.tLandSubteamData[aiBrain.M28LandSubteam][M28Team.subrefBlueprintBlacklist][sBPIDToBuild] then
        if bDebugMessages == true then LOG(sFunctionRef..': Unit is on blacklist so dont want to build') end
        sBPIDToBuild = nil
    else
        if not(ScenarioInfo.Options.M28PrioritiseBPs == 2) then
            if M28Utilities.bQuietModActive then
                local iTeam = aiBrain.M28Team
                -- Special cases -- for QUIET we want lighter units produced before heavier .5 or even more expensive t3/t2/t1
                -- In the future we should also check if our economy is good enough to switch over to HeavyLandT3 to counter Human HeavyLandT3
                -- We should also check if we have a large number of factories to switch over to HeavyLandT3 to counter Human HeavyLandT3
                if sBPIDToBuild == 'url0107' then --CybranLightT1DF
                    if (M28Team.tTeamData[iTeam][M28Team.refbEnemyHasHeavyLandT1] and oFactory[refiTotalBuildCount] >= 10) or (aiBrain[M28Economy.refiOurHighestLandFactoryTech] >= 2 and oFactory[refiTotalBuildCount] >= 10) or (oFactory[refiTotalBuildCount] >= 5 and M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingMass]) or M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryLandCombat * categories.url0107) >= 30 then
                        if oFactory:CanBuild('brmt1exm1') then
                            aiBrain[reftBlueprintPriorityOverride]['url0107'] = nil
                            aiBrain[reftBlueprintPriorityOverride]['brmt1exm1'] = 1
                            sBPIDToBuild = 'brmt1exm1'
                            if bDebugMessages == true then LOG(sFunctionRef..': want to build proton instead of mantis') end
                        end
                    end
                elseif sBPIDToBuild == 'uel0201' then --UEFLightT1DF
                    if (M28Team.tTeamData[iTeam][M28Team.refbEnemyHasHeavyLandT1] and oFactory[refiTotalBuildCount] >= 10) or (aiBrain[M28Economy.refiOurHighestLandFactoryTech] >= 2 and oFactory[refiTotalBuildCount] >= 10) or (oFactory[refiTotalBuildCount] >= 5 and M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingMass]) or M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryLandCombat * categories.uel0201) >= 30 then
                        if oFactory:CanBuild('uel0108') then
                            aiBrain[reftBlueprintPriorityOverride]['uel0201'] = nil
                            aiBrain[reftBlueprintPriorityOverride]['uel0108'] = 1
                            sBPIDToBuild = 'uel0108'
                            if bDebugMessages == true then LOG(sFunctionRef..': want to build crusher instead of striker') end
                        end
                    end
                elseif (sBPIDToBuild == 'ual0201' or sBPIDToBuild == 'ual0108' or sBPIDToBuild == 'brot1bt') then --AeonLightT1DF
                    if (M28Team.tTeamData[iTeam][M28Team.refbEnemyHasHeavyLandT1] and oFactory[refiTotalBuildCount] >= 10) or (aiBrain[M28Economy.refiOurHighestLandFactoryTech] >= 2 and oFactory[refiTotalBuildCount] >= 10) or (oFactory[refiTotalBuildCount] >= 5 and M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingMass]) or M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryLandCombat * (categories.ual0201 + categories.ual0108 + categories.brot1bt)) >= 30 then
                        if oFactory:CanBuild('brot1exm1') then
                            aiBrain[reftBlueprintPriorityOverride]['ual0201'] = nil
                            aiBrain[reftBlueprintPriorityOverride]['ual0108'] = nil
                            aiBrain[reftBlueprintPriorityOverride]['brot1bt'] = nil
                            aiBrain[reftBlueprintPriorityOverride]['brot1exm1'] = 1
                            sBPIDToBuild = 'brot1exm1'
                            if bDebugMessages == true then LOG(sFunctionRef..': want to build bugbear instead of aurora') end
                        end
                    end
                elseif sBPIDToBuild == 'xsl0201' then --SeraphimLightT1DF
                    if (M28Team.tTeamData[iTeam][M28Team.refbEnemyHasHeavyLandT1] and oFactory[refiTotalBuildCount] >= 10) or (aiBrain[M28Economy.refiOurHighestLandFactoryTech] >= 2 and oFactory[refiTotalBuildCount] >= 10) or (oFactory[refiTotalBuildCount] >= 5 and M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingMass]) or M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryLandCombat * categories.xsl0201) >= 30 then
                        if oFactory:CanBuild('brpt1exm1') then
                            aiBrain[reftBlueprintPriorityOverride]['xsl0201'] = nil
                            aiBrain[reftBlueprintPriorityOverride]['brpt1exm1'] = 1
                            sBPIDToBuild = 'brpt1exm1'
                            if bDebugMessages == true then LOG(sFunctionRef..': want to build othazyne instead of thaam') end
                        end
                    end
                elseif sBPIDToBuild == 'url0202' or sBPIDToBuild == 'brmt2ht' then --CybranLightT2DF
                    if (M28Team.tTeamData[iTeam][M28Team.refbEnemyHasHeavyLandT2] and oFactory[refiTotalBuildCount] >= 10) or aiBrain[M28Economy.refiOurHighestLandFactoryTech] >= 3 or (oFactory[refiTotalBuildCount] >= 5 and M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingMass]) or M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryLandCombat * (categories.url0202 + categories.brmt2ht)) >= 20 then
                        if oFactory:CanBuild('brmt2medm') then
                            aiBrain[reftBlueprintPriorityOverride]['url0202'] = nil
                            aiBrain[reftBlueprintPriorityOverride]['brmt2ht'] = nil
                            aiBrain[reftBlueprintPriorityOverride]['brmt2medm'] = 1
                            sBPIDToBuild = 'brmt2medm'
                            if bDebugMessages == true then LOG(sFunctionRef..': want to build immortals instead of rhinos') end
                        end
                    end
                elseif sBPIDToBuild == 'uel0202' or sBPIDToBuild == 'brnt2mt' or sBPIDToBuild == 'bel0211' then --UEFLightT2DF
                    if (M28Team.tTeamData[iTeam][M28Team.refbEnemyHasHeavyLandT2] and oFactory[refiTotalBuildCount] >= 10) or aiBrain[M28Economy.refiOurHighestLandFactoryTech] >= 3 or (oFactory[refiTotalBuildCount] >= 5 and M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingMass]) or M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryLandCombat * (categories.uel0202 + categories.brnt2mt + categories.bel0211)) >= 20 then
                        if oFactory:CanBuild('wel0304') then
                            aiBrain[reftBlueprintPriorityOverride]['uel0202'] = nil
                            aiBrain[reftBlueprintPriorityOverride]['brnt2mt'] = nil
                            aiBrain[reftBlueprintPriorityOverride]['bel0211'] = nil
                            aiBrain[reftBlueprintPriorityOverride]['wel0304'] = 1
                            sBPIDToBuild = 'wel0304'
                            if bDebugMessages == true then LOG(sFunctionRef..': want to build rommels instead of pillar') end
                        end
                    end
                elseif sBPIDToBuild == 'ual0202' then --AeonLightT2DF
                    if (M28Team.tTeamData[iTeam][M28Team.refbEnemyHasHeavyLandT2] and oFactory[refiTotalBuildCount] >= 10) or aiBrain[M28Economy.refiOurHighestLandFactoryTech] >= 3 or (oFactory[refiTotalBuildCount] >= 5 and M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingMass]) or M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryLandCombat * categories.ual0202) >= 20 then
                        if oFactory:CanBuild('brot2asb') then
                            aiBrain[reftBlueprintPriorityOverride]['ual0202'] = nil
                            aiBrain[reftBlueprintPriorityOverride]['brot2asb'] = 1
                            sBPIDToBuild = 'brot2asb'
                            if bDebugMessages == true then LOG(sFunctionRef..': want to build amphorak instead of obsidian') end
                        end
                    end
                elseif sBPIDToBuild == 'xsl0202' or sBPIDToBuild == 'wsl0202' then --SeraphimLightT2DF
                    if (M28Team.tTeamData[iTeam][M28Team.refbEnemyHasHeavyLandT2] and oFactory[refiTotalBuildCount] >= 10) or aiBrain[M28Economy.refiOurHighestLandFactoryTech] >= 3 or (oFactory[refiTotalBuildCount] >= 5 and M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingMass]) or M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryLandCombat * (categories.xsl0202 + categories.wsl0202)) >= 20 then
                        if oFactory:CanBuild('brpt2btbot') then
                            aiBrain[reftBlueprintPriorityOverride]['xsl0202'] = nil
                            aiBrain[reftBlueprintPriorityOverride]['wsl0202'] = nil
                            aiBrain[reftBlueprintPriorityOverride]['brpt2btbot'] = 1
                            sBPIDToBuild = 'brpt2btbot'
                            if bDebugMessages == true then LOG(sFunctionRef..': want to build iltha instead of Ilshavoh') end
                        end
                    end
                elseif sBPIDToBuild == 'url0303' or sBPIDToBuild == 'brmt3bt' then --CybranLightT3DF
                    if (M28Team.tTeamData[iTeam][M28Team.refbEnemyHasHeavyLandT3] and oFactory[refiTotalBuildCount] >= 10) or M28Team.tTeamData[iTeam][M28Team.refiConstructedExperimentalCount] > 0 or (oFactory[refiTotalBuildCount] >= 5 and M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingMass]) or M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryLandCombat * (categories.url0303 + categories.brmt3bt)) >= 10 then
                        if oFactory:CanBuild('xrl0305') or oFactory:CanBuild('brl0307') or oFactory:CanBuild('srl0310') or oFactory:CanBuild('brmt3bm2') then
                            aiBrain[reftBlueprintPriorityOverride]['url0303'] = nil --loyalist
                            aiBrain[reftBlueprintPriorityOverride]['brmt3bt'] = nil --Mastodon
                            aiBrain[reftBlueprintPriorityOverride]['xrl0305'] = 1 --brick
                            aiBrain[reftBlueprintPriorityOverride]['brl0307'] = 1
                            aiBrain[reftBlueprintPriorityOverride]['srl0310'] = 1
                            aiBrain[reftBlueprintPriorityOverride]['brmt3bm2'] = 1
                            sBPIDToBuild = 'xrl0305'
                            if bDebugMessages == true then LOG(sFunctionRef..': want to build brick instead of loyalist') end
                        end
                    end
                elseif sBPIDToBuild == 'uel0303' or sBPIDToBuild == 'brnt3bt' then --UEFLightT3DF
                    if (M28Team.tTeamData[iTeam][M28Team.refbEnemyHasHeavyLandT3] and oFactory[refiTotalBuildCount] >= 10) or M28Team.tTeamData[iTeam][M28Team.refiConstructedExperimentalCount] > 0 or (oFactory[refiTotalBuildCount] >= 5 and M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingMass]) or M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryLandCombat * (categories.uel0303 + categories.brnt3bt)) >= 10 then
                        if oFactory:CanBuild('xel0305') or oFactory:CanBuild('bel0307') or oFactory:CanBuild('wel0305') then
                            aiBrain[reftBlueprintPriorityOverride]['uel0303'] = nil --Titan
                            aiBrain[reftBlueprintPriorityOverride]['brnt3bt'] = nil --Bull
                            aiBrain[reftBlueprintPriorityOverride]['xel0305'] = 1 --Percival
                            aiBrain[reftBlueprintPriorityOverride]['bel0307'] = 1
                            aiBrain[reftBlueprintPriorityOverride]['wel0305'] = 1
                            sBPIDToBuild = 'xel0305'
                            if bDebugMessages == true then LOG(sFunctionRef..': want to build percival instead of titan') end
                        end
                    end
                elseif sBPIDToBuild == 'ual0303' then --AeonLightT3DF
                    if (M28Team.tTeamData[iTeam][M28Team.refbEnemyHasHeavyLandT3] and oFactory[refiTotalBuildCount] >= 10) or M28Team.tTeamData[iTeam][M28Team.refiConstructedExperimentalCount] > 0 or (oFactory[refiTotalBuildCount] >= 5 and M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingMass]) or M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryLandCombat * categories.ual0303) >= 10 then
                        if oFactory:CanBuild('sal0311') or oFactory:CanBuild('bal0310') then
                            aiBrain[reftBlueprintPriorityOverride]['ual0303'] = nil
                            aiBrain[reftBlueprintPriorityOverride]['sal0311'] = 1
                            aiBrain[reftBlueprintPriorityOverride]['bal0310'] = 1
                            sBPIDToBuild = 'sal0311'
                            if bDebugMessages == true then LOG(sFunctionRef..': want to build moldovite instead of harbinger') end
                        end
                    end
                elseif sBPIDToBuild == 'wsl0308' or sBPIDToBuild == 'ssl0311' then --SeraphimLightT3DF
                    if (M28Team.tTeamData[iTeam][M28Team.refbEnemyHasHeavyLandT3] and oFactory[refiTotalBuildCount] >= 10) or M28Team.tTeamData[iTeam][M28Team.refiConstructedExperimentalCount] > 0 or (oFactory[refiTotalBuildCount] >= 5 and M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingMass]) or M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryLandCombat * (categories.wsl0308 + categories.ssl0311)) >= 10 then
                        if oFactory:CanBuild('xsl0303') or oFactory:CanBuild('bsl0310') or oFactory:CanBuild('brpt3bot') then
                            aiBrain[reftBlueprintPriorityOverride]['wsl0308'] = nil
                            aiBrain[reftBlueprintPriorityOverride]['ssl0311'] = nil
                            aiBrain[reftBlueprintPriorityOverride]['xsl0303'] = 1
                            aiBrain[reftBlueprintPriorityOverride]['bsl0310'] = 1
                            aiBrain[reftBlueprintPriorityOverride]['brpt3bot'] = 1
                            sBPIDToBuild = 'xsl0303'
                        end
                    end
                    --Aeon - build zealot instead of obsidians initially if dont have much power
                elseif sBPIDToBuild == 'ual0202' and (aiBrain[M28Economy.refiGrossEnergyBaseIncome] < 95 or aiBrain:GetEconomyStoredRatio('ENERGY') < 0.95 or (oFactory[refiBuildCountByBlueprint]['bal0206'] or 0) < 2 ) then
                    if oFactory:CanBuild('bal0206') then
                        if bDebugMessages == true then LOG(sFunctionRef..': Switching to build Zealot instead of obsidian') end
                        sBPIDToBuild = 'bal0206'
                    end
                end
            else

                --Normal (non-QUIET) overrides
                --Special case - Cybran and UEF - if building loyalists or titans, then check if want to switch to bricks/percies
                if sBPIDToBuild == 'url0303' and not(ScenarioInfo.Options.M28PrioritiseBPs == 2) then --Loyalist
                    if M28Team.tTeamData[aiBrain.M28Team][M28Team.refbEnemyHasPerciesOrBricks] or M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryLandCombat * categories.TECH3) >= 2 then
                        if oFactory:CanBuild('xrl0305') then
                            aiBrain[reftBlueprintPriorityOverride]['url0303'] = nil --loyalist
                            aiBrain[reftBlueprintPriorityOverride]['xrl0305'] = 1 --brick
                            sBPIDToBuild = 'xrl0305'
                            if bDebugMessages == true then LOG(sFunctionRef..': Wnat to build brick instead of loyalist') end
                        end
                    end
                elseif sBPIDToBuild == 'uel0303' and not(ScenarioInfo.Options.M28PrioritiseBPs == 2) then --Titan
                    if M28Team.tTeamData[aiBrain.M28Team][M28Team.refbEnemyHasPerciesOrBricks] or M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryLandCombat * categories.TECH3) >= 15 then
                        if oFactory:CanBuild('xel0305') then
                            aiBrain[reftBlueprintPriorityOverride]['url0303'] = nil --Titan
                            aiBrain[reftBlueprintPriorityOverride]['xel0305'] = 1 --Percival
                            sBPIDToBuild = 'xel0305'
                            if bDebugMessages == true then LOG(sFunctionRef..': want to build percival instead of titan') end
                        end
                    end
                    --Aeon - build blazes instead of obsidians initially if dont have much power
                elseif sBPIDToBuild == 'ual0202' and (aiBrain[M28Economy.refiGrossEnergyBaseIncome] < 95 or aiBrain:GetEconomyStoredRatio('ENERGY') < 0.95 or (oFactory[refiBuildCountByBlueprint]['xal0203'] or 0) < 2 ) then
                    if oFactory:CanBuild('xal0203') then
                        if bDebugMessages == true then LOG(sFunctionRef..': Switching to build blaze instead of obsidian') end
                        sBPIDToBuild = 'xal0203'
                    end

                end
            end
            --Overrides applicable to both QUIET and normal (FAF/LOUD)
            if bDebugMessages == true then LOG(sFunctionRef..': Is this a LB BP='..tostring((sBPIDToBuild == 'ual0106' or sBPIDToBuild == 'url0106' or sBPIDToBuild == 'uel0106'))..'; ScenarioInfo.Options.M28PrioritiseBPs='..(ScenarioInfo.Options.M28PrioritiseBPs or 'nil')..'; LAB lifetime count='..M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryLightAttackBot)) end
            if (sBPIDToBuild == 'ual0106' or sBPIDToBuild == 'url0106' or sBPIDToBuild == 'uel0106') and not(ScenarioInfo.Options.M28PrioritiseBPs == 2) then --light assault bots - disable after the first couple
                --Redundancy for cases where LABs get built far more than wanted (most of the time they get avoided by choosing the slowest T1 land unit)
                local iLABLifetimeCount = M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryLightAttackBot)
                if iLABLifetimeCount >= 10 or not(aiBrain[M28Map.refbCanPathToEnemyBaseWithLand]) or (iLABLifetimeCount >= 2 and not(EntityCategoryContains(categories.AEON, oFactory.UnitId))) or (iLABLifetimeCount >= 5 and M28Conditions.GetTeamLifetimeBuildCount(aiBrain.M28Team, M28UnitInfo.refCategoryLightAttackBot) >= 15) then
                    aiBrain[reftBlueprintPriorityOverride]['ual0106'] = -1 --LAB (so prioritise aurora instead)
                    aiBrain[reftBlueprintPriorityOverride]['url0106'] = -1 --LAB (so prioritise mantis instead)
                    aiBrain[reftBlueprintPriorityOverride]['uel0106'] = -1 --Mechmarine (so prioritise striker instead)
                    if bDebugMessages == true then LOG(sFunctionRef..': LABs should be much less likely to be built now') end
                end
            end
        else
            --Dont want to prioritise certain units; only exception will make is not having enough power to build obsidians
            if M28Utilities.bQuietModActive then
                if sBPIDToBuild == 'ual0202' and (aiBrain[M28Economy.refiGrossEnergyBaseIncome] < 95 or aiBrain:GetEconomyStoredRatio('ENERGY') < 0.95 or (oFactory[refiBuildCountByBlueprint]['bal0206'] or 0) < 2 ) then
                    if oFactory:CanBuild('bal0206') then
                        if bDebugMessages == true then LOG(sFunctionRef..': Switching to build Zealot instead of obsidian') end
                        sBPIDToBuild = 'bal0206'
                    end
                end
            else
                if sBPIDToBuild == 'ual0202' and (aiBrain[M28Economy.refiGrossEnergyBaseIncome] < 95 or aiBrain:GetEconomyStoredRatio('ENERGY') < 0.95 or (oFactory[refiBuildCountByBlueprint]['xal0203'] or 0) < 2 ) then
                    if oFactory:CanBuild('xal0203') then
                        if bDebugMessages == true then LOG(sFunctionRef..': Switching to build blaze instead of obsidian') end
                        sBPIDToBuild = 'xal0203'
                    end
                end
            end
        end
        if EntityCategoryContains(M28UnitInfo.refCategoryEngineer, sBPIDToBuild) then
            --Engineers - dont build if we have spare engineers at our current LZ
            local iLastTimeOfSpareEngi
            if iFactoryTechLevel >= 3 then iLastTimeOfSpareEngi = (tLZTeamData[M28Map.subrefiTimeLastHadSpareEngiByTech][iFactoryTechLevel] or -1000)
            elseif iFactoryTechLevel == 2 then
                iLastTimeOfSpareEngi = tLZTeamData[M28Map.subrefiTimeLastHadSpareEngiByTech][3]
                if iLastTimeOfSpareEngi then
                    if tLZTeamData[M28Map.subrefiTimeLastHadSpareEngiByTech][2] then
                        iLastTimeOfSpareEngi = math.min(iLastTimeOfSpareEngi, tLZTeamData[M28Map.subrefiTimeLastHadSpareEngiByTech][2])
                    end
                else
                    iLastTimeOfSpareEngi = (tLZTeamData[M28Map.subrefiTimeLastHadSpareEngiByTech][iFactoryTechLevel] or -1000)
                end
            else
                iLastTimeOfSpareEngi = tLZTeamData[M28Map.subrefiTimeLastHadSpareEngiByTech][3]
                if iLastTimeOfSpareEngi then
                    if tLZTeamData[M28Map.subrefiTimeLastHadSpareEngiByTech][2] then
                        iLastTimeOfSpareEngi = math.min(iLastTimeOfSpareEngi, tLZTeamData[M28Map.subrefiTimeLastHadSpareEngiByTech][2])
                    end
                else
                    iLastTimeOfSpareEngi = (tLZTeamData[M28Map.subrefiTimeLastHadSpareEngiByTech][iFactoryTechLevel] or -1000)
                end

                if iLastTimeOfSpareEngi then
                    if tLZTeamData[M28Map.subrefiTimeLastHadSpareEngiByTech][1] then
                        iLastTimeOfSpareEngi = math.min(iLastTimeOfSpareEngi, tLZTeamData[M28Map.subrefiTimeLastHadSpareEngiByTech][1])
                    end
                end
            end

            local iMaxSpareWanted
            if tLZTeamData[M28Map.subrefLZbCoreBase] and oFactory[refiTotalBuildCount] >= 5 then iMaxSpareWanted = 0
            else iMaxSpareWanted = 1
            end
            if GetGameTimeSeconds() - iLastTimeOfSpareEngi <= 10 and GetGameTimeSeconds() >= 300 and (tLZTeamData[M28Map.subrefLZbCoreBase] or oFactory[refiTotalBuildCount] >= 15) and (M28Team.tTeamData[aiBrain.M28Team][M28Team.subrefiTeamAverageMassPercentStored] or 0) <= 0.3 then iMaxSpareWanted = -1 end
            --tLZTeamData[M28Map.subrefiTimeLastHadSpareEngiByTech][iFactoryTechLevel] or (

            if iMaxSpareWanted >= 0 and not(M28Conditions.TeamHasLowMass(aiBrain.M28Team)) and (not(tLZTeamData[M28Map.subrefLZbCoreBase]) or oFactory[refiTotalBuildCount] <= 10 or M28Team.tTeamData[aiBrain.M28Team][M28Team.subrefiTeamAverageMassPercentStored] >= 0.3) then
                iMaxSpareWanted = math.max(2, 1 + math.floor((M28Team.tTeamData[aiBrain.M28Team][M28Team.subrefiTeamAverageMassPercentStored] or 0) * 10)) * M28Engineer.tiBPByTech[iFactoryTechLevel]
            end
            if (tLZTeamData[M28Map.subrefSpareBPByTech][iFactoryTechLevel] or 0) > iMaxSpareWanted or (tLZTeamData[M28Map.subrefSpareBPByTech][M28UnitInfo.GetUnitTechLevel(sBPIDToBuild)] or 0) > iMaxSpareWanted then
                if bDebugMessages == true then LOG(sFunctionRef..': Have sufficient spare engineers, iMaxSpareWanted='..iMaxSpareWanted) end
                sBPIDToBuild = nil
            end
            --Smaller maps - try and build engis in proportion to tanks at t1 stage
            if iFactoryTechLevel < 2 and sBPIDToBuild and M28Map.iMapSize <= 256 and aiBrain[M28Map.refbCanPathToEnemyBaseWithLand] then
                if not(iCurEngineers) then iCurEngineers = aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryEngineer) end
                local iCurCombat = aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryLandCombat)
                if iCurEngineers > math.max(10, iCurCombat) and aiBrain:GetEconomyStoredRatio('MASS') < 0.6 then
                    if bDebugMessages == true then LOG(sFunctionRef..': Are at t1 stage so want to get more tanks if too bad a proportion, iCurEngineers='..iCurEngineers..'; iCurCombat='..iCurCombat) end
                    sBPIDToBuild = nil
                end
            end

            --Engineers - restrict tech level to the tech level that the LZ is flagged as wanting, unless we are trying to build an engineer of our highest tech level
            if bDebugMessages == true then
                LOG(sFunctionRef..': Were trying to build an engineer, will check if we want BP of this tech level or not, sBPIDToBuild='..(sBPIDToBuild or 'nil')..'; tLZTeamData[M28Map.subrefTbWantBP]='..tostring(tLZTeamData[M28Map.subrefTbWantBP] or false))
            end
            if sBPIDToBuild then --and (tLZTeamData[M28Map.subrefTbWantBP] or M28Map.bIsCampaignMap or M28Overseer.bUnitRestrictionsArePresent) then
                local iCurUnitTechLevel = M28UnitInfo.GetBlueprintTechLevel(sBPIDToBuild)
                if iCurUnitTechLevel < 3 then
                    local iLowestTechWanted
                    if not(tLZTeamData[M28Map.subrefTBuildPowerByTechWanted]) then
                        if not(tLZTeamData[M28Map.subrefTBuildPowerByTechWanted]) then
                            if GetGameTimeSeconds() >= 60 then M28Utilities.ErrorHandler('Dont have BP by tech set for zone containing factory '..oFactory.UnitId..M28UnitInfo.GetUnitLifetimeCount(oFactory)) end
                        else
                            for iTech, iBPWanted in tLZTeamData[M28Map.subrefTBuildPowerByTechWanted] do
                                if iBPWanted > 0 then
                                    iLowestTechWanted = iTech
                                    break
                                end
                            end
                        end
                        if bDebugMessages == true then LOG(sFunctionRef..': iLowestTechWanted='..(iLowestTechWanted or 'nil')..'; iCurUnitTechLevel='..iCurUnitTechLevel) end
                        if (iLowestTechWanted or 1) > math.max(1, iCurUnitTechLevel) then
                            --Do we already have a number of units of this tech level?
                            if aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryEngineer * M28UnitInfo.ConvertTechLevelToCategory(iCurUnitTechLevel)) >= 5 then
                                sBPIDToBuild = nil
                                if bDebugMessages == true then LOG(sFunctionRef..': We already have 5 engineers of this tech level, and dont want more of this tech, iLowestTechWanted='..iLowestTechWanted..', iCurUnitTechLevel='..iCurUnitTechLevel) end
                            end
                        end
                    end
                end
            end

            --Cap total gunships to be active at any one time
        elseif EntityCategoryContains(M28UnitInfo.refCategoryGunship - categories.TECH3 - categories.EXPERIMENTAL, sBPIDToBuild) then
            if aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryGunship) >= 80 and not(M28Map.bIsCampaignMap) then
                sBPIDToBuild = nil
                if bDebugMessages == true then LOG(sFunctionRef..': Already have 80 gunships so wont get more') end
            end
        end
    end
    if bDebugMessages == true then LOG(sFunctionRef..': About to consider adjustment for factory '..oFactory.UnitId..M28UnitInfo.GetUnitLifetimeCount(oFactory)..' for if close to unit cap, sBPIDToBuild='..(sBPIDToBuild or 'nil')..'; aiBrain[M28Overseer.refbCloseToUnitCap]='..tostring(aiBrain[M28Overseer.refbCloseToUnitCap] or false)..'; aiBrain[M28Overseer.refiExpectedRemainingCap]='..(aiBrain[M28Overseer.refiExpectedRemainingCap] or 'nil')) end
    if sBPIDToBuild and aiBrain[M28Overseer.refbCloseToUnitCap] then
        --If just ctrlKd in last 60s and are ctrlking t3 land or engis then dont build naything (relevant e.g. for engineers from air fac, as land fac aborts much earlier)
        if not(iCurEngineers) and EntityCategoryContains(M28UnitInfo.refCategoryEngineer, sBPIDToBuild) then iCurEngineers = aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryEngineer) end
        if not(iCurEngineers) or iCurEngineers > M28Overseer.iT3EngineerUnitCapThresholdCount or (iCurEngineers >= 20 and not(EntityCategoryContains(categories.TECH3, sBPIDToBuild)) and aiBrain[refiHighestFactoryBuildCount] >= 3) then
            if aiBrain[M28Overseer.refiTimeOfLastUnitCapDeath] and GetGameTimeSeconds() - aiBrain[M28Overseer.refiTimeOfLastUnitCapDeath] <= 60 and (M28Team.tTeamData[aiBrain.M28Team][M28Team.refiLowestUnitCapAdjustmentLevel] < 0 or (tLZTeamData[M28Map.subrefLZbCoreBase] and not(EntityCategoryContains(categories.TECH3, sBPIDToBuild)))) then
                if bDebugMessages == true then LOG(sFunctionRef..': Have recently ctrlkd unit so want to abort if we are about to build the same unit again if we have mobile land or same category, do we contain this='..tostring(EntityCategoryContains(M28UnitInfo.refCategoryMobileLand + aiBrain[M28Overseer.refiUnitCapCategoriesDestroyed], sBPIDToBuild))) end
                if EntityCategoryContains(M28UnitInfo.refCategoryMobileLand + aiBrain[M28Overseer.refiUnitCapCategoriesDestroyed], sBPIDToBuild) then
                    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
                    return nil
                end
            end
        end
        if aiBrain[M28Overseer.refiExpectedRemainingCap] <= 20 or (aiBrain[M28Overseer.refiExpectedRemainingCap] <= 50 and M28Team.tTeamData[aiBrain.M28Team][M28Team.subrefiHighestFriendlyLandFactoryTech] >= 3 and EntityCategoryContains(categories.TECH1 + M28UnitInfo.refCategoryMobileLand * categories.TECH2, sBPIDToBuild)) or (aiBrain[M28Overseer.refiUnitCapCategoriesDestroyed] and EntityCategoryContains(aiBrain[M28Overseer.refiUnitCapCategoriesDestroyed], sBPIDToBuild) and aiBrain[M28Overseer.refiExpectedRemainingCap] <= 150 and (aiBrain[M28Overseer.refiExpectedRemainingCap] <= 100 or aiBrain:GetEconomyStoredRatio('MASS') >= 0.95)) then
            --Exception - build T2 engineers if we dont have many T3 engineers and have at least 10 leeway and havent been destroying these units
            if aiBrain[M28Overseer.refiExpectedRemainingCap] >= 20 and EntityCategoryContains(M28UnitInfo.refCategoryEngineer * categories.TECH2, sBPIDToBuild) and aiBrain[M28Overseer.refiExpectedRemainingCap] >= 25 and aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryEngineer * categories.TECH3) <= 2 and (not(aiBrain[M28Overseer.refiUnitCapCategoriesDestroyed]) or not(EntityCategoryContains(aiBrain[M28Overseer.refiUnitCapCategoriesDestroyed], sBPIDToBuild))) then
                --Are trying to build a T2 engi and havent been destroying any yet, so still build it
                --i.e. do nothing
            elseif EntityCategoryContains(M28UnitInfo.refCategoryEngineer * categories.TECH3, sBPIDToBuild) and aiBrain[M28Overseer.refiExpectedRemainingCap] >= 5 and (iCurEngineers <= 3 or aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryEngineer * categories.TECH3) <= 3) then
                --Do nothing - want some t3 engineers so can build t3 and experimental units
                --Another exception, more for campaign maps - if factory tech level is our highest tech level, and it isnt a destroyed unit category, then still build
            elseif iCurEngineers >= 200 and (iCurEngineers >= 500 or (iCurEngineers >= GetArmyUnitCap(aiBrain:GetArmyIndex()) * 0.4 and (iCurEngineers >= 400 or iCurEngineers >=  GetArmyUnitCap(aiBrain:GetArmyIndex()) * 0.5))) then
                if bDebugMessages == true then LOG(sFunctionRef..': have too many engineers so dont want to get more') end
                sBPIDToBuild = nil
            elseif iFactoryTechLevel >= M28Team.tTeamData[aiBrain.M28Team][M28Team.subrefiHighestFriendlyFactoryTech] and not(EntityCategoryContains(aiBrain[M28Overseer.refiUnitCapCategoriesDestroyed], sBPIDToBuild)) then
                --Do nothing - are at highest tech level for this factory and we havent destroyed any units of this type
            elseif EntityCategoryContains(categories.SUBCOMMANDER, sBPIDToBuild) and ((M28Team.tTeamData[aiBrain.M28Team][M28Team.refiLowestUnitCapAdjustmentLevel] or 0) >= -1 or aiBrain:GetCurrentUnits(categories.SUBCOMMANDER) <= 60) then
                if bDebugMessages == true then LOG(sFunctionRef..': Still build SACU as unit cap isnt too bad or we dont have loads') end
            else
                if bDebugMessages == true then LOG(sFunctionRef..': Close to unit cap so wont build more') end
                sBPIDToBuild = nil
            end
        end
        if sBPIDToBuild and (aiBrain[M28Overseer.refiExpectedRemainingCap] < 10 or (M28Team.tTeamData[aiBrain.M28Team][M28Team.refiLowestUnitCapAdjustmentLevel] <= 1 and (aiBrain[M28Overseer.refiExpectedRemainingCap] < 40 or (aiBrain[M28Overseer.refiExpectedRemainingCap] < 70 and M28Team.tTeamData[aiBrain.M28Team][M28Team.refiLowestUnitCapAdjustmentLevel] == 0)))) then
            --Dont build anything if already have lots of it
            if bDebugMessages == true then LOG(sFunctionRef..': Are close to unit cap, sBPIDToBuild after initial close to unit override='..(sBPIDToBuild or 'nil')..'; Current units owned of this already='..aiBrain:GetCurrentUnits(categories[sBPIDToBuild])) end
            local iCurUnitsOfCategory = aiBrain:GetCurrentUnits(categories[sBPIDToBuild])

            if iCurUnitsOfCategory >= 150 or (iCurUnitsOfCategory >= 50 and (aiBrain[M28Overseer.refiExpectedRemainingCap] or 0) <= 35 and (iCurUnitsOfCategory >= 100 or ((oFactory[refiTotalBuildCount] or 0) + iCurUnitsOfCategory >= 100 and EntityCategoryContains(categories.TECH1 + categories.TECH2, sBPIDToBuild)))) then
                if bDebugMessages == true then LOG(sFunctionRef..': Have lots of units of this category already, iCurUnitsOfCategory='..iCurUnitsOfCategory) end
                sBPIDToBuild = nil
            end
        end
        if sBPIDToBuild then
            if EntityCategoryContains(M28UnitInfo.refCategoryNavalSurface, sBPIDToBuild) then
                if aiBrain:GetCurrentUnits(categories[sBPIDToBuild]) >= 60 then
                    if bDebugMessages == true then LOG(sFunctionRef..': Have lots of this category already, naval surface, cur units='..aiBrain:GetCurrentUnits(categories[sBPIDToBuild])) end
                    sBPIDToBuild = nil
                end
            elseif (M28Team.tTeamData[aiBrain.M28Team][M28Team.refiLowestUnitCapAdjustmentLevel] or 5) <= 1 then
                if not(EntityCategoryContains(M28UnitInfo.refCategoryGunship, sBPIDToBuild)) and aiBrain:GetCurrentUnits(categories[sBPIDToBuild]) >= 100 then
                    if bDebugMessages == true then LOG(sFunctionRef..': Are at a unit cap low level and have lots of units, cur units of category='..aiBrain:GetCurrentUnits(categories[sBPIDToBuild])) end
                    sBPIDToBuild = nil
                elseif EntityCategoryContains(M28UnitInfo.refCategoryGunship, sBPIDToBuild) and aiBrain:GetCurrentUnits(categories[sBPIDToBuild]) >= 150 then
                    if bDebugMessages == true then LOG(sFunctionRef..': Are near unit cap and have lots of units of this category, cur units of category='..aiBrain:GetCurrentUnits(categories[sBPIDToBuild])) end
                    sBPIDToBuild = nil
                end
            end
            if sBPIDToBuild then
                --If we have ctrlk'd a unit due to the unit cap recently, and this contains the same category, then dont build
                if GetGameTimeSeconds() - (aiBrain[M28Overseer.refiTimeOfLastUnitCapDeath] or -100) <= 90 and M28Utilities.DoesCategoryContainCategory(categories[sBPIDToBuild], aiBrain[M28Overseer.refiUnitCapCategoriesDestroyed], false) then
                    if bDebugMessages == true then LOG(sFunctionRef..': We are close to unit can and last ctrlkd a unit within last 90s, and this unit category is consistent with one of the categories ctrlkd') end
                    sBPIDToBuild = nil
                end
            end
        end
        --Cap MAA levels
        if sBPIDToBuild and EntityCategoryContains(M28UnitInfo.refCategoryMAA - categories.TECH3, sBPIDToBuild) then
            local iMaxT1AndT2MAA = 200
            if M28Team.tAirSubteamData[aiBrain.M28AirSubteam][M28Team.refbHaveAirControl] then
                iMaxT1AndT2MAA = 100
            end
            if aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryMAA) >= iMaxT1AndT2MAA then
                --Ignore if enemy has air to ground threat in this zone
                if tLZTeamData[M28Map.refiEnemyAirToGroundThreat] == 0 then
                    if bDebugMessages == true then LOG(sFunctionRef..': Building T2 or lower MAA but no air to ground threat in zone and we have lots of MAA, curMAA='..aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryMAA)) end
                    sBPIDToBuild = nil
                end
            end
        end
    end

    --NoRush
    if sBPIDToBuild and M28Overseer.bNoRushActive then
        if M28Overseer.iNoRushTimer - GetGameTimeSeconds() > 30 then
            if not(EntityCategoryContains(M28UnitInfo.refCategoryEngineer + M28UnitInfo.refCategoryFactory + M28UnitInfo.refCategoryExperimentalLevel + categories.SUBCOMMANDER + M28UnitInfo.refCategorySatellite, sBPIDToBuild)) then
                sBPIDToBuild = nil
                if bDebugMessages == true then LOG(sFunctionRef..': In no rush so wont build unit') end
            end
        end
    end
    if bDebugMessages == true then LOG(sFunctionRef..': end of code, sBPIDToBuild='..(sBPIDToBuild or 'nil')) end
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
    return sBPIDToBuild
end

function GetLandZoneSupportCategoryWanted(oFactory, iTeam, iPlateau, iLandZone, iTargetLandZone, bDontConsiderBuildingMAA, bConsiderMobileShields, bConsiderMobileStealths, bConsiderAbsolvers, bDontGetCombat, bDontGetIndirect, bDontConsiderLandScouts)
    local sFunctionRef = 'GetLandZoneSupportCategoryWanted'
    local bDebugMessages = false if M28Profiler.bGlobalDebugOverride == true then   bDebugMessages = true end
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerStart)



    local iBaseCategoryWanted
    local tTargetLZData = M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iTargetLandZone]
    local tLZTargetTeamData = tTargetLZData[M28Map.subrefLZTeamData][iTeam]
    local bInSameIsland = false
    if NavUtils.GetLabel(M28Map.refPathingTypeLand, oFactory:GetPosition()) == NavUtils.GetLabel(M28Map.refPathingTypeLand, M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iTargetLandZone][M28Map.subrefMidpoint]) then
        bInSameIsland = true
        --If this is a campaign map do further checks if this zone wants support (as dont want to be running such checks a huge amount)
        if M28Map.bIsCampaignMap and tLZTargetTeamData[M28Map.subrefbLZWantsSupport] and not(iLandZone == iTargetLandZone) then
            --Are we not at full playable area?
            if M28Map.rMapPlayableArea[1] > M28Map.rMapPotentialPlayableArea[2] or M28Map.rMapPlayableArea[2] > M28Map.rMapPotentialPlayableArea[2] or M28Map.rMapPlayableArea[3] < M28Map.rMapPotentialPlayableArea[3] or M28Map.rMapPlayableArea[4] < M28Map.rMapPotentialPlayableArea[4] then
                bInSameIsland = false
                local tLZData = M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iLandZone]
                local iEntryNumber = tLZData[M28Map.subrefLZPathingToOtherLZEntryRef][iTargetLandZone]
                if iEntryNumber then
                    local tTravelPath = tLZData[M28Map.subrefLZPathingToOtherLandZones][iEntryNumber][M28Map.subrefLZPath]
                    if bDebugMessages == true then LOG(sFunctionRef..': tTravelPath='..repru(tTravelPath)) end
                    if M28Utilities.IsTableEmpty(tTravelPath) == false then
                        bInSameIsland = true
                        for iPath, iPathLZ in tTravelPath do
                            if bDebugMessages == true then LOG(sFunctionRef..': Considering iPathLZ='..iPathLZ..'; Is in playable area='..tostring(M28Conditions.IsLocationInPlayableArea(M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iPathLZ][M28Map.subrefMidpoint]))) end
                            if not(M28Conditions.IsLocationInPlayableArea(M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iPathLZ][M28Map.subrefMidpoint])) then
                                if bDebugMessages == true then LOG(sFunctionRef..': iPathLZ is not in the playable area so want to treat same island as being false') end
                                bInSameIsland = false
                                break
                            end
                        end
                    end
                end
            end
        end
    end

    --LOUD - disable MMLs if enemy has TMD
    if (M28Utilities.bLoudModActive or M28Utilities.bQuietModActive) and not(bDontGetIndirect) and (M28Utilities.IsTableEmpty(tLZTargetTeamData[M28Map.subreftoEnemyTMD]) == false or tLZTargetTeamData[M28Map.subrefiTimeFriendlyTMDHitEnemyMissile] and M28UnitInfo.GetUnitTechLevel(oFactory) <= 2 and GetGameTimeSeconds() - tLZTargetTeamData[M28Map.subrefiTimeFriendlyTMDHitEnemyMissile] <= 180) then bDontGetIndirect = true end

    if bDebugMessages == true then LOG(sFunctionRef..': Considering iPlateau '..iPlateau..'; iTargetLandZone='..iTargetLandZone..'; bInSameIsland='..tostring(bInSameIsland)..'; bDontConsiderBuildingMAA='..tostring(bDontConsiderBuildingMAA)..'; tLZTargetTeamData[M28Map.subrefbLZWantsIndirectSupport]='..tostring(tLZTargetTeamData[M28Map.subrefbLZWantsIndirectSupport])..'; M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat]='..M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat]..'; tLZTargetTeamData[M28Map.subrefLZThreatAllyGroundAA]='..tLZTargetTeamData[M28Map.subrefLZThreatAllyGroundAA]..'; subrefLZThreatAllyMAA='..tLZTargetTeamData[M28Map.subrefLZThreatAllyMAA]..'; tLZTargetTeamData[M28Map.subrefLZMAAThreatWanted]='..tLZTargetTeamData[M28Map.subrefLZMAAThreatWanted]..'; tLZTargetTeamData[M28Map.subrefbLZWantsSupport]='..tostring(tLZTargetTeamData[M28Map.subrefbLZWantsSupport])..'; LZ Air to ground enemy threat='..tLZTargetTeamData[M28Map.refiEnemyAirToGroundThreat]..'; tLZTargetTeamData[M28Map.refbLZWantsMobileShield]='..tostring(tLZTargetTeamData[M28Map.refbLZWantsMobileShield])..'; tLZTargetTeamData[M28Map.refbLZWantsMobileStealth]='..tostring(tLZTargetTeamData[M28Map.refbLZWantsMobileStealth])..'; tLZTeamData[M28Map.subrefbDangerousEnemiesInAdjacentWZ]='..tostring(tLZTargetTeamData[M28Map.subrefbDangerousEnemiesInAdjacentWZ])..'; bDontConsiderBuildingMAA='..tostring(bDontConsiderBuildingMAA or false)..'; bDontGetIndirect='..tostring(bDontGetIndirect or false)..'; bConsiderMobileShields='..tostring(bConsiderMobileShields)..'; tLZTeamData[M28Map.subrefLZTimeMAARetreatedFromGunships]='..(tLZTargetTeamData[M28Map.subrefLZTimeMAARetreatedFromGunships] or 'nil')) end

    --Priority scouts
    if not(bDontConsiderLandScouts) and tLZTargetTeamData[M28Map.refiTimeLastFailedToKiteDueToScoutIntel] and bInSameIsland and tLZTargetTeamData[M28Map.refbWantLandScout] and M28Utilities.IsTableEmpty(tLZTargetTeamData[M28Map.subrefTScoutsTravelingHere]) and GetGameTimeSeconds() - tLZTargetTeamData[M28Map.refiTimeLastFailedToKiteDueToScoutIntel] <= 20 then
        iBaseCategoryWanted = M28UnitInfo.refCategoryLandScout
        if bDebugMessages == true then LOG(sFunctionRef..': We recently failed to get a land scout for this zone so want to get one now') end
    end

    --MAA due to units retreating from gunships recently
    if not(bDontConsiderBuildingMAA) and tLZTargetTeamData[M28Map.subrefLZTimeMAARetreatedFromGunships] and GetGameTimeSeconds() - tLZTargetTeamData[M28Map.subrefLZTimeMAARetreatedFromGunships] <= 20 then
        if M28Conditions.WantT3MAAInsteadOfT2(oFactory, iTeam) then
            iBaseCategoryWanted = M28UnitInfo.refCategoryMAA
        else
            iBaseCategoryWanted = M28UnitInfo.refCategoryMAA - categories.TECH3
        end
        if not(bInSameIsland) then iBaseCategoryWanted = iBaseCategoryWanted * M28UnitInfo.refCategoryAmphibious + iBaseCategoryWanted * categories.HOVER end
        if bDebugMessages == true then LOG(sFunctionRef..': Will get MAA0') end
    end

    --Indirect support relatively early on - disable the indirectfire builder if the zone is flagged that it wants indirectfire support, but it already has some nearby and its only against T1 PD
    if not(iBaseCategoryWanted) and tLZTargetTeamData[M28Map.subrefbLZWantsIndirectSupport] and not(bDontGetIndirect) and tLZTargetTeamData[M28Map.subrefLZThreatEnemyBestStructureDFRange] < 30 and oFactory:GetAIBrain()[M28Economy.refiOurHighestFactoryTechLevel] <= 2 and M28UnitInfo.GetUnitTechLevel(oFactory) == 1 then
        local iBestAdjEnemyPDRange = tLZTargetTeamData[M28Map.subrefLZThreatEnemyBestStructureDFRange]
        local iEnemyPDThreat = tLZTargetTeamData[M28Map.subrefThreatEnemyDFStructures]
        local iOurIndirectThreat = tLZTargetTeamData[M28Map.subrefLZThreatAllyMobileIndirectTotal]
        for _, iAdjLZ in tTargetLZData[M28Map.subrefLZAdjacentLandZones] do
            local tAdjLZTeamData = M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iAdjLZ][M28Map.subrefLZTeamData][iTeam]
            iBestAdjEnemyPDRange = math.max(iBestAdjEnemyPDRange, tLZTargetTeamData[M28Map.subrefLZThreatEnemyBestStructureDFRange])
            iEnemyPDThreat = iEnemyPDThreat + tLZTargetTeamData[M28Map.subrefThreatEnemyDFStructures]
            iOurIndirectThreat = iOurIndirectThreat + tLZTargetTeamData[M28Map.subrefLZThreatAllyMobileIndirectTotal]
        end
        if bDebugMessages == true then LOG(sFunctionRef..': Considering if want to ignore indirectfire builder for t1, iBestAdjEnemyPDRange='..iBestAdjEnemyPDRange..'; iEnemyPDThreat='..iEnemyPDThreat..'; iOurIndirectThreat='..iOurIndirectThreat..'; No. of indirectfire units being built in base LZ='..M28Conditions.GetNumberOfUnitsCurrentlyBeingBuiltOfCategoryInZone(M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iLandZone][M28Map.subrefLZTeamData][iTeam], M28UnitInfo.refCategoryIndirect)) end
        if iBestAdjEnemyPDRange < 30 and iOurIndirectThreat >= 108 and iEnemyPDThreat <= 1500 and iOurIndirectThreat >= iEnemyPDThreat * 0.15 then
            if bDebugMessages == true then LOG(sFunctionRef..': Wont get indirect fire afterall as have enough indirectire to handle PD') end
            bDontGetIndirect = true
        elseif iBestAdjEnemyPDRange == 0 and iEnemyPDThreat == 0 and (iOurIndirectThreat > 0 or M28Conditions.GetNumberOfUnitsCurrentlyBeingBuiltOfCategoryInZone(M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iLandZone][M28Map.subrefLZTeamData][iTeam], M28UnitInfo.refCategoryIndirect) >= 1) then
            if bDebugMessages == true then LOG(sFunctionRef..': No nearby enemy PD, and we are already building an indirectfire unit in the base zone, so will hold off getting more indirectifre') end
            bDontGetIndirect = true
        end
    end

    if not(iBaseCategoryWanted) and (not(bDontGetCombat) and (tLZTargetTeamData[M28Map.subrefbLZWantsIndirectSupport] and not(bDontGetIndirect)) and tLZTargetTeamData[M28Map.subrefbLZWantsSupport]) or (GetGameTimeSeconds() - (tLZTargetTeamData[M28Map.subrefiTimeOfMMLFiringNearTMDOrShield] or -100) <= 30 and (not(M28Utilities.bLoudModActive or M28Utilities.bQuietModActive) or tLZTargetTeamData[M28Map.refiModDistancePercent] <= 0.35 or M28UnitInfo.GetUnitTechLevel(oFactory) >= 3)) then
        --First consider if we need MAA more urgently than indirect
        local bWantMAANotIndirect = false
        if not(bDontConsiderBuildingMAA) and M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] > 150 and tLZTargetTeamData[M28Map.subrefLZThreatAllyGroundAA] < tLZTargetTeamData[M28Map.subrefLZMAAThreatWanted] then
            --We want more MAA for this LZ as well as wanting more indirect fire; prioritise MAA based on threat ratio and if enemy has air to ground force
            local iMAARatioWanted = 8
            if M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] >= 25000 then iMAARatioWanted = 4 end
            if tLZTargetTeamData[M28Map.refiEnemyAirToGroundThreat] >= 200 then iMAARatioWanted = iMAARatioWanted * 0.5 end
            if tLZTargetTeamData[M28Map.subrefLZThreatAllyMobileIndirectTotal] < tLZTargetTeamData[M28Map.subrefLZThreatAllyGroundAA] * iMAARatioWanted then
                bWantMAANotIndirect = true
            end
        end
        if bDebugMessages == true then LOG(sFunctionRef..': tLZTargetTeamData[M28Map.subrefLZThreatAllyMobileIndirectTotal]='..tLZTargetTeamData[M28Map.subrefLZThreatAllyMobileIndirectTotal]..'; bWantMAANotIndirect='..tostring(bWantMAANotIndirect)) end
        if bWantMAANotIndirect then
            if M28Conditions.WantT3MAAInsteadOfT2(oFactory, iTeam) then
                iBaseCategoryWanted = M28UnitInfo.refCategoryMAA
            else
                iBaseCategoryWanted = M28UnitInfo.refCategoryMAA - categories.TECH3
            end
            if not(bInSameIsland) then iBaseCategoryWanted = iBaseCategoryWanted * M28UnitInfo.refCategoryAmphibious + iBaseCategoryWanted * categories.HOVER end
            if bDebugMessages == true then LOG(sFunctionRef..': Will get MAA1') end
        else
            if bInSameIsland then
                iBaseCategoryWanted = M28UnitInfo.refCategoryIndirect
                if bDebugMessages == true then LOG(sFunctionRef..': Considering oFactory='..oFactory.UnitId..M28UnitInfo.GetUnitLifetimeCount(oFactory)..'; iTeam='..iTeam..'; iPlateau='..iPlateau..'; iTargetLandZone='..iTargetLandZone..'; We want indirect support for this LZ; Enemy structure threat by DF range='..repru(M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iTargetLandZone][M28Map.subrefLZTeamData][iTeam][M28Map.subrefLZThreatEnemyStructureDFByRange])..'; Total indirect threat wanted for LZ='..M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iTargetLandZone][M28Map.subrefLZTeamData][iTeam][M28Map.subrefLZIndirectThreatWanted]) end
            else
                --Only consider amphibious indirect (so most factions wont build anything)
                iBaseCategoryWanted = M28UnitInfo.refCategoryIndirect * M28UnitInfo.refCategoryAmphibious + M28UnitInfo.refCategoryIndirect * categories.HOVER
            end
            --If enemy has a firebase in range then cancel request for indirect
            if not(tLZTargetTeamData[M28Map.subrefLZbCoreBase]) and M28Utilities.IsTableEmpty(tLZTargetTeamData[M28Map.subreftEnemyFirebasesInRange]) == false then
                iBaseCategoryWanted = nil
                if bDebugMessages == true then LOG(sFunctionRef..': Are in range of a firebase so wont get indirect afterall') end
            else
                --Upgrade if are at T1 and enemy has T2 PD
                if oFactory[refiTotalBuildCount] >= 3 then
                    local iFactoryTechLevel = M28UnitInfo.GetUnitTechLevel(oFactory)
                    if iFactoryTechLevel <= 2 then
                        local iNearbyEnemyPDRange = (tLZTargetTeamData[M28Map.subrefLZThreatEnemyBestStructureDFRange] or 0)
                        local tLZData = M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iLandZone]
                        if M28Utilities.IsTableEmpty(tLZData[M28Map.subrefLZAdjacentLandZones]) == false then
                            for _, iAdjLZ in tLZData[M28Map.subrefLZAdjacentLandZones] do
                                local tAdjLZTeamData = M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iAdjLZ][M28Map.subrefLZTeamData][iTeam]
                                iNearbyEnemyPDRange = math.max(iNearbyEnemyPDRange, (tAdjLZTeamData[M28Map.subrefLZThreatEnemyBestStructureDFRange] or 0))
                            end
                        end
                        if bDebugMessages == true then LOG(sFunctionRef..': iNearbyEnemyPDRange after checking adj zones='..iNearbyEnemyPDRange..'; tLZTargetTeamData[M28Map.subrefLZThreatEnemyBestStructureDFRange]='..tLZTargetTeamData[M28Map.subrefLZThreatEnemyBestStructureDFRange]) end
                        if iNearbyEnemyPDRange >= 30 and (iFactoryTechLevel == 1 or iNearbyEnemyPDRange >= 65) then
                            iBaseCategoryWanted = 'Upgrade'
                            if bDebugMessages == true then LOG(sFunctionRef..': Want to try and upgrade due to enemy having PD that outranges indirect units we can build here') end
                        end
                    end
                end

                if bDebugMessages == true and not(iBaseCategoryWanted == 'Upgrade') then LOG(sFunctionRef..': Will get Indirect, Enemy structure DF range='..(tLZTargetTeamData[M28Map.subrefLZThreatEnemyBestStructureDFRange] or 0)) end
            end
        end
    end
    if not(iBaseCategoryWanted) then
        --We dont want indirect fire units, do we want MAA units?
        if bDebugMessages == true then LOG(sFunctionRef..': Dont want indirect fire, do we want MAA? M28Map.subrefLZThreatAllyGroundAA='..tLZTargetTeamData[M28Map.subrefLZThreatAllyGroundAA]..'; M28Map.subrefLZMAAThreatWanted='..tLZTargetTeamData[M28Map.subrefLZMAAThreatWanted]..'; tLZTargetTeamData[M28Map.subrefLZThreatAllyGroundAA]='..reprs(tLZTargetTeamData[M28Map.subrefLZThreatAllyGroundAA])..'; tLZTargetTeamData[M28Map.subrefLZMAAThreatWanted]='..tLZTargetTeamData[M28Map.subrefLZMAAThreatWanted]..'; Is table of air units in this zone empty='..tostring(M28Utilities.IsTableEmpty(tLZTargetTeamData[M28Map.reftLZEnemyAirUnits]))..'; tLZTargetTeamData[M28Map.subrefLZbCoreBase]='..tostring(tLZTargetTeamData[M28Map.subrefLZbCoreBase])..'; tLZTargetTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ]='..tostring(tLZTargetTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ])..'; tLZTargetTeamData[M28Map.reftoNearestDFEnemies] empty='..tostring(M28Utilities.IsTableEmpty(tLZTargetTeamData[M28Map.reftoNearestDFEnemies]))..'; Team far behind on air='..tostring(M28Conditions.TeamIsFarBehindOnAir(iTeam))..'; tLZTargetTeamData[M28Map.reftLZEnemyAirUnits]) empty='..tostring(M28Utilities.IsTableEmpty(tLZTargetTeamData[M28Map.reftLZEnemyAirUnits]))..'; Core base or HQ='..tostring((tLZTargetTeamData[M28Map.subrefLZbCoreBase] or EntityCategoryContains(M28UnitInfo.refCategoryLandHQ - categories.TECH1, oFactory.UnitId)))..'; No enemy air in zone but are DF enemies='..tostring(M28Utilities.IsTableEmpty(tLZTargetTeamData[M28Map.reftLZEnemyAirUnits]) and tLZTargetTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ] and M28Utilities.IsTableEmpty(tLZTargetTeamData[M28Map.reftoNearestDFEnemies]) == false)..'; tLZTargetTeamData[M28Map.subrefLZThreatAllyGroundAA] >= 100='..tostring(tLZTargetTeamData[M28Map.subrefLZThreatAllyGroundAA] >= 100)..'; Total enemy air threat <10% of AA in this zone or we have air control='..tostring((M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] < tLZTargetTeamData[M28Map.subrefLZThreatAllyGroundAA] * 10 or not(M28Conditions.TeamIsFarBehindOnAir(iTeam))))) end
        if not(bDontConsiderBuildingMAA) and (tLZTargetTeamData[M28Map.subrefLZThreatAllyGroundAA] or 0) < (tLZTargetTeamData[M28Map.subrefLZMAAThreatWanted] or 0) and ( (tLZTargetTeamData[M28Map.subrefLZMAAThreatWanted] or 0) - (tLZTargetTeamData[M28Map.subrefLZThreatAllyGroundAA] or 0) >= 5 or (M28Team.tTeamData[iTeam][M28Team.subrefiAlliedMAAThreat] or 0) < math.max(100, (M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] or 0), (M28Team.tTeamData[iTeam][M28Team.refiEnemyAirAAThreat] or 0) * 0.15) or (tLZTargetTeamData[M28Map.refiEnemyAirToGroundThreat] or 0) > 0) and (M28UnitInfo.GetUnitTechLevel(oFactory) >= 2 or (M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.reftoAllEnemyAir]) == false and (not(bDontConsiderBuildingMAA) or tLZTargetTeamData[M28Map.refiEnemyAirToGroundThreat] > 0))) then
            --Dont get MAA if no enemy air units in this zone or adjacent zone, and the existing MAA threat is more than 50% of any mobile DF +IF threat
            local bStillWantMAA = true
            if (tLZTargetTeamData[M28Map.subrefLZMAAThreatWanted] or 0) < 30 and tLZTargetTeamData[M28Map.refiEnemyAirToGroundThreat] == 0 and (tLZTargetTeamData[M28Map.subrefLZTThreatAllyCombatTotal] or 0) * 0.25 < (tLZTargetTeamData[M28Map.subrefLZThreatAllyGroundAA] or 0) then
                bStillWantMAA = false
                --Also dont get MAA if this is a core base and enemy has no air units in this zone and no air to ground threat overall (will instead rely on adjacent zones that have flagged they want AA)
            elseif tLZTargetTeamData[M28Map.subrefLZbCoreBase] and M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] == 0 and M28Utilities.IsTableEmpty(tLZTargetTeamData[M28Map.reftLZEnemyAirUnits]) and (EntityCategoryContains(categories.TECH1 + categories.TECH2, oFactory.UnitId) or tLZTargetTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ]) then
                bStillWantMAA = false
                if bDebugMessages == true then LOG(sFunctionRef..': Dont want MAA as dealing with core base and no air to ground threat') end
                --Exception where imminent air to ground threat at core base and we already have some groundAA threat (equiv to 10%+ of enemy air to ground threat) or arent far behind on air
            elseif (tLZTargetTeamData[M28Map.subrefLZbCoreBase] or EntityCategoryContains(M28UnitInfo.refCategoryLandHQ - categories.TECH1, oFactory.UnitId)) and M28Utilities.IsTableEmpty(tLZTargetTeamData[M28Map.reftLZEnemyAirUnits]) and tLZTargetTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ] and tLZTargetTeamData[M28Map.subrefLZThreatAllyGroundAA] >= 100 and M28Utilities.IsTableEmpty(tLZTargetTeamData[M28Map.reftoNearestDFEnemies]) == false and (M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] < tLZTargetTeamData[M28Map.subrefLZThreatAllyGroundAA] * 10 or not(M28Conditions.TeamIsFarBehindOnAir(iTeam))) then
                bStillWantMAA = false
                if bDebugMessages == true then LOG(sFunctionRef..': Pressing land threat so will forgo getting more MAA for now') end
            elseif M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.reftoAllEnemyAir]) then
                local bNoAdjAirThreat = true
                local iAdjDFAndIFThreat = (tTargetLZData[M28Map.subrefLZThreatAllyMobileDFTotal] or 0) + (tTargetLZData[M28Map.subrefLZThreatAllyMobileIndirectTotal] or 0)
                local iAdjMAAThreat = (tTargetLZData[M28Map.subrefLZThreatAllyMAA] or 0)
                if M28Utilities.IsTableEmpty(tTargetLZData[M28Map.subrefLZAdjacentLandZones]) == false then
                    for _, iAdjLZ in tTargetLZData[M28Map.subrefLZAdjacentLandZones] do
                        local tAdjLZTeamData = M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iAdjLZ][M28Map.subrefLZTeamData][iTeam]
                        if M28Utilities.IsTableEmpty(tAdjLZTeamData[M28Map.subrefLZAdjacentLandZones]) == false then
                            bNoAdjAirThreat = false
                            break
                        else
                            iAdjDFAndIFThreat = iAdjDFAndIFThreat + (tAdjLZTeamData[M28Map.subrefLZThreatAllyMobileDFTotal] or 0) + (tAdjLZTeamData[M28Map.subrefLZThreatAllyMobileIndirectTotal] or 0)
                            iAdjMAAThreat = iAdjMAAThreat + (tAdjLZTeamData[M28Map.subrefLZThreatAllyMAA] or 0)
                        end
                    end
                end
                if bDebugMessages == true then LOG(sFunctionRef..': bNoAdjAirThreat='..tostring(bNoAdjAirThreat)..'; iAdjMAAThreat='..iAdjMAAThreat) end
                if bNoAdjAirThreat then
                    if iAdjMAAThreat >= 100 or EntityCategoryContains(categories.TECH1, oFactory.UnitId) then
                        local iMaxMAARatioWanted = 0.3
                        local iAirAAThreatWanted = M28Team.tTeamData[iTeam][M28Team.refiEnemyAirAAThreat] * 1.3
                        local iAirAAThreatHave = M28Team.tTeamData[iTeam][M28Team.subrefiOurAirAAThreat]
                        if iAirAAThreatHave < iAirAAThreatWanted then
                            iMaxMAARatioWanted = math.min(1, iMaxMAARatioWanted * 3 * iAirAAThreatWanted / iAirAAThreatHave)
                        end
                        if M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] >= 1000 then iMaxMAARatioWanted = iMaxMAARatioWanted * 1.5 end
                        if iAdjMAAThreat * iMaxMAARatioWanted > iAdjDFAndIFThreat then
                            bStillWantMAA = false
                        end
                        if bDebugMessages == true then LOG(sFunctionRef..': bStillWantMAA='..tostring(bStillWantMAA)..'; iAirAAThreatHave='..iAirAAThreatHave..'; iAirAAThreatWanted='..iAirAAThreatWanted..'; iMaxMAARatioWanted='..iMaxMAARatioWanted..'; iAdjMAAThreat='..iAdjMAAThreat..'; iAdjDFAndIFThreat='..iAdjDFAndIFThreat) end
                    end
                end
            end

            if bDebugMessages == true then LOG(sFunctionRef..': bStillWantMAA='..tostring(bStillWantMAA)..'; IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.reftoAllEnemyAir])='..tostring(M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.reftoAllEnemyAir]))..'; LZ wants DF support='..tostring(tLZTargetTeamData[M28Map.subrefbLZWantsDFSupport])..'; Is table of nearby enemy DF units empyt='..tostring(M28Utilities.IsTableEmpty(tLZTargetTeamData[M28Map.reftoNearestDFEnemies]))) end

            if bStillWantMAA then
                if M28Conditions.WantT3MAAInsteadOfT2(oFactory, iTeam) then
                    iBaseCategoryWanted = M28UnitInfo.refCategoryMAA
                else
                    iBaseCategoryWanted = M28UnitInfo.refCategoryMAA - categories.TECH3
                end
                if not(bInSameIsland) then iBaseCategoryWanted = iBaseCategoryWanted * M28UnitInfo.refCategoryAmphibious + iBaseCategoryWanted * categories.HOVER end
                if bDebugMessages == true then LOG(sFunctionRef..': Will build MAA2') end
            end
        end
        if not(iBaseCategoryWanted) then
            --Mobile shields
            if bConsiderMobileShields and tLZTargetTeamData[M28Map.refbLZWantsMobileShield] then
                iBaseCategoryWanted = M28UnitInfo.refCategoryMobileLandShield
                if bInSameIsland then iBaseCategoryWanted = M28UnitInfo.refCategoryMobileLandShield
                else iBaseCategoryWanted = iBaseCategoryWanted * M28UnitInfo.refCategoryAmphibious + iBaseCategoryWanted * categories.HOVER
                end
                if bDebugMessages == true then LOG(sFunctionRef..': LZ wants mobile shields so will build them; blueprint expect to build from this='..(GetBlueprintThatCanBuildOfCategory(oFactory:GetAIBrain(), iBaseCategoryWanted, oFactory) or 'nil')) end
                --If dont have any blueprints to build then look to support indirect or DF instead
                --GetBlueprintThatCanBuildOfCategory(aiBrain,               iCategoryCondition, oFactory, bGetSlowest, bGetFastest, bGetCheapest, iOptionalCategoryThatMustBeAbleToBuild, bIgnoreTechDifferences)
                local sBPIDToBuild = GetBlueprintThatCanBuildOfCategory(oFactory:GetAIBrain(), iBaseCategoryWanted, oFactory)
                if sBPIDToBuild then
                    sBPIDToBuild = AdjustBlueprintForOverrides(oFactory:GetAIBrain(), oFactory, sBPIDToBuild, tLZTargetTeamData, M28UnitInfo.GetUnitTechLevel(oFactory))
                end
                if not(sBPIDToBuild) then iBaseCategoryWanted = nil end
            end
            if not(iBaseCategoryWanted) then
                --Mobile stealth (unless enemy so close that combat units would be better)
                if bDebugMessages == true then LOG(sFunctionRef..': Considering if we want mobile stealth, bConsiderMobileStealths='..tostring(bConsiderMobileStealths)..'; tLZTargetTeamData[M28Map.refbLZWantsMobileStealth]='..tostring(tLZTargetTeamData[M28Map.refbLZWantsMobileStealth])..'; tLZTargetTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ]='..tostring(tLZTargetTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ])) end
                if bConsiderMobileStealths and tLZTargetTeamData[M28Map.refbLZWantsMobileStealth] and not(tLZTargetTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ]) then
                    iBaseCategoryWanted = M28UnitInfo.refCategoryMobileLandStealth
                    if bInSameIsland then iBaseCategoryWanted = M28UnitInfo.refCategoryMobileLandStealth
                    else iBaseCategoryWanted = iBaseCategoryWanted * M28UnitInfo.refCategoryAmphibious + iBaseCategoryWanted * categories.HOVER
                    end
                    if bDebugMessages == true then LOG(sFunctionRef..': LZ wants mobile stealths so will build them; blueprint expect to build from this='..(GetBlueprintThatCanBuildOfCategory(oFactory:GetAIBrain(), iBaseCategoryWanted, oFactory) or 'nil')) end
                    --If dont have any blueprints to build then look to support indirect or DF instead
                    --GetBlueprintThatCanBuildOfCategory(aiBrain,               iCategoryCondition, oFactory, bGetSlowest, bGetFastest, bGetCheapest, iOptionalCategoryThatMustBeAbleToBuild, bIgnoreTechDifferences)
                    local sBPIDToBuild = GetBlueprintThatCanBuildOfCategory(oFactory:GetAIBrain(), iBaseCategoryWanted, oFactory)
                    if sBPIDToBuild then
                        sBPIDToBuild = AdjustBlueprintForOverrides(oFactory:GetAIBrain(), oFactory, sBPIDToBuild, tLZTargetTeamData, M28UnitInfo.GetUnitTechLevel(oFactory))
                    end
                    if not(sBPIDToBuild) then iBaseCategoryWanted = nil end
                end
            end
        end
        if not(iBaseCategoryWanted) then
            if not(bDontGetCombat) and tLZTargetTeamData[M28Map.subrefbLZWantsSupport] then
                --We want DF units (but not indirect fire units)
                if bInSameIsland then
                    local iFactoryTechLevel = M28UnitInfo.GetUnitTechLevel(oFactory)
                    local iTechCategory = M28UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel)
                    if bDebugMessages == true then LOG(sFunctionRef..': We want direct fire units, iFactoryTechLevel='..iFactoryTechLevel) end
                    if M28Utilities.bLoudModActive and iFactoryTechLevel >= 3 then
                        --Sniperbots are really bad in LOUD other than Aeon T2 sniperbot so dont want to build skirmishers in case we build them
                        iBaseCategoryWanted = M28UnitInfo.refCategoryDFTank
                        if iFactoryTechLevel == 1 then iBaseCategoryWanted = iBaseCategoryWanted - M28UnitInfo.refCategoryLightAttackBot end
                    else
                        iBaseCategoryWanted = M28UnitInfo.refCategorySkirmisher * iTechCategory

                        if not(tLZTargetTeamData[M28Map.subrefLZbCoreBase]) and M28Utilities.IsTableEmpty(tLZTargetTeamData[M28Map.subreftEnemyFirebasesInRange]) == false then
                            iBaseCategoryWanted = M28UnitInfo.refCategoryDFTank
                            if iFactoryTechLevel == 1 then iBaseCategoryWanted = iBaseCategoryWanted - M28UnitInfo.refCategoryLightAttackBot end
                            if bDebugMessages == true then LOG(sFunctionRef..': Are in range of a firebase so wont get indirect afterall') end
                        elseif oFactory:GetAIBrain().M28Easy then
                            iBaseCategoryWanted = M28UnitInfo.refCategoryDFTank
                            if iFactoryTechLevel == 1 then iBaseCategoryWanted = iBaseCategoryWanted - M28UnitInfo.refCategoryLightAttackBot end
                            if bDebugMessages == true then LOG(sFunctionRef..': Want DF Tanks for M28Easy') end
                        elseif tLZTargetTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ] then
                            local iCurSkirmishersOfTech = oFactory:GetAIBrain():GetCurrentUnits(M28UnitInfo.refCategorySkirmisher * iTechCategory)
                            if iCurSkirmishersOfTech > 2 then
                                if bDebugMessages == true then LOG(sFunctionRef..': Enemies are nearby so want DF tanks more than skirmishers once we have a couple of skirmishers, unless we have similar numbers and skirmishers seem to be doing ok') end
                                local iCurDFTankOfTech = oFactory:GetAIBrain():GetCurrentUnits(M28UnitInfo.refCategoryDFTank * iTechCategory)
                                if iCurDFTankOfTech < iCurSkirmishersOfTech then
                                    iBaseCategoryWanted = M28UnitInfo.refCategoryDFTank
                                    if iFactoryTechLevel == 1 then iBaseCategoryWanted = iBaseCategoryWanted - M28UnitInfo.refCategoryLightAttackBot end
                                else
                                    local aiBrain = oFactory:GetAIBrain()
                                    local iDFLCOfTech = M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryDFTank * iTechCategory)
                                    local iSkirmisherLCOfTech = M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategorySkirmisher * iTechCategory)
                                    --We have >= DF tanks to skirmishers in actual units; if our LC is < this, then want to do DF tanks, otherwise want to analyse closer
                                    if iDFLCOfTech <= iSkirmisherLCOfTech then
                                        iBaseCategoryWanted = M28UnitInfo.refCategoryDFTank
                                        if iFactoryTechLevel == 1 then iBaseCategoryWanted = iBaseCategoryWanted - M28UnitInfo.refCategoryLightAttackBot end
                                    elseif iCurDFTankOfTech / iDFLCOfTech > iCurSkirmishersOfTech / iSkirmisherLCOfTech then
                                        iBaseCategoryWanted = M28UnitInfo.refCategoryDFTank
                                        if iFactoryTechLevel == 1 then iBaseCategoryWanted = iBaseCategoryWanted - M28UnitInfo.refCategoryLightAttackBot end
                                    end
                                end
                            end
                        end
                    end
                    --LOUD/QUIET - Prioritise T2 Aeon sniperbots
                    if bDebugMessages == true then LOG(sFunctionRef..': Deciding if we want to prioritise T2 aeon sniperbots in loud and QUIET, Factory techlevel='..iFactoryTechLevel..'; is aeon sniperbot category nil='..tostring(categories.ual0204 == nil)..'; Is factory Aeon='..tostring(EntityCategoryContains(categories.AEON, oFactory.UnitId))..'; Factory build count='..oFactory[refiTotalBuildCount]) end

                    if (M28Utilities.bLoudModActive or M28Utilities.bQuietModActive) and iFactoryTechLevel >= 2 and categories.ual0204 and EntityCategoryContains(categories.AEON, oFactory.UnitId) then
                        local iAltCategoryWanted
                        if iFactoryTechLevel == 2 and iBaseCategoryWanted == M28UnitInfo.refCategorySkirmisher * iTechCategory then
                            iAltCategoryWanted = M28UnitInfo.refCategorySniperBot * iTechCategory
                            if GetBlueprintThatCanBuildOfCategory(oFactory:GetAIBrain(), iAltCategoryWanted, oFactory) then iBaseCategoryWanted = iAltCategoryWanted end
                        elseif not(M28Utilities.bQuietModActive) and iFactoryTechLevel == 3 and (oFactory[refiTotalBuildCount] <= 10 or math.random(1,3) == 1) then
                            --LOUD only - still build T2 sniperbots at T3 for a bit as they're so good
                            iAltCategoryWanted = categories.ual0204
                            if bDebugMessages == true then LOG(sFunctionRef..': can we build a blueprint with t2 sniperbot blueprint? Is the blueprint nil='..tostring(GetBlueprintThatCanBuildOfCategory(oFactory:GetAIBrain(), iAltCategoryWanted, oFactory) == nil)) end
                            if GetBlueprintThatCanBuildOfCategory(oFactory:GetAIBrain(), iAltCategoryWanted, oFactory) then iBaseCategoryWanted = iAltCategoryWanted end
                        end
                    end
                    if M28Utilities.bLoudModActive and categories.brmt2medm then iBaseCategoryWanted = iBaseCategoryWanted + categories.brmt2medm end

                    if not(GetBlueprintThatCanBuildOfCategory(oFactory:GetAIBrain(), iBaseCategoryWanted, oFactory)) then
                        if bDebugMessages == true then LOG(sFunctionRef..': No units of category wanted, so will get DFTank+skirmisher') end
                        iBaseCategoryWanted = M28UnitInfo.refCategoryDFTank + M28UnitInfo.refCategorySkirmisher
                        if iFactoryTechLevel == 1 then
                            local iOrigCategory = iBaseCategoryWanted
                            iBaseCategoryWanted = iBaseCategoryWanted - M28UnitInfo.refCategoryLightAttackBot
                            if not(GetBlueprintThatCanBuildOfCategory(oFactory:GetAIBrain(), iBaseCategoryWanted, oFactory)) then iBaseCategoryWanted = iOrigCategory end
                        end

                    else
                        --We can build skirmishers, but if we have built fewer than 15 T3 tanks, and enemy is using T2 and lower tech, consider building t3 tanks instead
                        if iFactoryTechLevel >= 3 and M28Team.tTeamData[iTeam][M28Team.subrefiHighestEnemyGroundTech] <= 2 and M28Conditions.GetLifetimeBuildCount(oFactory:GetAIBrain(), M28UnitInfo.refCategoryDFTank * iTechCategory) <= 15 then
                            if bDebugMessages == true then LOG(sFunctionRef..': Enemy is still at T2 or lower and we havent built many T3 normal tanks so will build normal tanks first before trying to build skrimishers') end
                            iBaseCategoryWanted = M28UnitInfo.refCategoryDFTank
                        end
                    end

                else
                    iBaseCategoryWanted = M28UnitInfo.refCategoryAmphibiousCombat - categories.FIELDENGINEER
                end

                --Absolver override
                if bConsiderAbsolvers then
                    if M28Utilities.IsTableEmpty(tLZTargetTeamData[M28Map.subrefTEnemyUnits]) == false and M28Utilities.IsTableEmpty(EntityCategoryFilterDown(M28UnitInfo.refCategoryAllShieldUnits, tLZTargetTeamData[M28Map.subrefTEnemyUnits])) == false then
                        --Want absolvers unless we are already building some in this zone
                        local iAbsolverCategory = M28UnitInfo.refCategoryAbsolver
                        if not(bInSameIsland) then iAbsolverCategory = iAbsolverCategory * M28UnitInfo.refCategoryAmphibious + iAbsolverCategory * categories.HOVER end

                        if bDebugMessages == true then LOG(sFunctionRef..': Will get absolvers as enemy has some shield units') end
                        --Can we actually build a unit with this categoyr?

                        local sAbsolver = GetBlueprintThatCanBuildOfCategory(oFactory:GetAIBrain(), iAbsolverCategory, oFactory)
                        if sAbsolver then
                            iBaseCategoryWanted = iAbsolverCategory
                        end
                    end
                end
            elseif bDebugMessages == true then LOG(sFunctionRef..': Dont want any support category for this LZ')
            end
            if not(iBaseCategoryWanted) and tLZTargetTeamData[M28Map.subrefbDangerousEnemiesInAdjacentWZ] then
                iBaseCategoryWanted = M28UnitInfo.refCategoryAmphibiousCombat - categories.FIELDENGINEER
            end
        end
    end
    if bDebugMessages == true then LOG(sFunctionRef..': is iBaseCategoryWanted nil='..tostring(iBaseCategoryWanted == nil)) end
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
    return iBaseCategoryWanted
end

function ConsiderFactoryEnhancement(oFactory, tLZOrWZTeamData)
    local sFunctionRef = 'ConsiderFactoryEnhancement'
    local bDebugMessages = false if M28Profiler.bGlobalDebugOverride == true then   bDebugMessages = true end
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerStart)

    --Returns the enhancementID if we want to get an enhancement
    if bDebugMessages == true then LOG(sFunctionRef..': Start of code for factory '..oFactory.UnitId..M28UnitInfo.GetUnitLifetimeCount(oFactory)..'; Are factory enhnacement preferences nil='..tostring(oFactory[reftsFactoryEnhancementPreferences] == nil)..'; Factory build count='..oFactory[refiTotalBuildCount]..'; Enemy air to ground in zone='..(tLZOrWZTeamData[M28Map.refiEnemyAirToGroundThreat] or 0)..'; Enemies in LZ='..tostring(tLZOrWZTeamData[M28Map.subrefbDangerousEnemiesInThisLZ] or false)..'; Enemies in adj WZ='..tostring(tLZOrWZTeamData[M28Map.subrefbDangerousEnemiesInAdjacentWZ] or false)..'; Factory tech level='..M28UnitInfo.GetUnitTechLevel(oFactory)..'; is blueprint.enhnacmeents nil='..tostring(oFactory:GetBlueprint().Enhancements == nil)..'; Upgrade count='..(oFactory[M28ACU.refiUpgradeCount] or 'nil')..'; Time='..GetGameTimeSeconds()) end
    if oFactory[reftsFactoryEnhancementPreferences] == nil then
        --Decide on if we want enhancements for the factory, and if so what order to get them in
        oFactory[reftsFactoryEnhancementPreferences] = false --default value
        if tLZOrWZTeamData[M28Map.subrefLZbCoreBase] or oFactory[refbPrimaryFactoryForIslandOrPond] then
            local oBP = oFactory:GetBlueprint()
            if oBP.Enhancements and M28UnitInfo.GetUnitTechLevel(oFactory) >= 3 then
                if bDebugMessages == true then LOG(sFunctionRef..': Is oBP.Enhancements.ImprovedMateriels nil='..tostring(oBP.Enhancements.ImprovedMateriels == nil)) end
                if oBP.Enhancements.ImprovedMateriels and oBP.Enhancements.AdvancedMateriels then
                    oFactory[reftsFactoryEnhancementPreferences] = {[1]='ImprovedMateriels', [2] = 'AdvancedMateriels'}
                end
                if oBP.Enhancements.ImprovedProduction and oBP.Enhancements.AdvancedProduction then
                    if oFactory[reftsFactoryEnhancementPreferences] == false then oFactory[reftsFactoryEnhancementPreferences] = {} end
                    table.insert(oFactory[reftsFactoryEnhancementPreferences], 'ImprovedProduction')
                    table.insert(oFactory[reftsFactoryEnhancementPreferences], 'AdvancedProduction')
                end
                if oFactory[reftsFactoryEnhancementPreferences] == false then M28Utilities.ErrorHandler('Have a factory '..oFactory.UnitId..' but dont recognise the enhnacement options so wont get any', true) end
                if bDebugMessages == true then LOG(sFunctionRef..': Finished setting enhancement preferences, oFactory[reftsFactoryEnhancementPreferences]='..repru(oFactory[reftsFactoryEnhancementPreferences])) end
            end
        end
    end
    --Dont get enhancements if enemies in this zone
    if (oFactory[M28ACU.refiUpgradeCount] or 0) < 4 and  oFactory[reftsFactoryEnhancementPreferences] and M28Utilities.IsTableEmpty(oFactory[reftsFactoryEnhancementPreferences]) == false and (tLZOrWZTeamData[M28Map.refiEnemyAirToGroundThreat] or 0) == 0 and not(tLZOrWZTeamData[M28Map.subrefbDangerousEnemiesInThisLZ]) and not(tLZOrWZTeamData[M28Map.subrefbDangerousEnemiesInAdjacentWZ]) then
        --We want to get enhancements for this factory, decide if we have built enough units to justify them at this stage
        local iBuildCountWanted = 10 + 5 * ((oFactory[M28ACU.refiUpgradeCount] or 0) + 1)
        local iTeam = oFactory:GetAIBrain().M28Team
        if M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingMass] and (oFactory[M28ACU.refiUpgradeCount] or 0) >= 1 then iBuildCountWanted = iBuildCountWanted + 3 end
        if tLZOrWZTeamData[M28Map.subrefMexCountByTech][3] <= 2 then
            iBuildCountWanted = iBuildCountWanted + 3 * (2 - tLZOrWZTeamData[M28Map.subrefMexCountByTech][3])
        end
        if bDebugMessages == true then LOG(sFunctionRef..': Fac build count='..oFactory[refiTotalBuildCount]..'; iBuildCountWanted='..iBuildCountWanted) end
        if oFactory[refiTotalBuildCount] >= iBuildCountWanted then
            --Check we have no other factories in this zone already doing an enhancement
            local tFactoriesInZone = EntityCategoryFilterDown(M28UnitInfo.refCategoryAllHQFactories - categories.TECH1 - categories.TECH2, tLZOrWZTeamData[M28Map.subreftoLZOrWZAlliedUnits])
            local bHaveExistingUpgrade = false
            if M28Utilities.IsTableEmpty(tFactoriesInZone) == false then
                for iExistingFactory, oExistingFactory in tFactoriesInZone do
                    if not(oExistingFactory == oFactory) and M28UnitInfo.IsUnitValid(oExistingFactory) and oExistingFactory:GetFractionComplete() == 1 and oExistingFactory:IsUnitState('Upgrading') then
                        bHaveExistingUpgrade = true
                        break
                    end
                end
            end
            if bDebugMessages == true then LOG(sFunctionRef..': bHaveExistingUpgrade in zone='..tostring(bHaveExistingUpgrade)) end
            if not(bHaveExistingUpgrade) then
                --Want to get the upgrade - decide which upgrade to get
                local tsEnhancementsThatDontHave = {}
                local tsEnhancementsThatDoHave = {}
                local sEnhancementWanted
                for iEnhancementWanted = table.getn(oFactory[reftsFactoryEnhancementPreferences]), 1, -1 do
                    sEnhancementWanted = oFactory[reftsFactoryEnhancementPreferences][iEnhancementWanted]
                    if oFactory:HasEnhancement(sEnhancementWanted) then
                        table.insert(tsEnhancementsThatDoHave, sEnhancementWanted)
                        --Remove from oFactory[reftsFactoryEnhancementPreferences] so in future we dont try and get this (redundancy)
                        table.remove(oFactory[reftsFactoryEnhancementPreferences], iEnhancementWanted)
                    else
                        table.insert(tsEnhancementsThatDontHave, sEnhancementWanted)
                    end
                end
                if bDebugMessages == true then LOG(sFunctionRef..': tsEnhancementsThatDontHave='..repru(tsEnhancementsThatDontHave)..'; tsEnhancementsThatDoHave='..repru(tsEnhancementsThatDoHave)) end
                if M28Utilities.IsTableEmpty(tsEnhancementsThatDontHave) then
                    --No more enhancements to get
                    oFactory[reftsFactoryEnhancementPreferences] = false
                else
                    local sEnhancementToGet
                    if M28Utilities.IsTableEmpty(tsEnhancementsThatDoHave) then
                        sEnhancementToGet = oFactory[reftsFactoryEnhancementPreferences][1]
                    else
                        --Ignore enhancements that we dont have if they are prereqs for ones we do have
                        local sCurEnhancementThatWant, bObsolete
                        local oBP = oFactory:GetBlueprint()
                        if bDebugMessages == true then LOG(sFunctionRef..': Size of tsEnhancementsThatDontHave='..table.getn(tsEnhancementsThatDontHave)) end
                        for iCurEnhancementThatWant = table.getn(tsEnhancementsThatDontHave), 1, -1 do
                            bObsolete = false
                            sCurEnhancementThatWant = tsEnhancementsThatDontHave[iCurEnhancementThatWant]
                            --Go through enhancements we have, and see if this is a prereq; note that this logic only works if there are 2 levels to an upgrade - something more complicated owuld ben eeded if there are 3+ levels
                            for iCurEnhancementThatHave, sCurEnhancementThatHave in tsEnhancementsThatDoHave do
                                if bDebugMessages == true then LOG(sFunctionRef..': Considering iCurEnhancementThatWant='..iCurEnhancementThatWant..'; We already have enhancement='..sCurEnhancementThatHave..'; Prerequisite for this='..(oBP.Enhancements[sCurEnhancementThatHave].Prerequisite or 'nil')..'; sCurEnhancementThatWant before considering prereq='..(sCurEnhancementThatWant or 'nil')..'; Does the prereq for the enhancement we have equal the prereq for the enhancement we want='..tostring(oBP.Enhancements[sCurEnhancementThatHave].Prerequisite == sCurEnhancementThatWant)) end
                                if oBP.Enhancements[sCurEnhancementThatHave].Prerequisite == sCurEnhancementThatWant then
                                    bObsolete = true
                                    break
                                end
                            end
                            if bDebugMessages == true then LOG(sFunctionRef..': bObsolete='..tostring(bObsolete or false)) end
                            if bObsolete then
                                table.remove(tsEnhancementsThatDontHave, iCurEnhancementThatWant)
                            end
                        end
                        if bDebugMessages == true then LOG(sFunctionRef..': Finished excluding where we have the prereq, tsEnhancementsThatDontHave='..repru(tsEnhancementsThatDontHave)) end
                        if M28Utilities.IsTableEmpty(tsEnhancementsThatDontHave) then
                            --No more enhancements to get
                            oFactory[reftsFactoryEnhancementPreferences] = false
                        else
                            --Get the first one remaining
                            sEnhancementToGet = tsEnhancementsThatDontHave[1]
                        end
                    end
                    if bDebugMessages == true then LOG(sFunctionRef..': Finished considering what enhancements to get, sEnhancementToGet='..(sEnhancementToGet or 'nil')) end
                    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
                    return sEnhancementToGet
                end
            end
        end
    end
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
end

function GetBlueprintToBuildForLandFactory(aiBrain, oFactory)
    local sFunctionRef = 'GetBlueprintToBuildForLandFactory'
    local bDebugMessages = false if M28Profiler.bGlobalDebugOverride == true then   bDebugMessages = true end
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerStart)



    local iCategoryToBuild
    local iTeam = aiBrain.M28Team
    local iPlateau, iLandZone = M28Map.GetPlateauAndLandZoneReferenceFromPosition(oFactory:GetPosition(), true, oFactory)
    local tLZData = M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iLandZone]
    local tLZTeamData = tLZData[M28Map.subrefLZTeamData][iTeam]
    local iFactoryTechLevel = M28UnitInfo.GetUnitTechLevel(oFactory)
    local iAirSubteam = aiBrain.M28AirSubteam
    local iLandSubteam = aiBrain.M28LandSubteam
    local bHaveLowMass = M28Conditions.TeamHasLowMass(iTeam)
    local bHaveLowPower = M28Conditions.HaveLowPower(iTeam)
    local bCanPathToEnemyWithLand = false
    if tLZData[M28Map.subrefLZIslandRef] == NavUtils.GetLabel(M28Map.refPathingTypeLand, tLZTeamData[M28Map.reftClosestEnemyBase]) then
        bCanPathToEnemyWithLand = true
    end



    local iEngisInZone
    function GetEngiCountInZone()
        if not(iEngisInZone) then
            local tEngisInZone = EntityCategoryFilterDown(M28UnitInfo.refCategoryEngineer, tLZTeamData[M28Map.subreftoLZOrWZAlliedUnits])
            if M28Utilities.IsTableEmpty(tEngisInZone) then
                iEngisInZone = 0
            else
                iEngisInZone = table.getn(tEngisInZone)
            end
        end
        return iEngisInZone
    end



    if bDebugMessages == true then
        LOG(sFunctionRef .. ': Near start of code, time=' .. GetGameTimeSeconds() .. '; oFactory=' .. oFactory.UnitId .. M28UnitInfo.GetUnitLifetimeCount(oFactory) .. ' at plateau '..(iPlateau or 'nil')..' and zone '..(iLandZone or 'nil')..'; Checking if we have the highest tech land factory in the current land zone, iFactoryTechLevel=' .. iFactoryTechLevel .. '; Highest friendly factory tech=' .. M28Team.tTeamData[iTeam][M28Team.subrefiHighestFriendlyFactoryTech] .. '; Allied ground MAA threat=' .. (M28Team.tTeamData[iTeam][M28Team.subrefiAlliedMAAThreat] or 'nil') .. '; M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat]=' .. (M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] or 'nil') .. '; M28Team.tTeamData[iTeam][M28Team.refiEnemyAirAAThreat]=' .. (M28Team.tTeamData[iTeam][M28Team.refiEnemyAirAAThreat] or 'nil') .. '; M28Team.tTeamData[iTeam][M28Team.refiEnemyTorpBombersThreat]=' .. (M28Team.tTeamData[iTeam][M28Team.refiEnemyTorpBombersThreat] or 'nil') .. '; M28Team.tTeamData[iTeam][M28Team.refiEnemyAirOtherThreat]=' .. (M28Team.tTeamData[iTeam][M28Team.refiEnemyAirOtherThreat] or 'nil') .. '; Is factory paused=' .. tostring(oFactory:IsPaused()) .. '; IsPaused value=' .. tostring(oFactory[M28UnitInfo.refbPaused]) .. '; Does LZ factory is in need BP=' .. tostring(tLZTeamData[M28Map.subrefTbWantBP]) .. '; Core LZ=' .. tostring(tLZTeamData[M28Map.subrefLZbCoreBase] or false) .. '; Core expansion=' .. tostring(tLZTeamData[M28Map.subrefLZCoreExpansion] or false)..'; Prioritise sniperbots='..tostring(M28Conditions.PrioritiseSniperBots(tLZData, iTeam, tLZTeamData, EntityCategoryContains(categories.AEON + categories.SERAPHIM, oFactory.UnitId)))..'; subrefbTeamIsStallingMass='..tostring(M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingMass]))
    end

    --Dont build anything if last unit cap was at -1 and we killed a unit in last minute
    if aiBrain[M28Overseer.refiTimeOfLastUnitCapDeath] and GetGameTimeSeconds() - aiBrain[M28Overseer.refiTimeOfLastUnitCapDeath] <= 60 and M28Team.tTeamData[iTeam][M28Team.refiLowestUnitCapAdjustmentLevel] < 0 then
        if bDebugMessages == true then LOG(sFunctionRef..': Not building from land fac due to recent unit cap ctrlk') end
        M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
        return nil
    end

    local iLandFactoriesInLZ = 0
    local bHaveHighestLZTech = true

    local tLandFactoriesInLZ = EntityCategoryFilterDown(M28UnitInfo.refCategoryLandFactory, tLZTeamData[M28Map.subreftoLZOrWZAlliedUnits])
    for iLZFactory, oLZFactory in tLandFactoriesInLZ do
        if not (oLZFactory == oFactory) and oLZFactory:GetFractionComplete() == 1 and M28UnitInfo.GetUnitTechLevel(oLZFactory) > iFactoryTechLevel then
            bHaveHighestLZTech = false
            break
        end
    end
    iLandFactoriesInLZ = table.getn(tLandFactoriesInLZ)

    --end
    local bDontConsiderLandScouts = false
    if M28Team.tTeamData[iTeam][M28Team.subrefbTeamHasOmniVision] then
        bDontConsiderLandScouts = true
    elseif not(tLZTeamData[M28Map.refbWantLandScout]) and GetGameTimeSeconds() - (M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauIslandTimeLastFailedLandScoutByTeam][iTeam][tLZData[M28Map.subrefLZIslandRef]] or -1000) <= math.max(5, M28Land.iTicksPerLandCycle * 0.2) then
        bDontConsiderLandScouts = true
    end
    if bDebugMessages == true then LOG(sFunctionRef..': bDontConsiderLandScouts='..tostring(bDontConsiderLandScouts or false)..'; M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauIslandTimeLastFailedLandScoutByTeam][iTeam][tLZData[M28Map.subrefLZIslandRef]]='..(M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauIslandTimeLastFailedLandScoutByTeam][iTeam][tLZData[M28Map.subrefLZIslandRef]] or 'nil')) end
    local bDontConsiderBuildingMAA = false
    --Do we already ahve lots of MAA?
    if bDebugMessages == true then
        LOG(sFunctionRef .. ': Considering if we want to ignore getting any MAA, tLZTeamData[M28Map.refiEnemyAirToGroundThreat]=' .. tLZTeamData[M28Map.refiEnemyAirToGroundThreat] .. '; Time since last had no MAA targets for this island=' .. GetGameTimeSeconds() - (M28Team.tTeamData[iTeam][M28Team.refiLastTimeNoMAATargetsByIsland][tLZData[M28Map.subrefLZIslandRef]] or -10) .. '; tLZTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ]=' .. tostring(tLZTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ]))
    end
    local iMinMAARatioFactor = 10
    if iFactoryTechLevel == 1 then iMinMAARatioFactor = 20 end

    if tLZTeamData[M28Map.refiEnemyAirToGroundThreat] == 0 and M28Team.tTeamData[iTeam][M28Team.subrefiAlliedMAAThreat] * iMinMAARatioFactor > M28Team.tTeamData[iTeam][M28Team.subrefiAlliedDFThreat] then
        if not(M28Team.tTeamData[iTeam][M28Team.refbEnemyEarlyT3AirSpottedRecently]) and (tLZTeamData[M28Map.subrefTThreatEnemyCombatTotal] > 0 or (M28Team.tTeamData[iTeam][M28Team.subrefiHighestEnemyAirTech] <= 1 and (iFactoryTechLevel == 1 or (bHaveLowMass and M28Team.tTeamData[iTeam][M28Team.subrefiAlliedMAAThreat] > M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat])) and ((GetGameTimeSeconds() <= 600 and M28Team.tTeamData[iTeam][M28Team.subrefiAlliedMAAThreat] > M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat]) or M28Team.tTeamData[iTeam][M28Team.subrefiAlliedMAAThreat] * 0.7 > M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat]))) then
            if bDebugMessages == true then LOG(sFunctionRef..': Have enemies here or adjacent LZ or have enough MAA for enemy air ot ground threat, tLZTeamData[M28Map.subrefTThreatEnemyCombatTotal]='..tLZTeamData[M28Map.subrefTThreatEnemyCombatTotal]..'; ') end
            bDontConsiderBuildingMAA = true
        elseif not(M28Team.tTeamData[iTeam][M28Team.refbEnemyEarlyT3AirSpottedRecently]) and GetGameTimeSeconds() - (M28Team.tTeamData[iTeam][M28Team.refiLastTimeNoMAATargetsByIsland][tLZData[M28Map.subrefLZIslandRef]] or -100) < 10 then
            if not (tLZTeamData[M28Map.subrefLZCoreExpansion]) then
                if bDebugMessages == true then LOG(sFunctionRef..': Not a core expansion so dont want more MAA as we havent had MAA targets recently') end
                bDontConsiderBuildingMAA = true
            else
                local iMAAInLZ = 0
                local iEnemyAirToGround = 0
                for iEntry, iIslandLZ in M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauIslandLandZones][tLZData[M28Map.subrefLZIslandRef]] do
                    iMAAInLZ = iMAAInLZ + tLZData[M28Map.subrefLZTeamData][iTeam][M28Map.subrefLZThreatAllyMAA]
                    iEnemyAirToGround = iEnemyAirToGround + tLZData[M28Map.subrefLZTeamData][iTeam][M28Map.refiEnemyAirToGroundThreat]
                end
                if iMAAInLZ >= 300 and iMAAInLZ >= iEnemyAirToGround * 2 then
                    if bDebugMessages == true then LOG(sFunctionRef..': Have more air to ground threat than needed so wont get more') end
                    bDontConsiderBuildingMAA = true
                end
            end
            if not (bDontConsiderBuildingMAA) and tLZTeamData[M28Map.subrefLZThreatAllyMAA] - tLZTeamData[M28Map.subrefLZMAAThreatWanted] >= 4000 then
                if bDebugMessages == true then LOG(sFunctionRef..': already have large mAA threat so dont want more') end
                bDontConsiderBuildingMAA = true
            end
        end
        if not (bDontConsiderBuildingMAA) and ((M28Team.tTeamData[iTeam][M28Team.subrefiAlliedMAAThreat] >= math.min(600 or M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] * 2)) and (M28Team.tTeamData[iTeam][M28Team.subrefiAlliedMAAThreat] >= M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] + (M28Team.tTeamData[iTeam][M28Team.refiEnemyAirAAThreat] + M28Team.tTeamData[iTeam][M28Team.refiEnemyTorpBombersThreat] + M28Team.tTeamData[iTeam][M28Team.refiEnemyAirOtherThreat]) * 0.2) or (M28Team.tTeamData[iTeam][M28Team.subrefiAlliedMAAThreat] > math.max(4000, M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat]) and M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] <= 4000 and aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryMAA * categories.TECH3) >= 5)) then
            --Do we have more than 1/6 of our DF and indirect force in AA and enemy air to ground threat is <4k? Or alternatively enemy has no air to ground and we have a lot of AA
            local iMAAFactor = 6
            if M28Team.tTeamData[iTeam][M28Team.refbEnemyEarlyT3AirSpottedRecently] then iMAAFactor = 2.5
            elseif M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] == 0 and M28Team.tTeamData[iTeam][M28Team.subrefiHighestEnemyAirTech] <= 1 then
                iMAAFactor = 12
            elseif M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] >= 10000 then
                iMAAFactor = 4
            end
            if M28Team.tTeamData[iTeam][M28Team.subrefiAlliedDFThreat] + M28Team.tTeamData[iTeam][M28Team.subrefiAlliedIndirectThreat] < M28Team.tTeamData[iTeam][M28Team.subrefiAlliedMAAThreat] * iMAAFactor then
                if not (tLZTeamData[M28Map.subrefLZCoreExpansion]) then
                    if bDebugMessages == true then
                        LOG(sFunctionRef .. ': We have lots of MAA; M28Team.tTeamData[iTeam][M28Team.subrefiAlliedDFThreat]=' .. M28Team.tTeamData[iTeam][M28Team.subrefiAlliedDFThreat] .. '; M28Team.tTeamData[iTeam][M28Team.subrefiAlliedIndirectThreat]=' .. M28Team.tTeamData[iTeam][M28Team.subrefiAlliedIndirectThreat] .. '; M28Team.tTeamData[iTeam][M28Team.subrefiAlliedMAAThreat]=' .. M28Team.tTeamData[iTeam][M28Team.subrefiAlliedMAAThreat] .. '; M28Team.tTeamData[iTeam][M28Team.subrefiAlliedMAAThreat]=' .. M28Team.tTeamData[iTeam][M28Team.subrefiAlliedMAAThreat] .. '; M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat]=' .. M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat])
                    end
                    bDontConsiderBuildingMAA = true
                else
                    local iMAAInLZ = 0
                    local iEnemyAirToGround = 0
                    for iEntry, iIslandLZ in M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauIslandLandZones][tLZData[M28Map.subrefLZIslandRef]] do
                        iMAAInLZ = iMAAInLZ + tLZData[M28Map.subrefLZTeamData][iTeam][M28Map.subrefLZThreatAllyMAA]
                        iEnemyAirToGround = iEnemyAirToGround + tLZData[M28Map.subrefLZTeamData][iTeam][M28Map.refiEnemyAirToGroundThreat]
                    end
                    if iMAAInLZ >= 300 and iMAAInLZ >= iEnemyAirToGround * 2 and (iMAAInLZ >= 600 or not(M28Team.tTeamData[iTeam][M28Team.refbEnemyEarlyT3AirSpottedRecently])) then
                        bDontConsiderBuildingMAA = true
                        if bDebugMessages == true then LOG(sFunctionRef..': Have some MAA in LZ and more than twice neemy air to ground so dont want more MAA') end
                    end
                end
            end
        end
    end
    if bDebugMessages == true then
        LOG(sFunctionRef .. ': bDontConsiderBuildingMAA after considering global values=' .. tostring(bDontConsiderBuildingMAA) .. '; GroundAA threat=' .. M28Team.tTeamData[iTeam][M28Team.subrefiAlliedMAAThreat] .. '; Enemy air to ground threat=' .. M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] .. '; Enemy AirAA threat=' .. M28Team.tTeamData[iTeam][M28Team.refiEnemyAirAAThreat] .. '; Enemy torp bomber threat=' .. M28Team.tTeamData[iTeam][M28Team.refiEnemyTorpBombersThreat] .. '; Air other threat=' .. M28Team.tTeamData[iTeam][M28Team.refiEnemyAirOtherThreat] .. '; Current T3 MAA=' .. aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryMAA * categories.TECH3) .. '; Allied DF threat=' .. M28Team.tTeamData[iTeam][M28Team.subrefiAlliedDFThreat] .. '; Allied indirect=' .. M28Team.tTeamData[iTeam][M28Team.subrefiAlliedIndirectThreat])
    end
    if not (bDontConsiderBuildingMAA) then
        --If factory is at T1 and we have lots of T1 MAA then dont get more MAA assuming no enemy air threat in this zone
        if iFactoryTechLevel == 1 and M28Utilities.IsTableEmpty(tLZTeamData[M28Map.reftLZEnemyAirUnits]) then
            local iCurT1MAA =  aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryMAA)
            if iCurT1MAA >= 80 or (not(M28Team.tTeamData[iTeam][M28Team.refbEnemyEarlyT3AirSpottedRecently]) and aiBrain[M28Economy.refiOurHighestLandFactoryTech] > 1 and iCurT1MAA >= 20 and (tLZTeamData[M28Map.subrefLZbCoreBase] or iCurT1MAA >= 50 or M28Utilities.IsTableEmpty(EntityCategoryFilterDown(M28UnitInfo.refCategoryLandFactory - categories.TECH1, tLZTeamData[M28Map.subreftoLZOrWZAlliedUnits])) == false)) then
                bDontConsiderBuildingMAA = true
                if bDebugMessages == true then LOG(sFunctionRef..': T1 factory and have enough MAA threat so dont want more') end
            end
        end

        --If enemy has low air to ground threat relative to their combat threat then dont get more mAA if we already have half the factories building MAA
        if not(bDontConsiderBuildingMAA) and M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] < math.max(200, M28Team.tTeamData[iTeam][M28Team.subrefiAlliedMAAThreat] * 0.4) then
            local bCapMAABuiltAtOnce = true
            if M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] > 0 then
                --Check we dont have air to ground enemy threat in a nearby LZ
                if tLZTeamData[M28Map.refiEnemyAirToGroundThreat] > 0 then
                    bCapMAABuiltAtOnce = false
                elseif M28Utilities.IsTableEmpty(tLZData[M28Map.subrefLZAdjacentLandZones]) == false then
                    for _, iAdjLZ in tLZData[M28Map.subrefLZAdjacentLandZones] do
                        if M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iLandZone][M28Map.subrefLZTeamData][iTeam][M28Map.refiEnemyAirToGroundThreat] > 0 then
                            bCapMAABuiltAtOnce = false
                            break
                        end
                    end
                end
            end
            if bCapMAABuiltAtOnce then
                if not(M28Team.tTeamData[iTeam][M28Team.refbEnemyEarlyT3AirSpottedRecently]) and M28Conditions.GetNumberOfUnitsMeetingCategoryUnderConstructionInLandOrWaterZone(tLZTeamData, M28UnitInfo.refCategoryMAA) >= math.max(1, math.floor(iLandFactoriesInLZ * 0.5)) then
                    bDontConsiderBuildingMAA = true
                end
            end
            if bDebugMessages == true then
                LOG(sFunctionRef .. ': bCapMAABuiltAtOnce=' .. tostring(bCapMAABuiltAtOnce) .. '; Number of MAA already being built=' .. M28Conditions.GetNumberOfUnitsMeetingCategoryUnderConstructionInLandOrWaterZone(tLZTeamData, M28UnitInfo.refCategoryMAA) .. '; bDontConsiderBuildingMAA=' .. tostring(bDontConsiderBuildingMAA))
            end
        end
    end

    --Absolvers
    local bConsiderAbsolvers = false
    if iFactoryTechLevel >= 3 and oFactory[refiTotalBuildCount] >= 5 and aiBrain[M28Map.refbCanPathToEnemyBaseWithAmphibious] then
        local iCurAbsolvers = aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryAbsolver)
        if iCurAbsolvers < 5 then
            bConsiderAbsolvers = true
            if iCurAbsolvers >= 1 and aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryLandCombat * categories.TECH3) < iCurAbsolvers * 7 then
                bConsiderAbsolvers = false
            elseif M28Conditions.GetNumberOfUnitsMeetingCategoryUnderConstructionInLandOrWaterZone(tLZTeamData, M28UnitInfo.refCategoryAbsolver) > 0 then
                bConsiderAbsolvers = false
            end
        end
    end

    --Mobile shields if we are at T2+ as part of the land zone reinforcement logic
    local bConsiderMobileShields = false
    if iFactoryTechLevel >= 2 and not (bHaveLowPower) and GetGameTimeSeconds() - (M28Team.tTeamData[iTeam][M28Team.refiLastTimeNoShieldTargetsByIsland][tLZData[M28Map.subrefLZIslandRef]] or -100) >= 15 and M28Team.tTeamData[iTeam][M28Team.subrefiTeamNetEnergy] >= 15 * iFactoryTechLevel and M28Team.tTeamData[iTeam][M28Team.subrefiTeamGrossEnergy] >= 70 then
        if M28Team.tTeamData[iTeam][M28Team.subrefiTeamNetEnergy] >= 60 or M28Team.tTeamData[iTeam][M28Team.subrefiTeamNetEnergy] >= (1 + M28Conditions.GetNumberOfUnitsMeetingCategoryUnderConstructionInLandOrWaterZone(tLZTeamData, M28UnitInfo.refCategoryMobileLandShield)) * 16 then
            local iCurMobileShields = aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryMobileLandShield)
            if iCurMobileShields <= 35 and (iCurMobileShields * 250 <= math.max(2000, (M28Team.tTeamData[iTeam][M28Team.subrefiAlliedDFThreat] + M28Team.tTeamData[iTeam][M28Team.subrefiAlliedIndirectThreat]))) then
                --Allow 1 shield per 40 gross E income (80 for LOUD)

                if (iCurMobileShields <= 2 and (iCurMobileShields == 0 or aiBrain[M28Economy.refiNetEnergyBaseIncome] >= 50) or aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryPower - categories.TECH1) > iCurMobileShields) or ((iCurMobileShields * 40 <= aiBrain[M28Economy.refiGrossEnergyBaseIncome] and (not(M28Utilities.bLoudModActive or M28Utilities.bQuietModActive) or iCurMobileShields * 80 <= aiBrain[M28Economy.refiGrossEnergyBaseIncome])) and (tLZData[M28Map.subrefLZIslandRef] == NavUtils.GetLabel(M28Map.refPathingTypeLand, tLZTeamData[M28Map.reftClosestEnemyBase]) or iCurMobileShields < 8 or aiBrain[M28Economy.refiNetEnergyBaseIncome] >= 150 or M28Conditions.GetFactoryLifetimeCount(oFactory, M28UnitInfo.refCategoryMobileLandShield, false) < 1)) then
                    --Seraphim - increase requirement; also be less likely to build if cant path to enemy
                    if iFactoryTechLevel < 3 or not(EntityCategoryContains(categories.SERAPHIM, oFactory.UnitId)) or iCurMobileShields <= 15 or aiBrain[M28Economy.refiGrossEnergyBaseIncome] >= iCurMobileShields * 150  then
                        bConsiderMobileShields = true
                    end
                end
            end
        end
    end
    if bDebugMessages == true then LOG(sFunctionRef..': Mobile shield override if T2+ and nearby enemy threat, bConsiderMobileShields before override='..tostring(bConsiderMobileShields)..'; Enemies in adj zone='..tostring(tLZTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ])..'; Enemy LR threat='..tLZTeamData[M28Map.subrefiNearbyEnemyLongRangeThreat]) end
    if bConsiderMobileShields and iFactoryTechLevel >= 2 and (tLZTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ] or tLZTeamData[M28Map.subrefiNearbyEnemyLongRangeThreat] > 0) then
        --Exception to building mobile shields if we have some under construction already and enemies in an adjacent zone
        local iMobileShieldsUnderConstruction = M28Conditions.GetNumberOfUnitsMeetingCategoryUnderConstructionInLandOrWaterZone(tLZTeamData, M28UnitInfo.refCategoryMobileLandShield, false)
        if iMobileShieldsUnderConstruction >= 1 then
            if iMobileShieldsUnderConstruction >= 2 then
                bConsiderMobileShields = false
            else
                local iLandFacsInZone = M28Conditions.GetNumberOfConstructedUnitsMeetingCategoryInZone(tLZTeamData, M28UnitInfo.refCategoryLandFactory * M28UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel))
                if iLandFacsInZone < 3 then
                    bConsiderMobileShields = false
                end
                if bDebugMessages == true then LOG(sFunctionRef..': ILandFacsInZone of same tech level='..iLandFacsInZone) end
            end
        end
        if bDebugMessages == true then LOG(sFunctionRef..': Checking if still want to build mobile shields if we have some under construction already, iMobileShieldsUnderConstruction='..iMobileShieldsUnderConstruction..'; bConsiderMobileShields='..tostring(bConsiderMobileShields)) end
    end
    if not(bConsiderMobileShields) and iFactoryTechLevel >= 3 and M28Team.tTeamData[iTeam][M28Team.refbEnemyHasTeleport] and M28Utilities.IsTableEmpty(tLZTeamData[M28Map.reftoLZUnitsWantingMobileShield]) == false and not(M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingEnergy]) and M28Conditions.HaveActiveGameEnderTemplateLogic(tLZTeamData) then
        bConsiderMobileShields = true
        if bDebugMessages == true then LOG(sFunctionRef..': Enemy has teleport so want mobile shields so we can protect GE templates') end
    end
    if bDebugMessages == true then LOG(sFunctionRef..': Finished Considering if want mobile shields, bConsiderMobileShields='..tostring(bConsiderMobileShields)..';  iFactoryTechLevel='..iFactoryTechLevel..'; bHaveLowPower='..tostring(bHaveLowPower)..'; Time last had no shield targets='..GetGameTimeSeconds() - (M28Team.tTeamData[iTeam][M28Team.refiLastTimeNoShieldTargetsByIsland][tLZData[M28Map.subrefLZIslandRef]] or -100)..'; Team net energy='..M28Team.tTeamData[iTeam][M28Team.subrefiTeamNetEnergy]..'; Gross energy='..M28Team.tTeamData[iTeam][M28Team.subrefiTeamGrossEnergy]..'; Movile shields under construction in this zone='..M28Conditions.GetNumberOfUnitsMeetingCategoryUnderConstructionInLandOrWaterZone(tLZTeamData, M28UnitInfo.refCategoryMobileLandShield)..'; Cur mobile shields='..aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryMobileLandShield)..'; DF+IF threat='..M28Team.tTeamData[iTeam][M28Team.subrefiAlliedDFThreat] + M28Team.tTeamData[iTeam][M28Team.subrefiAlliedIndirectThreat]..'; M28Team.tTeamData[iTeam][M28Team.refbEnemyHasTeleport]='..tostring(M28Team.tTeamData[iTeam][M28Team.refbEnemyHasTeleport])) end

    --Mobile stealth if we are at T2+ as part of the land zone reinforcement logic
    local bConsiderMobileStealths = false
    if iFactoryTechLevel >= 2 and not (bHaveLowPower) and not (M28Team.tTeamData[iTeam][M28Team.subrefbEnemyHasOmni]) and not (M28Team.tTeamData[iTeam][M28Team.subrefbEnemyBuiltOmni]) and GetGameTimeSeconds() - (M28Team.tTeamData[iTeam][M28Team.refiLastTimeNoStealthTargetsByPlateau][iPlateau] or -100) >= 15 and M28Team.tTeamData[iTeam][M28Team.subrefiTeamNetEnergy] >= 15 * iFactoryTechLevel and M28Team.tTeamData[iTeam][M28Team.subrefiTeamGrossEnergy] >= 70 then
        if M28Team.tTeamData[iTeam][M28Team.subrefiTeamNetEnergy] >= 60 or M28Team.tTeamData[iTeam][M28Team.subrefiTeamNetEnergy] >= (1 + M28Conditions.GetNumberOfUnitsMeetingCategoryUnderConstructionInLandOrWaterZone(tLZTeamData, M28UnitInfo.refCategoryMobileLandStealth)) * 16 then
            local iCurMobileStealths = aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryMobileLandStealth)
            if iCurMobileStealths <= 16 and iCurMobileStealths * 600 <= math.max(1800, (M28Team.tTeamData[iTeam][M28Team.subrefiAlliedDFThreat] + M28Team.tTeamData[iTeam][M28Team.subrefiAlliedIndirectThreat]) * 0.3) then
                bConsiderMobileStealths = true
            end
        end
    end

    local bSaveMassDueToEnemyFirebaseOrOurExperimental
    if M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.subreftTeamEngineersBuildingExperimentals]) == false and bHaveLowMass then
        bSaveMassDueToEnemyFirebaseOrOurExperimental = true
    else
        bSaveMassDueToEnemyFirebaseOrOurExperimental = M28Conditions.WantToEcoDueToEnemyFirebase(iTeam, tLZTeamData, iPlateau)
    end

    iCategoryToBuild = M28UnitInfo.refCategoryEngineer --Placeholder
    local sBPIDToBuild
    local iCurrentConditionToTry = 0

    function ConsiderUpgrading()
        --If this is a support factory or T1 factory then only consider upgrading if we have spare idle factories in this LZ, subject to how many factories we have
        local bConsiderUpgrading = true
        if iFactoryTechLevel == 1 or not(EntityCategoryContains(M28UnitInfo.refCategoryLandHQ, oFactory.UnitId)) or M28Utilities.bLoudModActive or M28Utilities.bQuietModActive or not(tLZTeamData[M28Map.subrefLZbCoreBase]) then
            if not(M28Conditions.CheckIfNeedMoreEngineersOrSnipeUnitsBeforeUpgrading(oFactory)) then
                local iUpgradingLandFactories = 0
                local iAvailableLandFactories = 0
                local tLandFactoriesInLZ = EntityCategoryFilterDown(M28UnitInfo.refCategoryLandFactory, tLZTeamData[M28Map.subreftoLZOrWZAlliedUnits])
                if M28Utilities.IsTableEmpty(tLandFactoriesInLZ) == false then
                    for iFactory, oFactory in tLandFactoriesInLZ do
                        if oFactory:GetFractionComplete() == 1 then
                            if oFactory:IsUnitState('Upgrading') then
                                iUpgradingLandFactories = iUpgradingLandFactories + 1
                            else
                                iAvailableLandFactories = iAvailableLandFactories + 1
                            end
                        end
                    end
                    if bDebugMessages == true then LOG(sFunctionRef..': iUpgradingLandFactories='..iUpgradingLandFactories..'; iAvailableLandFactories='..iAvailableLandFactories..'; iFactoryTechLevel='..iFactoryTechLevel..'; iOurHighestLandFactoryTech='..aiBrain[M28Economy.refiOurHighestLandFactoryTech]) end
                    if iUpgradingLandFactories > 0 then
                        if tLZTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ] and iFactoryTechLevel < aiBrain[M28Economy.refiOurHighestLandFactoryTech] then
                            bConsiderUpgrading = false
                            if bDebugMessages == true then LOG(sFunctionRef..': Dont want to upgrade as there are nearby enemies') end
                        elseif iAvailableLandFactories <= 3 and iUpgradingLandFactories + 1 >= iAvailableLandFactories then
                            bConsiderUpgrading = false
                            if bDebugMessages == true then LOG(sFunctionRef..': Dont want to upgrade as dont have many available land factories remaining') end
                        end
                    end
                end
                --T2 fac to T3 - dont upgrade if not core zone, unless have T3 mex in the zone or lots of mass and no recent power stall
                if bDebugMessages == true then LOG(sFunctionRef..': If we have T2 land fac in minor zone then wont upgrade unless either T3 mex in zone, or lots of mass, iFactoryTechLevel='..iFactoryTechLevel..'; tLZTeamData[M28Map.subrefLZbCoreBase]='..tostring(tLZTeamData[M28Map.subrefLZbCoreBase])..'; Mass% stored='..aiBrain:GetEconomyStoredRatio('MASS')..'; Gross mass income='..aiBrain[M28Economy.refiGrossMassBaseIncome]..'; tLZData[M28Map.subrefLZMexCount]='..tLZData[M28Map.subrefLZMexCount]..'; bHaveLowMass='..tostring(bHaveLowMass)..'; bHaveLowPower='..tostring(bHaveLowPower)..'; Primary fac='..tostring(oFactory[refbPrimaryFactoryForIslandOrPond] or false)..'; tLZTeamData[M28Map.subrefMexCountByTech][3]='..(tLZTeamData[M28Map.subrefMexCountByTech][3] or 'nil')..'; Condition part 1='..tostring(iFactoryTechLevel >= 2 and not(tLZTeamData[M28Map.subrefLZbCoreBase]) and (aiBrain:GetEconomyStoredRatio('MASS') < 0.8 and aiBrain[M28Economy.refiGrossMassBaseIncome] < 80))..'; Condition part2='..tostring((tLZData[M28Map.subrefLZMexCount] == 0 and not(bHaveLowMass) and not(bHaveLowPower) and oFactory[refbPrimaryFactoryForIslandOrPond]))..'; Condition part 3='..tostring((tLZData[M28Map.subrefLZMexCount] > 0 and tLZTeamData[M28Map.subrefMexCountByTech][3] >= math.min(2, tLZData[M28Map.subrefLZMexCount] * 0.5)))) end
                if iFactoryTechLevel >= 2 and not(tLZTeamData[M28Map.subrefLZbCoreBase]) and (aiBrain:GetEconomyStoredRatio('MASS') < 0.8 and aiBrain[M28Economy.refiGrossMassBaseIncome] < 80 and not((M28Map.bIsCampaignMap and not(bHaveLowMass)) or (tLZData[M28Map.subrefLZMexCount] == 0 and not(bHaveLowMass) and not(bHaveLowPower) and oFactory[refbPrimaryFactoryForIslandOrPond] and (oFactory[refiTotalBuildCount] or 0) >= 10) or (tLZData[M28Map.subrefLZMexCount] > 0 and tLZTeamData[M28Map.subrefMexCountByTech][3] >= math.min(2, tLZData[M28Map.subrefLZMexCount] * 0.5)))) then
                    bConsiderUpgrading = false
                    if bDebugMessages == true then LOG(sFunctionRef..': Dont want to go to T3 outside a core zone yet') end
                elseif not(tLZTeamData[M28Map.subrefLZbCoreBase]) and iFactoryTechLevel >= aiBrain[M28Economy.refiOurHighestFactoryTechLevel] and aiBrain:GetEconomyStoredRatio('MASS') < 0.8 then
                    bConsiderUpgrading = false
                    if bDebugMessages == true then LOG(sFunctionRef..': Dont want a minor LZ to get an HQ when our main base doesnt') end
                else
                    --Dont upgrade lots of HQs at once outside the core zone for non-primary factories
                    if not(oFactory[refbPrimaryFactoryForIslandOrPond]) and not(tLZTeamData[M28Map.subrefLZbCoreBase]) then
                        local iHQSearchCategory
                        if iFactoryTechLevel == 1 then iHQSearchCategory = M28UnitInfo.refCategoryLandFactory * categories.TECH1
                        elseif iFactoryTechLevel == 2 then iHQSearchCategory = M28UnitInfo.refCategoryLandFactory
                        end

                        local iHQUpgradesOfThisAndLowerTech = M28Team.DoesBrainHaveActiveHQUpgradesOfCategory(aiBrain, iHQSearchCategory, true)
                        if bDebugMessages == true then LOG(sFunctionRef..': Non-primary factory considering upgrading but we already have an active upgrade of this or lower tech, iHQUpgradesOfThisAndLowerTech='..iHQUpgradesOfThisAndLowerTech) end
                        if iHQUpgradesOfThisAndLowerTech >= 1 and (oFactory[refiTotalBuildCount] < 25 + 25 * iHQUpgradesOfThisAndLowerTech or (bHaveLowMass and (M28Utilities.bLoudModActive or M28Utilities.bQuietModActive))) then
                            if bHaveLowMass or bHaveLowPower or aiBrain:GetEconomyStoredRatio('MASS') <= 0.15 + 0.05 * iHQUpgradesOfThisAndLowerTech or aiBrain:GetEconomyStoredRatio('ENERGY') <= 0.99 then
                                bConsiderUpgrading = false
                                if bDebugMessages == true then LOG(sFunctionRef..': Dont want to upgrade factory yet due to not enough mass potentially and having lots of other factory upgrades active') end
                            end
                        end
                    end
                end

            else
                if bDebugMessages == true then LOG(sFunctionRef..': Want to get more engineers before we upgrade') end
                bConsiderUpgrading = false
            end
        end
        if bConsiderUpgrading and ((aiBrain[M28Overseer.refbPrioritiseAir] and aiBrain[M28Economy.refiOurHighestAirFactoryTech] < 3) or (aiBrain[M28Overseer.refbPrioritiseNavy] and aiBrain[M28Economy.refiOurHighestNavalFactoryTech] <= iFactoryTechLevel)) then
            bConsiderUpgrading = false
            if bDebugMessages == true then LOG(sFunctionRef..': Dont want to prioritise land fac upgrades for this AI personality') end
        end
        if bDebugMessages == true then LOG(sFunctionRef..': bConsiderUpgrading='..tostring(bConsiderUpgrading)) end
        if bConsiderUpgrading then
            sBPIDToBuild = M28UnitInfo.GetUnitUpgradeBlueprint(oFactory, true)
            if bDebugMessages == true then LOG(sFunctionRef..': will try and upgrade, sBPIDToBuild (i.e. unit we want to upgrade to)='..(sBPIDToBuild or 'nil')) end
            if sBPIDToBuild then M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd) end
            return sBPIDToBuild
        end
    end
    --subfunctions to mean we can do away with the 'current condition == 1, == 2.....==999 type approach making it much easier to add to
    function ConsiderBuildingCategory(iCategoryToBuild)
        if iCategoryToBuild == 'Upgrade' then
            if ConsiderUpgrading() then
                return sBPIDToBuild
            else --If we return a non-category it will cause errors, so just clear
                return nil
            end
        else
            --GetBlueprintThatCanBuildOfCategory(aiBrain, iCategoryCondition, oFactory, bGetSlowest, bGetFastest, bGetCheapest, iOptionalCategoryThatMustBeAbleToBuild, bIgnoreTechDifferences)
            sBPIDToBuild = GetBlueprintThatCanBuildOfCategory(aiBrain, iCategoryToBuild, oFactory, nil,             nil,        nil,        nil,                                    false)

            if bDebugMessages == true then
                LOG(sFunctionRef .. ': Time=' .. GetGameTimeSeconds() .. ' Factory=' .. oFactory.UnitId .. M28UnitInfo.GetUnitLifetimeCount(oFactory) .. '; LZ=' .. iLandZone .. '; iCurrentConditionToTry=' .. iCurrentConditionToTry .. '; sBPIDToBuild before adjusting for override=' .. (sBPIDToBuild or 'nil'))
            end
            if sBPIDToBuild then
                sBPIDToBuild = AdjustBlueprintForOverrides(aiBrain, oFactory, sBPIDToBuild, tLZTeamData, iFactoryTechLevel)
            end
            if sBPIDToBuild then
                if bDebugMessages == true then LOG(sFunctionRef..': After adjusting for overrides still have blueprint to build='..sBPIDToBuild) end
                M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd) --Assumes we will end code if we get to this point
                return sBPIDToBuild
            elseif bDebugMessages == true then LOG(sFunctionRef..': Dont have a blueprint to build')
            end
        end
    end

    local tiLandFactoriesByTechInZone = {[1]=0,[2]=0,[3]=0}
    local tLandFactoriesInZone = EntityCategoryFilterDown(M28UnitInfo.refCategoryLandFactory, tLZTeamData[M28Map.subreftoLZOrWZAlliedUnits])
    if M28Utilities.IsTableEmpty(tLandFactoriesInZone) == false then
        local iCurFacTech
        for iCurFac, oCurFac in tLandFactoriesInZone do
            if oFactory:GetFractionComplete() == 1 then
                iCurFacTech = M28UnitInfo.GetUnitTechLevel(oCurFac)
                tiLandFactoriesByTechInZone[iCurFacTech] = (tiLandFactoriesByTechInZone[iCurFacTech] or 0) + 1
            end
        end
    end

    --MAIN BUILDER LOGIC:
    --Workaround for issue with Aeon satellite centre categories:
    if oFactory.UnitId == 'bab2404' then
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if ConsiderBuildingCategory(categories.ALLUNITS) then return sBPIDToBuild end
    end

    --LOUD - initial build order - hold off on building anything if we have 2 engis already and haven't built on every mex
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if iFactoryTechLevel == 1 and (M28Utilities.bLoudModActive or M28Utilities.bQuietModActive) and GetGameTimeSeconds() <= 180 and aiBrain:GetEconomyStored('MASS') <= math.max(90, 250 - tLZTeamData[M28Map.subrefMexCountByTech][1] * 50) and aiBrain[M28Economy.refiGrossMassBaseIncome] <= 0.6 and tLZTeamData[M28Map.subrefMexCountByTech][1] + tLZTeamData[M28Map.subrefMexCountByTech][2] + tLZTeamData[M28Map.subrefMexCountByTech][3] <= 2 and oFactory[refiTotalBuildCount] >= 2 then
        if bDebugMessages == true then LOG(sFunctionRef..': Aborting land factory production for now as early game in LOUD/QUIET') end
        return nil
    end

    --Enemy early bomber defence (higher priority than tanks since we have our ACU to deal with tanks as a last resort)
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if bDebugMessages == true then
        LOG(sFunctionRef .. ': iCurrentConditionToTry=' .. iCurrentConditionToTry .. '; About to check if we want to build high priority MAA, bDontConsiderBuildingMAA=' .. tostring(bDontConsiderBuildingMAA) .. '; M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat]=' .. M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat]..'; Enemy dangerous units in this zone='..tostring(tLZTeamData[M28Map.subrefbDangerousEnemiesInThisLZ]))
    end
    local iNearbyMAAThreat = 0
    local iNearbyAirToGroundThreat = 0
    if (not (bDontConsiderBuildingMAA) or not(tLZTeamData[M28Map.subrefLZbCoreBase])) and (not(tLZTeamData[M28Map.subrefbDangerousEnemiesInThisLZ]) or tLZTeamData[M28Map.subrefLZbCoreBase]) then
        iNearbyMAAThreat = tLZTeamData[M28Map.subrefLZThreatAllyMAA]
        iNearbyAirToGroundThreat = (tLZTeamData[M28Map.refiEnemyAirToGroundThreat] or 0)
        if M28Utilities.IsTableEmpty(tLZData[M28Map.subrefLZAdjacentLandZones]) == false then
            for _, iAdjLZ in tLZData[M28Map.subrefLZAdjacentLandZones] do
                local tAdjLZTeamData = M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iAdjLZ][M28Map.subrefLZTeamData][iTeam]
                iNearbyMAAThreat = iNearbyMAAThreat + tAdjLZTeamData[M28Map.subrefLZThreatAllyMAA]
                iNearbyAirToGroundThreat = iNearbyAirToGroundThreat + (tAdjLZTeamData[M28Map.refiEnemyAirToGroundThreat] or 0)
            end
        end
        if (not(bDontConsiderBuildingMAA) or iNearbyAirToGroundThreat > 0.35 * iNearbyMAAThreat) and (iNearbyMAAThreat < 165 and not(tLZTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ])) or iNearbyAirToGroundThreat > 0 then
            --If enemy has any air units then want at least 110 MAA; if they have any air to ground want at least 165; if air to ground threat for this LZ then want
            if M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] > 0 or (M28Team.tTeamData[iTeam][M28Team.refiEnemyAirOtherThreat] + M28Team.tTeamData[iTeam][M28Team.refiEnemyAirAAThreat] > 0 and iNearbyMAAThreat < 110) or iNearbyAirToGroundThreat > iNearbyMAAThreat then
                if bDebugMessages == true then
                    LOG(sFunctionRef .. ': Want to have a basic level of MAA unless we have lots already; MAA that we alreayd have=' .. oFactory:GetAIBrain():GetCurrentUnits(M28UnitInfo.refCategoryMAA))
                end
                if oFactory:GetAIBrain():GetCurrentUnits(M28UnitInfo.refCategoryMAA) <= 5 or (tLZTeamData[M28Map.refiEnemyAirToGroundThreat] * 4 > math.min(1000, iNearbyMAAThreat)) then
                    --Only build if we ahve <2 under construction in this LZ
                    if M28Conditions.GetNumberOfUnitsMeetingCategoryUnderConstructionInLandOrWaterZone(tLZTeamData, M28UnitInfo.refCategoryMAA) < 2 then
                        if bDebugMessages == true then
                            LOG(sFunctionRef .. ': Will try and get MAA to combat enemy air to ground threat, iNearbyMAAThreat='..iNearbyMAAThreat..'; iNearbyAirToGroundThreat='..iNearbyAirToGroundThreat)
                        end
                        if ConsiderBuildingCategory(M28UnitInfo.refCategoryMAA - categories.TECH3) then return sBPIDToBuild end
                    end
                end
            end
        end
    end

    --Core base where enemy has t3 air threat and we lack significant groundAA
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if bDebugMessages == true then LOG(sFunctionRef..': Deciding if want enemy t3 air defence via MAA, bDontConsiderBuildingMAA='..tostring(bDontConsiderBuildingMAA)..'; Dangerous enemies in this LZ='..tostring(tLZTeamData[M28Map.subrefbDangerousEnemiesInThisLZ])..'; T3 Air spotted recently='..tostring(M28Team.tTeamData[iTeam][M28Team.refbEnemyEarlyT3AirSpottedRecently])..' Core base='..tostring(tLZTeamData[M28Map.subrefLZbCoreBase])..'; MAA threat wanted for this zone='..(tLZTeamData[M28Map.subrefLZMAAThreatWanted] or 0)..'; GroundAA threat in this zone='..(tLZTeamData[M28Map.subrefLZThreatAllyGroundAA] or 0)..'; Mex count by tech='..repru(tLZTeamData[M28Map.subrefMexCountByTech])..'; Our AirAAthreat='..M28Team.tTeamData[iTeam][M28Team.subrefiOurAirAAThreat]) end
    if not(bDontConsiderBuildingMAA) and not(tLZTeamData[M28Map.subrefbDangerousEnemiesInThisLZ]) and M28Team.tTeamData[iTeam][M28Team.refbEnemyEarlyT3AirSpottedRecently] and tLZTeamData[M28Map.subrefLZbCoreBase] and ((tLZTeamData[M28Map.subrefLZMAAThreatWanted] or 0) >= 50 or (tLZTeamData[M28Map.subrefLZThreatAllyGroundAA] or 0) < 2500) and (tLZTeamData[M28Map.subrefMexCountByTech][2] + tLZTeamData[M28Map.subrefMexCountByTech][3] >= math.min(2, tLZData[M28Map.subrefLZMexCount])) and M28Team.tTeamData[iTeam][M28Team.subrefiOurAirAAThreat] < 2500 then
        local iEngiCategory = M28UnitInfo.refCategoryEngineer
        if iFactoryTechLevel == 2 then iEngiCategory = iEngiCategory - categories.TECH1
        elseif iFactoryTechLevel >= 3 then iEngiCategory = iEngiCategory * categories.TECH3
        end
        local iEngisWanted = 2
        if not(bHaveLowMass) or bHaveLowPower then
            iEngisWanted = 3
            if M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.4 then iEngisWanted = 5 end
        end
        if bDebugMessages == true then LOG(sFunctionRef..': Want MAA unless we lack engis of this tech level, Engis of category in this zone='..M28Conditions.GetNumberOfConstructedUnitsMeetingCategoryInZone(tLZTeamData, iEngiCategory)..'; iEngisWanted='..iEngisWanted) end
        if not(tLZTeamData[M28Map.subrefTbWantBP]) or M28Conditions.GetNumberOfConstructedUnitsMeetingCategoryInZone(tLZTeamData, iEngiCategory) >= iEngisWanted then
            if bDebugMessages == true then LOG(sFunctionRef..': Enemy strat MAA defense high priority logic') end
            if ConsiderBuildingCategory(M28UnitInfo.refCategoryMAA) then return sBPIDToBuild end
        else
            if ConsiderBuildingCategory(iEngiCategory) then return sBPIDToBuild end
            if ConsiderBuildingCategory(M28UnitInfo.refCategoryMAA) then return sBPIDToBuild end
        end
    end

    --enemy bombers in adjacent zone, no enemies in this zone, and we lack much nearby maa
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if bDebugMessages == true then LOG(sFunctionRef..': MAA builder if nearby enemy air to ground threat and no dangerous enemies in this LZ itself, iNearbyAirToGroundThreat='..(iNearbyAirToGroundThreat or 'nil')) end
    if not(tLZTeamData[M28Map.subrefbDangerousEnemiesInThisLZ]) and iNearbyAirToGroundThreat > (tLZTeamData[M28Map.subrefLZThreatAllyGroundAA] or 0) * 2 and (not(bDontConsiderBuildingMAA) or iNearbyMAAThreat + (tLZTeamData[M28Map.subrefLZThreatAllyGroundAA] or 0) < iNearbyAirToGroundThreat * 0.25) then
        if ConsiderBuildingCategory(M28UnitInfo.refCategoryMAA - categories.TECH3) then return sBPIDToBuild end
    end

    --Engineers for transport - build engineers as high priority if no enemies in this zone and no nearby long range threats
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if M28Utilities.IsTableEmpty(tLZTeamData[M28Map.reftoTransportsWaitingForUnits]) == false and not(tLZTeamData[M28Map.subrefbDangerousEnemiesInThisLZ]) and M28Utilities.IsTableEmpty(tLZTeamData[M28Map.reftLZEnemyAirUnits]) and M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subrefTEnemyUnits]) and ((tLZTeamData[M28Map.subrefiNearbyEnemyLongRangeThreat] or 0) == 0 or iFactoryTechLevel == 1) then
        local bTransportWaitingForEngi = false
        local iCombatUnitsWanted = 0
        for iTransport, oTransport in tLZTeamData[M28Map.reftoTransportsWaitingForUnits] do
            if (oTransport[M28Air.refiEngisWanted] or 0) > 0 or not(oTransport[M28Air.refbCombatDrop]) then
                bTransportWaitingForEngi = true
                break
            else
                iCombatUnitsWanted = iCombatUnitsWanted + (oTransport[M28Air.refiCombatUnitsWanted] or 0)
            end
        end
        if bDebugMessages == true then LOG(sFunctionRef..': Want engineers or t1 arti as have transport waiting for them, bTransportWaitingForEngi='..tostring(bTransportWaitingForEngi or false)..'; tLZTeamData[M28Map.subrefiNearbyEnemyLongRangeThreat]='..(tLZTeamData[M28Map.subrefiNearbyEnemyLongRangeThreat] or 'nil')) end
        if bTransportWaitingForEngi then
            --If have enemies in an adjacent zone then only have half our factories building engineers
            if tLZTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ] then
                local iEngisUnderConstruction = M28Conditions.GetNumberOfUnitsMeetingCategoryUnderConstructionInLandOrWaterZone(tLZTeamData, M28UnitInfo.refCategoryEngineer, false)
                local iLandFactoriesInZone = M28Conditions.GetNumberOfConstructedUnitsMeetingCategoryInZone(tLZTeamData, M28UnitInfo.refCategoryLandFactory)
                if bDebugMessages == true then LOG(sFunctionRef..': iLandFactoriesInZone='..iLandFactoriesInZone..'; iEngisUnderConstruction='..iEngisUnderConstruction) end
                if iLandFactoriesInZone == 1 or iEngisUnderConstruction < iLandFactoriesInZone * 0.5 then
                    if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then return sBPIDToBuild end
                end
            else
                if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then return sBPIDToBuild end
            end

        else
            --Avoid overbuilding t1 arti too much - will allow slight overbuild though to cover the risk of t1 arti being killed for unrelated reason and delaying the transport too much
            if iCombatUnitsWanted > 0 and (M28Utilities.IsTableEmpty(tLZTeamData[M28Map.reftoCombatUnitsLoadingOntoTransport]) or table.getn(tLZTeamData[M28Map.reftoCombatUnitsLoadingOntoTransport]) <= iCombatUnitsWanted) then
                --Exception - we lack 2 engis of this tech level or better in the zone and want more BP, in which case build engis first
                local iEngiCategoryToCheck = M28UnitInfo.refCategoryEngineer
                if iFactoryTechLevel == 2 then iEngiCategoryToCheck = iEngiCategoryToCheck - categories.TECH1
                elseif iFactoryTechLevel == 3 then iEngiCategoryToCheck = iEngiCategoryToCheck * categories.TECH3
                end
                local iEngisWanted = 2
                if not(bHaveLowMass) and iFactoryTechLevel >= M28Team.tTeamData[iTeam][M28Team.subrefiHighestFriendlyFactoryTech] then
                    iEngisWanted = 3
                    if M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.5 then iEngisWanted = 4 end
                end
                if bDebugMessages == true then LOG(sFunctionRef..': Arti or engi builder, we want arti but first checking we have built a basic number of engineers for this zone, or factory has built lots of units already, oFactory[refiTotalBuildCount]='..oFactory[refiTotalBuildCount]..'; Engis of cat in this zone='..M28Conditions.GetNumberOfConstructedUnitsMeetingCategoryInZone(tLZTeamData, iEngiCategoryToCheck)..'; iEngisWanted='..iEngisWanted) end
                if oFactory[refiTotalBuildCount] < 10 and tLZTeamData[M28Map.subrefTbWantBP] and not(M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingMass]) and M28Conditions.GetNumberOfConstructedUnitsMeetingCategoryInZone(tLZTeamData, iEngiCategoryToCheck) < iEngisWanted and ConsiderBuildingCategory(iEngiCategoryToCheck) then return sBPIDToBuild
                elseif ConsiderBuildingCategory(M28UnitInfo.refCategoryIndirect * categories.TECH1) then return sBPIDToBuild end
            end
        end
    end

    --Core expansions - build 1 tank if havent already (t1 facs only)
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if tLZTeamData[M28Map.subrefLZCoreExpansion] and M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subrefLZTAlliedCombatUnits]) and iFactoryTechLevel == 1 then
        if M28Conditions.GetFactoryLifetimeCount(oFactory, M28UnitInfo.refCategoryLandCombat) == 0 then
            if bDebugMessages == true then
                LOG(sFunctionRef .. ': T1 factory Core expansion - have no land combat so will try to get some')
            end
            --Get LAB if we arent seraphim, and this is the only land fac in this zone, and on a different plateau to our core base
            if not(EntityCategoryContains(categories.SERAPHIM, oFactory.UnitId)) and (EntityCategoryContains(categories.AEON, oFactory.UnitId) or not(tLZData[M28Map.subrefLZIslandRef] == NavUtils.GetTerrainLabel(M28Map.refPathingTypeLand, tLZTeamData[M28Map.reftClosestFriendlyBase]))) then
                local tFactoriesInZone = EntityCategoryFilterDown(M28UnitInfo.refCategoryLandFactory, tLZTeamData[M28Map.subreftoLZOrWZAlliedUnits])
                local bHaveOtherFactiresThatHaveBuilt = false
                if M28Utilities.IsTableEmpty(tFactoriesInZone) == false then
                    for iUnit, oUnit in tFactoriesInZone do
                        if oUnit:GetFractionComplete() == 1 and not(oUnit == oFactory) and oUnit[refiTotalBuildCount] > 0 then
                            bHaveOtherFactiresThatHaveBuilt = true
                            break
                        end
                    end
                end
                if not(bHaveOtherFactiresThatHaveBuilt) and ConsiderBuildingCategory(M28UnitInfo.refCategoryLightAttackBot, oFactory.UnitId) then
                    return sBPIDToBuild
                end
            end
            if ConsiderBuildingCategory(M28UnitInfo.refCategoryLandCombat) then
                return sBPIDToBuild
            end
        elseif  not (bDontConsiderLandScouts) and M28Conditions.GetFactoryLifetimeCount(oFactory, M28UnitInfo.refCategoryLandScout) == 0 then
            if bDebugMessages == true then
                LOG(sFunctionRef .. ': Core expansion - have no land scout so will try to get some')
            end
            if ConsiderBuildingCategory(M28UnitInfo.refCategoryLandScout) then
                return sBPIDToBuild
            end
        end
    end

    --Core expansion with singificant reclaim in this or an adjacent zone that has no enemies, and we havent yet built an engineer - get a T1 engineer to try and get the reclaim
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if bDebugMessages == true then LOG(sFunctionRef..': High reclaim nearby engi builder - are we in a core expansion='..tostring(tLZTeamData[M28Map.subrefLZCoreExpansion] or false)..'; Dangerous enemies in this LZ='..tostring(tLZTeamData[M28Map.subrefbDangerousEnemiesInThisLZ] or false)..'; Factory tech='..iFactoryTechLevel..'; Buidl count='..oFactory[refiTotalBuildCount]..'; Does this zone want BP='..tostring(tLZTeamData[M28Map.subrefTbWantBP] or false)..'; Ally combat in this zone='..tLZTeamData[M28Map.subrefLZTThreatAllyCombatTotal]) end
    if tLZTeamData[M28Map.subrefLZCoreExpansion] and not(tLZTeamData[M28Map.subrefbDangerousEnemiesInThisLZ]) and oFactory[refiTotalBuildCount] > 0 and (iFactoryTechLevel >= 2 or oFactory[refiTotalBuildCount] >= 4) and tLZTeamData[M28Map.subrefLZTThreatAllyCombatTotal] >= 100 and oFactory[refiTotalBuildCount] <= 50 then
        local bHaveHighReclaimSafeZoneNearby = false
        if bDebugMessages == true then LOG(sFunctionRef..': checking if have high value reclaim zone nearby so can build an engineer to increase chances of getting it, mod dist='..tLZTeamData[M28Map.refiModDistancePercent]..'; Dist to closest enemy base='..M28Utilities.GetDistanceBetweenPositions(tLZTeamData[M28Map.reftClosestEnemyBase], oFactory:GetPosition())) end
        if tLZData[M28Map.subrefTotalSignificantMassReclaim] >= 400 * iFactoryTechLevel and tLZTeamData[M28Map.subrefTbWantBP] then
            bHaveHighReclaimSafeZoneNearby = true
        elseif M28Utilities.IsTableEmpty(tLZData[M28Map.subrefLZAdjacentLandZones]) == false then
            for _, iAdjLZ in tLZData[M28Map.subrefLZAdjacentLandZones] do
                local tAdjLZData = M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iAdjLZ]
                local tAdjLZTeamData = tAdjLZData[M28Map.subrefLZTeamData][iTeam]
                if bDebugMessages == true then LOG(sFunctionRef..': Considering iAdjLZ='..iAdjLZ..'; Air to ground threat='..(tAdjLZTeamData[M28Map.refiEnemyAirToGroundThreat] or 0)..'; Signif Reclaim='..tAdjLZData[M28Map.subrefTotalSignificantMassReclaim]..'; Dangerous enemies='..tostring(tAdjLZTeamData[M28Map.subrefbDangerousEnemiesInThisLZ] or false)..'; Dist to closest enemy base='..M28Utilities.GetDistanceBetweenPositions(tAdjLZTeamData[M28Map.reftClosestEnemyBase], tAdjLZData[M28Map.subrefMidpoint])..'; Mod dist%='..tAdjLZTeamData[M28Map.refiModDistancePercent]..'; Wants BP='..tostring(tAdjLZTeamData[M28Map.subrefTbWantBP])) end
                if tAdjLZTeamData[M28Map.refiEnemyAirToGroundThreat] > 0 then break end
                if tAdjLZTeamData[M28Map.refiModDistancePercent] <= tLZTeamData[M28Map.refiModDistancePercent] and tAdjLZData[M28Map.subrefTotalSignificantMassReclaim] >= 400 * iFactoryTechLevel and (tAdjLZTeamData[M28Map.subrefTbWantBP] or tAdjLZData[M28Map.subrefTotalSignificantMassReclaim] >= 2000) then
                    if not(tAdjLZTeamData[M28Map.subrefbDangerousEnemiesInThisLZ]) and not(tAdjLZTeamData[M28Map.subrefLZbCoreBase]) and (tAdjLZData[M28Map.subrefTotalSignificantMassReclaim] >= 4000 or M28Conditions.GetNumberOfConstructedUnitsMeetingCategoryInZone(tAdjLZTeamData, M28UnitInfo.refCategoryLandFactory)) then
                        local iEngisInZoneAlready = M28Conditions.GetNumberOfConstructedUnitsMeetingCategoryInZone(tAdjLZTeamData, M28UnitInfo.refCategoryEngineer)
                        if iEngisInZoneAlready < 10 and (tAdjLZData[M28Map.subrefTotalSignificantMassReclaim] >= 1500 + 750 * iEngisInZoneAlready or M28Utilities.IsTableEmpty(tAdjLZTeamData[M28Map.subreftoLZOrWZAlliedUnits]) or M28Utilities.IsTableEmpty(EntityCategoryFilterDown(M28UnitInfo.refCategoryEngineer, tAdjLZTeamData[M28Map.subreftoLZOrWZAlliedUnits]))) then
                            bHaveHighReclaimSafeZoneNearby = true
                            break
                        end
                    end
                end
            end
        end
        if bHaveHighReclaimSafeZoneNearby then
            local iEngiLC = M28Conditions.GetFactoryLifetimeCount(oFactory, M28UnitInfo.refCategoryEngineer)
            if bDebugMessages == true then LOG(sFunctionRef..': Considering if want to try getting t1 engi for the reclaim, iEngiLC='..iEngiLC) end
            if iEngiLC <= 3 and iEngiLC < oFactory[refiTotalBuildCount] * 0.2 then
                if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer * categories.TECH1) then return sBPIDToBuild end
                if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then return sBPIDToBuild end
            end
        end
    end

    --Core expansion T2 that has built some units - get a T2 engi if enemy threat less than friendly threat (so we can get PD) if we havent built any engineers at this factory before
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if tLZTeamData[M28Map.subrefLZCoreExpansion] and iFactoryTechLevel >= 2 and oFactory[refiTotalBuildCount] <= 15 and oFactory[refiTotalBuildCount] >= 4 and tLZTeamData[M28Map.subrefLZThreatAllyMobileDFTotal] > (tLZTeamData[M28Map.subrefTThreatEnemyCombatTotal] or 0) then
        if bDebugMessages == true then LOG(sFunctionRef..': Considering if t2+ fac wants to build engineer to get defences, tLZTeamData[M28Map.subrefTBuildPowerByTechWanted][2]='..tLZTeamData[M28Map.subrefTBuildPowerByTechWanted][2]..'; Mobile DF total='..tLZTeamData[M28Map.subrefLZThreatAllyMobileDFTotal]..'; tLZTeamData[M28Map.subrefTbWantBP]='..tostring(tLZTeamData[M28Map.subrefTbWantBP] or false)) end
        if tLZTeamData[M28Map.subrefTbWantBP] and (tLZTeamData[M28Map.subrefTBuildPowerByTechWanted][2] > 0 or ((tLZTeamData[M28Map.subrefMexCountByTech][3] > 0 or tLZTeamData[M28Map.subrefMexCountByTech][2] > 0) and tLZTeamData[M28Map.subrefLZThreatAllyMobileDFTotal] > 150 and tLZTeamData[M28Map.subrefLZThreatAllyMobileDFTotal] > 2 * (tLZTeamData[M28Map.subrefTThreatEnemyCombatTotal] or 0))) then
            local iFacEngiLC = M28Conditions.GetFactoryLifetimeCount(oFactory, M28UnitInfo.refCategoryEngineer)
            if bDebugMessages == true then LOG(sFunctionRef..': iFacEngiLC='..iFacEngiLC..'; Fac DF tank LC='.. M28Conditions.GetFactoryLifetimeCount(oFactory, M28UnitInfo.refCategoryDFTank)) end
            if iFacEngiLC == 0 or (iFacEngiLC == 1 and M28Conditions.GetFactoryLifetimeCount(oFactory, M28UnitInfo.refCategoryDFTank) >= 4) then
                if bDebugMessages == true then LOG(sFunctionRef..': will try getting an engineer for defence') end
                if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then return sBPIDToBuild end
            end
        end
    end
    --core expansion and enemies nearby - build tank
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if tLZTeamData[M28Map.subrefLZCoreExpansion] and (tLZTeamData[M28Map.subrefbDangerousEnemiesInThisLZ] or (oFactory[refiTotalBuildCount] <= 6 and tLZTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ])) then
        --If enemies in adjacent zone, check if they are dangerous, if we have already built a combat unit, and we are at T2+ (so e.g. if enemy has T2 PD nearby we will get indirectfire units)
        local bGetDFUnits = tLZTeamData[M28Map.subrefbDangerousEnemiesInThisLZ]
        if not(bGetDFUnits) then
            local iTankLC = M28Conditions.GetFactoryLifetimeCount(oFactory, M28UnitInfo.refCategoryDFTank)
            if iTankLC == 0 then bGetDFUnits = true
            elseif M28Utilities.IsTableEmpty(tLZData[M28Map.subrefLZAdjacentLandZones]) == false and (iFactoryTechLevel == 1 or iTankLC >= 3) then
                for _, iAdjLZ in tLZData[M28Map.subrefLZAdjacentLandZones] do
                    local tAdjLZTeamData = M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iAdjLZ][M28Map.subrefLZTeamData][iTeam]
                    if (tAdjLZTeamData[M28Map.subrefLZThreatEnemyStructureDFByRange] or 0) > 0 then
                        if bDebugMessages == true then LOG(sFunctionRef..': enemy has PD in adjacent zone so want to abort the DF prioroitisation') end
                        break
                    elseif tAdjLZTeamData[M28Map.subrefbDangerousEnemiesInThisLZ] then
                        bGetDFUnits = true
                        if bDebugMessages == true then LOG(sFunctionRef..': Enemy has dangerous enemies in adjLZ='..iAdjLZ..' so will build DF units') end
                        break
                    end
                end
            end
        end
        if bDebugMessages == true then LOG(sFunctionRef..': nearby enemies so want tanks, will prioritise bots if our factory LC is nil for them and arent in a core zone, attack bot lifetime count='..M28Conditions.GetFactoryLifetimeCount(oFactory, M28UnitInfo.refCategoryLightAttackBot, false)..'; DF tank lifetime count='..M28Conditions.GetFactoryLifetimeCount(oFactory, M28UnitInfo.refCategoryDFTank, false)..'; bGetDFUnits='..tostring(bGetDFUnits)) end
        if bGetDFUnits then
            if iFactoryTechLevel == 1 and not(tLZTeamData[M28Map.subrefLZbCoreBase]) and M28Conditions.GetFactoryLifetimeCount(oFactory, M28UnitInfo.refCategoryLightAttackBot, false) < 1 and ConsiderBuildingCategory(M28UnitInfo.refCategoryLightAttackBot) then if bDebugMessages == true then LOG(sFunctionRef..': Getting LAB') end return sBPIDToBuild
            elseif M28Conditions.GetFactoryLifetimeCount(oFactory, M28UnitInfo.refCategoryDFTank, false) < (1 + M28Conditions.GetFactoryLifetimeCount(oFactory, M28UnitInfo.refCategoryIndirect)) * 2.5 and ConsiderBuildingCategory(M28UnitInfo.refCategoryDFTank) then if bDebugMessages == true then LOG(sFunctionRef..': Getting DF tank') end return sBPIDToBuild
            elseif ConsiderBuildingCategory(M28UnitInfo.refCategoryLandCombat -M28UnitInfo.refCategoryLightAttackBot) then if bDebugMessages == true then LOG(sFunctionRef..': Getting Land combat but not LAB') end return sBPIDToBuild
            end
        end
    end

    --First engineer of cur tech level
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if iFactoryTechLevel >= M28Team.tTeamData[iTeam][M28Team.subrefiHighestFriendlyFactoryTech] and tLZTeamData[M28Map.subrefLZbCoreBase] then
        local iMinEngisWanted --lifetime count; or half this for active current number
        if tLZTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ] then
            iMinEngisWanted = 1
        else
            iMinEngisWanted = 2
        end
        if M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryEngineer * M28UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel)) < iMinEngisWanted then
            if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then return sBPIDToBuild end
        end
    end

    --Priority shields for tele defence
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if bDebugMessages == true then LOG(sFunctionRef..': Checking if want mobile shields for tele defence, M28Team.tTeamData[iTeam][M28Team.refbEnemyHasTeleport]='..tostring(M28Team.tTeamData[iTeam][M28Team.refbEnemyHasTeleport] or false)..'; Table of active GE templates empty='..tostring(M28Utilities.IsTableEmpty(tLZTeamData[M28Map.reftActiveGameEnderTemplates]))..'; LZ has units wanting mobile shield is empty='..tostring(M28Utilities.IsTableEmpty(tLZTeamData[M28Map.reftoLZUnitsWantingMobileShield]))) end
    if bConsiderMobileShields and M28Team.tTeamData[iTeam][M28Team.refbEnemyHasTeleport] and M28Utilities.IsTableEmpty(tLZTeamData[M28Map.reftActiveGameEnderTemplates]) == false and M28Utilities.IsTableEmpty(tLZTeamData[M28Map.reftoLZUnitsWantingMobileShield]) == false and M28Utilities.IsTableEmpty(EntityCategoryFilterDown(M28UnitInfo.refCategoryFixedShield, tLZTeamData[M28Map.reftoLZUnitsWantingMobileShield])) == false then
        if bDebugMessages == true then LOG(sFunctionRef..': Want mobile shield to help protect from enemy teleport') end
        if ConsiderBuildingCategory(M28UnitInfo.refCategoryMobileLandShield) then return sBPIDToBuild end
    end

    --Enemy has T3 air and we dont - get some MAA
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if M28Team.tTeamData[iTeam][M28Team.subrefiHighestFriendlyAirFactoryTech] <= 2 and M28Team.tTeamData[iTeam][M28Team.subrefiHighestEnemyAirTech] >= 3 then
        if not(bDontConsiderBuildingMAA) and tLZTeamData[M28Map.subrefLZMAAThreatWanted] > tLZTeamData[M28Map.subrefLZThreatAllyMAA] + 0.5 * (tLZTeamData[M28Map.subrefLZThreatAllyGroundAA] - tLZTeamData[M28Map.subrefLZThreatAllyMAA]) then
            if bDebugMessages == true then LOG(sFunctionRef..': Want MAA as enemy has T3 air and we dont') end
            if ConsiderBuildingCategory(M28UnitInfo.refCategoryMAA) then return sBPIDToBuild end
        end
    end

    --No engineers in this zone and want BP and have some mass
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if tLZTeamData[M28Map.subrefTbWantBP] and aiBrain:GetEconomyStored('MASS') >= 50 and not(M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingMass]) and (not(tLZTeamData[M28Map.subrefbDangerousEnemiesInThisLZ]) or tLZTeamData[M28Map.subrefLZTThreatAllyCombatTotal] > tLZTeamData[M28Map.subrefTThreatEnemyCombatTotal]) then
        local bHaveEngiInZone = false
        for iUnit, oUnit in tLZTeamData[M28Map.subreftoLZOrWZAlliedUnits] do
            if EntityCategoryContains(M28UnitInfo.refCategoryEngineer, oUnit.UnitId) then
                bHaveEngiInZone = true
                break
            end
        end
        if bDebugMessages == true then LOG(sFunctionRef..': Build engi if want BP and have no engi in zone, bHaveEngiInZone='..tostring(bHaveEngiInZone)) end
        if not(bHaveEngiInZone) then
            if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then return sBPIDToBuild end
        end
    end

    --Multiple mex upgrades so want more engineers (land fac), if only to assist the upgrade (and also so once upgraded we have enough build power)
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if M28Conditions.WantMoreEngineersToAssistMexUpgradeAsPriority(tLZTeamData, iTeam) then
        if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then return sBPIDToBuild end
    end

    --T1 factory that has built loads of units or is in a location for fortifying (with access to T2 tech already) - consider upgrading
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if bDebugMessages == true then LOG(sFunctionRef..': Checking if want to upgrade T1 factory to T2 due to having built lots of units, enemies in this zone empty='..tostring( M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subrefTEnemyUnits]))..'; Tech level='..iFactoryTechLevel..'; M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subreftoActiveUpgrades]) empty='..tostring(M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subreftoActiveUpgrades]))..'; Lifetime count='..M28Conditions.GetFactoryLifetimeCount(oFactory, nil, true)) end
    if iFactoryTechLevel == 1 and M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subreftoActiveUpgrades]) and M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subrefTEnemyUnits]) and not(M28Conditions.HaveLowPower(iTeam)) then
        local iLifetimeCountWanted = 35
        if not(bHaveLowMass) then
            iLifetimeCountWanted = iLifetimeCountWanted - 8
            if aiBrain[M28Economy.refiGrossMassBaseIncome] >= 7 then iLifetimeCountWanted = iLifetimeCountWanted - 7 end
        end
        if M28Map.bIsCampaignMap then iLifetimeCountWanted = iLifetimeCountWanted - 16
        elseif M28Team.tTeamData[iTeam][M28Team.subrefiHighestFriendlyLandFactoryTech] >= 2 and aiBrain[M28Economy.refiGrossMassBaseIncome] >= 3 then iLifetimeCountWanted = iLifetimeCountWanted - 9
        end
        if iLifetimeCountWanted <= 5 then iLifetimeCountWanted = 5 end
        --Increase lifetime count if our highest factory tech level is 1 and we dont have many other land or air factories
        if iLifetimeCountWanted < 15 and aiBrain[M28Economy.refiOurHighestLandFactoryTech] == 1 and tLZTeamData[M28Map.subrefTbWantBP] and aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryFactory) < 4 and aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryEngineer) < 8 then
            iLifetimeCountWanted = math.min(15, iLifetimeCountWanted + 5)
        end
        if tLZTeamData[M28Map.subrefLZFortify] and aiBrain[M28Economy.refiOurHighestLandFactoryTech] >= 2 then iLifetimeCountWanted = 2 end
        if iFactoryTechLevel == 1 and aiBrain[M28Economy.refiOurHighestLandFactoryTech] == 1 and M28Map.iMapSize <= 256 and M28Team.tTeamData[iTeam][M28Team.refbFocusOnT1Spam] then
            if bDebugMessages == true then LOG(sFunctionRef..': In t1 spam mode so delay getting factory/increase units wanted, iLifetimeCountWanted pre increase='..iLifetimeCountWanted) end
            iLifetimeCountWanted = iLifetimeCountWanted + math.max(iLifetimeCountWanted * 1.25, 20)
        end
        if aiBrain[M28Overseer.refbPrioritiseHighTech] then iLifetimeCountWanted = iLifetimeCountWanted * 0.6
        elseif aiBrain[M28Overseer.refbPrioritiseLowTech] then iLifetimeCountWanted = iLifetimeCountWanted * 2
        elseif aiBrain[M28Overseer.refbPrioritiseAir] or aiBrain[M28Overseer.refbPrioritiseNavy] then iLifetimeCountWanted = iLifetimeCountWanted * 1.5
        end
        if bDebugMessages == true then LOG(sFunctionRef..': iLifetimeCountWanted='..iLifetimeCountWanted..'; actual count='..M28Conditions.GetFactoryLifetimeCount(oFactory, nil, true)) end
        if M28Conditions.GetFactoryLifetimeCount(oFactory, nil, true) >= iLifetimeCountWanted then

            if ConsiderUpgrading() then  return sBPIDToBuild end
        end
    end

    --Map specific - enemy base near ours, so want early T1 arti to help e.g. prevent enemy getting early guncom
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if bDebugMessages == true then LOG(sFunctionRef..': Dist to closest enemy base='..M28Utilities.GetDistanceBetweenPositions(tLZData[M28Map.subrefMidpoint], tLZTeamData[M28Map.reftClosestEnemyBase])..'; T1 arti built='..M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryIndirect)) end
    if M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] <= 0.5 and M28Utilities.GetDistanceBetweenPositions(tLZData[M28Map.subrefMidpoint], tLZTeamData[M28Map.reftClosestEnemyBase]) <= 125 and (M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryIndirect) <= math.min(5, math.max(2, oFactory[refiTotalBuildCount] * 0.5))) and NavUtils.GetLabel(M28Map.refPathingTypeLand, tLZTeamData[M28Map.reftClosestEnemyBase]) == tLZData[M28Map.subrefLZIslandRef] then
        if bDebugMessages == true then LOG(sFunctionRef..': Will try and get some early t1 arti') end
        if ConsiderBuildingCategory(M28UnitInfo.refCategoryIndirect) then return sBPIDToBuild end
    end

    --Priority engineers as we are being prevented from upgrading
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if oFactory[refbWantMoreEngineersBeforeUpgrading] and not(bHaveLowMass) and not(tLZTeamData[M28Map.subrefbDangerousEnemiesInThisLZ]) and M28Conditions.CheckIfNeedMoreEngineersOrSnipeUnitsBeforeUpgrading(oFactory) then
        if bDebugMessages == true then LOG(sFunctionRef..': We want more engineers in order to upgrade') end
        if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then return sBPIDToBuild end
    end

    --Want to prioritise sniperbots to deal with enemy land experimental (when enemy lacks fatboy/megalith)
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if (M28Utilities.bLoudModActive or EntityCategoryContains(categories.AEON + categories.SERAPHIM, oFactory.UnitId)) and (iFactoryTechLevel == 3 or tLZTeamData[M28Map.subrefLZbCoreBase]) then
        if M28Conditions.PrioritiseSniperBots(tLZData, iTeam, tLZTeamData, true) and (not(bHaveLowMass) or not(aiBrain[M28Overseer.refbPrioritiseAir]) and not(aiBrain[M28Overseer.refbPrioritiseNavy])) then
            if bDebugMessages == true then LOG(sFunctionRef..': Want to either build sniperbots, or upgrade to t3 so we can build them') end
            if iFactoryTechLevel < 3 then
                if ConsiderUpgrading() then  return sBPIDToBuild end
            else
                if ConsiderBuildingCategory(M28UnitInfo.refCategorySniperBot) then return sBPIDToBuild end
            end
        end
    end

    --Enemy nearby ACU and PD or T2 arti nearby, with no enemies in this actual LZ - get indirect fire as last resort, or mobile shields if we have 10+ indirect fire units and have t2 arti here that wants shielding
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if iFactoryTechLevel >= 2 and tLZTeamData[M28Map.subrefTThreatEnemyCombatTotal] == 0 then
        local iApproachingACU, oNearestACU = M28Conditions.GetThreatOfApproachingEnemyACUsAndNearestACU(tLZData, tLZTeamData, iPlateau, iLandZone, iTeam)
        local tNearestEnemyACU
        if oNearestACU then tNearestEnemyACU = oNearestACU:GetPosition() end
        if bDebugMessages == true then
            LOG(sFunctionRef .. ': Emergency indirect builder: iApproachingACU threat=' .. iApproachingACU .. '; Dist to it=' .. M28Utilities.GetDistanceBetweenPositions((tNearestEnemyACU or oFactory:GetPosition()), oFactory:GetPosition()) .. '; Cur indirect=' .. aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryIndirect) .. '; Lifetime indirect=' .. M28Conditions.GetFactoryLifetimeCount(oFactory, M28UnitInfo.refCategoryIndirect) .. '; Is table of nearby enemy dangerous buildings empty=' .. tostring(M28Utilities.IsTableEmpty(aiBrain:GetUnitsAroundPoint(M28UnitInfo.refCategoryFixedT2Arti + M28UnitInfo.refCategoryT2PlusPD + M28UnitInfo.refCategoryFixedShield + M28UnitInfo.refCategoryTMD, oFactory:GetPosition(), 175, 'Enemy'))))
        end
        local bWantIndirectSubjectToNumbers = false
        if M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subreftoAllNearbyEnemyT2ArtiUnits]) == false then bWantIndirectSubjectToNumbers = true
        elseif iApproachingACU <= 400 and tNearestEnemyACU and M28Utilities.GetDistanceBetweenPositions(tNearestEnemyACU, oFactory:GetPosition()) <= 175 then
            --Does enemy have any T2+ buildings?
            local tNearbyEnemyT2Plus = aiBrain:GetUnitsAroundPoint(M28UnitInfo.refCategoryFixedT2Arti + M28UnitInfo.refCategoryT2PlusPD + M28UnitInfo.refCategoryFixedShield + M28UnitInfo.refCategoryTMD, oFactory:GetPosition(), 175, 'Enemy')
            if bDebugMessages == true then LOG(sFunctionRef..': Is table of nearby enemy T2Plus units empty='..tostring(M28Utilities.IsTableEmpty(tNearbyEnemyT2Plus))) end
            if M28Utilities.IsTableEmpty(tNearbyEnemyT2Plus) == false then
                bWantIndirectSubjectToNumbers = true
            end
        end



        --search adjacent zones to see if they need more mml
        if bDebugMessages == true then LOG(sFunctionRef..': Time since MML fired near TMD in this zone='..GetGameTimeSeconds() - (tLZTeamData[M28Map.subrefiTimeOfMMLFiringNearTMDOrShield] or -100)..'; Factory total build count='..oFactory[refiTotalBuildCount]) end
        if not(bWantIndirectSubjectToNumbers) then
            if GetGameTimeSeconds() - (tLZTeamData[M28Map.subrefiTimeOfMMLFiringNearTMDOrShield] or -100) <= 30 and (not(M28Utilities.bLoudModActive or M28Utilities.bQuietModActive) or tLZTeamData[M28Map.refiModDistancePercent] <= 0.35 or iFactoryTechLevel >= 3) then bWantIndirectSubjectToNumbers = true
            elseif oFactory[refiTotalBuildCount] < 30 then --at higher build count numbers greater risk we are just sending mml to die and will never win
                for _, iAdjLZ in tLZData[M28Map.subrefLZAdjacentLandZones] do
                    local tAdjLZData = M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iAdjLZ]
                    local tAdjLZTeamData = tAdjLZData[M28Map.subrefLZTeamData][iTeam]
                    if bDebugMessages == true then LOG(sFunctionRef..': Time since MML fired near TMD in adj zone '..iAdjLZ..'='..GetGameTimeSeconds() - (tAdjLZTeamData[M28Map.subrefiTimeOfMMLFiringNearTMDOrShield] or -100)) end
                    if GetGameTimeSeconds() - (tAdjLZTeamData[M28Map.subrefiTimeOfMMLFiringNearTMDOrShield] or -100) <= 30 and (not(M28Utilities.bLoudModActive or M28Utilities.bQuietModActive) or tLZTeamData[M28Map.refiModDistancePercent] <= 0.35 or iFactoryTechLevel >= 3) then
                        bWantIndirectSubjectToNumbers = true
                        break
                    end
                end
            end
        end
        if bWantIndirectSubjectToNumbers and M28Team.tTeamData[iTeam][M28Team.refiHighestEnemyDFRangeByPlateau][iPlateau] >= 60 then
            if iFactoryTechLevel == 2 or M28Team.tTeamData[iTeam][M28Team.refiHighestEnemyDFRangeByPlateau][iPlateau] >= 90 then
                bWantIndirectSubjectToNumbers = false
            end
        end
        if bDebugMessages == true then LOG(sFunctionRef..': bWantIndirectSubjectToNumbers='..tostring(bWantIndirectSubjectToNumbers)) end
        if bWantIndirectSubjectToNumbers then
            local iTechCategory = M28UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel)
            local iCurIndirectFire = aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryIndirect * iTechCategory)
            local bConsiderShieldsInstead = false
            if bConsiderMobileShields and M28Utilities.IsTableEmpty(tLZTeamData[M28Map.reftoLZUnitsWantingMobileShield]) == false and M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subreftoAllNearbyEnemyT2ArtiUnits]) == false and M28Utilities.IsTableEmpty(EntityCategoryFilterDown(M28UnitInfo.refCategoryFixedT2Arti, tLZTeamData[M28Map.reftoLZUnitsWantingMobileShield])) == false then
                local iCurMobileShields = aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryMobileLandShield)
                if iCurMobileShields <= 3 * iCurIndirectFire then
                    bConsiderShieldsInstead = true
                end
            end

            if bDebugMessages == true then LOG(sFunctionRef..': iCurIndirectFire='..iCurIndirectFire..'; Lifetime factory indirect fire count='..M28Conditions.GetFactoryLifetimeCount(oFactory, M28UnitInfo.refCategoryIndirect * iTechCategory)..'; bConsiderShieldsInstead='..tostring(bConsiderShieldsInstead)) end
            if bConsiderShieldsInstead and ConsiderBuildingCategory(M28UnitInfo.refCategoryMobileLandShield) then return sBPIDToBuild end

            if iCurIndirectFire <= 9 + 1.5 * M28Team.tTeamData[iTeam][M28Team.subrefiActiveM28BrainCount] and M28Conditions.GetFactoryLifetimeCount(oFactory, M28UnitInfo.refCategoryIndirect * iTechCategory) <= 18 + 2 * M28Team.tTeamData[iTeam][M28Team.subrefiActiveM28BrainCount] then
                if bDebugMessages == true then
                    LOG(sFunctionRef .. ': WIll try and get MML or mobile arti, or mobile shield if we have t2 arti in this zone wanting shielding')
                end
                if ConsiderBuildingCategory(M28UnitInfo.refCategoryIndirect) then return sBPIDToBuild end
            end
        end

    end

    --High priority engineer where they are needed for special shielding (e.g. of gameenders)
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if bDebugMessages == true then LOG(sFunctionRef..': High priority engi builder for special shielding: iFactoryTechLevel='..iFactoryTechLevel..'; Units wanting factory engineers is empty='..tostring(M28Utilities.IsTableEmpty(oFactory[M28Building.reftoUnitsWantingFactoryEngineers]))) end
    if iFactoryTechLevel >= 3 and M28Utilities.IsTableEmpty(oFactory[M28Building.reftoUnitsWantingFactoryEngineers]) == false then
        --Do we already have at least 3 engineers of this factory's faction in the zone that the gameender is in?
        local iFactionRef = M28UnitInfo.GetUnitFaction(oFactory)
        for iUnit, oUnit in oFactory[M28Building.reftoUnitsWantingFactoryEngineers] do
            if M28UnitInfo.IsUnitValid(oUnit) then
                local iGameEnderPlateau, iGameEnderZone = M28Map.GetPlateauAndLandZoneReferenceFromPosition(oUnit:GetPosition())
                local tLZTeamData = M28Map.tAllPlateaus[iGameEnderPlateau][M28Map.subrefPlateauLandZones][iGameEnderZone][M28Map.subrefLZTeamData][iTeam]
                if tLZTeamData[M28Map.subreftbBPByFactionWanted][iFactionRef] then
                    --How many T3 engineers of this faction do we have traveling to this zone already?
                    local iEngiCatWanted = M28UnitInfo.refCategoryEngineer * categories.TECH3
                    if iFactionRef == M28UnitInfo.refFactionUEF then iEngiCatWanted = iEngiCatWanted * categories.UEF
                    elseif iFactionRef == M28UnitInfo.refFactionAeon then iEngiCatWanted = iEngiCatWanted * categories.AEON
                    elseif iFactionRef == M28UnitInfo.refFactionCybran then iEngiCatWanted = iEngiCatWanted * categories.CYBRAN
                    elseif iFactionRef == M28UnitInfo.refFactionSeraphim then iEngiCatWanted = iEngiCatWanted * categories.SERAPHIM
                    end
                    local iEngisAlreadyTraveling = 0
                    --Want at least 3 enginers traveling of the desired tech level
                    if M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subrefTEngineersTravelingHere]) == false then
                        for iEngi, oEngi in  tLZTeamData[M28Map.subrefTEngineersTravelingHere] do
                            if M28UnitInfo.IsUnitValid(oEngi) and EntityCategoryContains(iEngiCatWanted, oEngi.UnitId) then
                                iEngisAlreadyTraveling = iEngisAlreadyTraveling + 1
                            end
                        end
                    end
                    if iEngisAlreadyTraveling < 3 then
                        if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer * categories.TECH3) then return sBPIDToBuild end
                    end
                end
            end
        end
    end

    --ALso high priority engineers more generally if arent building any and want more
    if bDebugMessages == true then LOG(sFunctionRef..': High priority engineers if few are being built: Want BP='..tostring(tLZTeamData[M28Map.subrefTbWantBP])..'; Defend against arti='..tostring(M28Team.tTeamData[iTeam][M28Team.refbDefendAgainstArti])..'; Mass stored='..M28Team.tTeamData[iTeam][M28Team.subrefiTeamMassStored]) end
    if tLZTeamData[M28Map.subrefTbWantBP] and iFactoryTechLevel >= 3 and (M28Team.tTeamData[iTeam][M28Team.refbDefendAgainstArti] or M28Team.tTeamData[iTeam][M28Team.subrefiTeamMassStored] >= 250) then
        local iCurBPWanted = tLZTeamData[M28Map.subrefTBuildPowerByTechWanted][1] + tLZTeamData[M28Map.subrefTBuildPowerByTechWanted][2] + tLZTeamData[M28Map.subrefTBuildPowerByTechWanted][3]
        if iCurBPWanted > 20 then
            local iCurEngineersBeingBuilt = M28Conditions.GetNumberOfUnitsCurrentlyBeingBuiltOfCategoryInZone(tLZTeamData, M28UnitInfo.refCategoryEngineer * categories.TECH3)
            if bDebugMessages == true then LOG(sFunctionRef..': iCurEngineersBeingBuilt='..iCurEngineersBeingBuilt..'; bHaveLowMass='..tostring(bHaveLowMass)..'; iCurBPWanted='..iCurBPWanted) end
            local iMaxEngisAtOnce = 1
            if iLandFactoriesInLZ > 2 then
                if M28Utilities.bLoudModActive or M28Utilities.bQuietModActive then iMaxEngisAtOnce = math.min(2, iLandFactoriesInLZ - 2)
                else
                    iMaxEngisAtOnce = math.min(3, iLandFactoriesInLZ - 1)
                end
            end
            if iCurEngineersBeingBuilt < iMaxEngisAtOnce and (iCurEngineersBeingBuilt <= 2 or not(bHaveLowMass)) and iCurEngineersBeingBuilt * M28Engineer.tiBPByTech[3] < iCurBPWanted then
                if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then return sBPIDToBuild end
            end
        end
    end

    --Indirect fire if T2+ with nearby enemy firebase (slightly lower priority than before) or enemy with units on adj plateau, and no enemies in this zone itself, and are a core base
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if iFactoryTechLevel >= 2 and tLZTeamData[M28Map.subrefLZbCoreBase] and M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subrefTEnemyUnits]) then
        --if more than 40% mass stored then consider engineer instead
        if M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] < 0.4 or M28Conditions.GetNumberOfUnitsCurrentlyBeingBuiltOfCategoryInZone(tLZTeamData, M28UnitInfo.refCategoryEngineer) >= 2 then
            if bDebugMessages == true then LOG(sFunctionRef..': Considering if enemy has nearby T2 arti or enemies in nearby plateau, Is table of t2 arti empty='..tostring(M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subreftoAllNearbyEnemyT2ArtiUnits]))..'; Does enemy have enemies in nearby plateau='..tostring(tLZTeamData[M28Map.refbEnemiesInNearbyPlateau])..'; Our IF threat='..(tLZTeamData[M28Map.subrefLZThreatAllyMobileIndirectTotal] or 0)..'; tLZTeamData[M28Map.subrefiNearbyEnemyLongRangeThreat]='..tLZTeamData[M28Map.subrefiNearbyEnemyLongRangeThreat]) end
            if M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subreftoAllNearbyEnemyT2ArtiUnits]) == false then
                if (M28Team.tTeamData[iTeam][M28Team.refiHighestEnemyDFRangeByPlateau][iPlateau] or 0) <= 55 or (iFactoryTechLevel >= 3 and (M28Team.tTeamData[iTeam][M28Team.refiHighestEnemyDFRangeByPlateau][iPlateau] or 0) <= 90) or (M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subreftoAllNearbyEnemyT2ArtiUnits]) == false and M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryIndirect * M28UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel)) <= 10) then
                    if ConsiderBuildingCategory(M28UnitInfo.refCategoryIndirect) then return sBPIDToBuild end
                end
            end
            --Have at least 1 factory building indirect fire if this is highest tech level and enemy has nearby units in another plateau and we dont already have a decent indirect fire threat
            if tLZTeamData[M28Map.refbEnemiesInNearbyPlateau] and (tLZTeamData[M28Map.subrefLZThreatAllyMobileIndirectTotal] or 0) < 200 * iFactoryTechLevel * iFactoryTechLevel and iFactoryTechLevel >= aiBrain[M28Economy.refiOurHighestLandFactoryTech] and M28Conditions.GetNumberOfUnitsCurrentlyBeingBuiltOfCategoryInZone(tLZTeamData, M28UnitInfo.refCategoryIndirect * M28UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel)) == 0 then
                if ConsiderBuildingCategory(M28UnitInfo.refCategoryIndirect) then return sBPIDToBuild end
                --Also prioritise if T3 and enemy has ravagers nearby
            elseif (tLZTeamData[M28Map.subrefiNearbyEnemyLongRangeThreat] or 0) > 0 and M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subrefoNearbyEnemyLongRangeThreats]) == false and M28Utilities.IsTableEmpty(EntityCategoryFilterDown(M28UnitInfo.refCategoryPD, tLZTeamData[M28Map.subrefoNearbyEnemyLongRangeThreats])) == false then
                if bDebugMessages == true then LOG(sFunctionRef..': Enemy has ravagers, want to build mobile arti unless we have already built a lot, T3 indirect under construction in zone='..M28Conditions.GetNumberOfUnitsCurrentlyBeingBuiltOfCategoryInZone(tLZTeamData, M28UnitInfo.refCategoryIndirect * categories.TECH3)..'; Factory mobile indirect count='..M28Conditions.GetFactoryLifetimeCount(oFactory, M28UnitInfo.refCategoryIndirect * categories.TECH3)..'; Factory total build count='..oFactory[refiTotalBuildCount]..'; iFactoryTechLevel='..iFactoryTechLevel) end
                if oFactory[refiTotalBuildCount] < 10 or M28Conditions.GetNumberOfUnitsCurrentlyBeingBuiltOfCategoryInZone(tLZTeamData, M28UnitInfo.refCategoryIndirect * categories.TECH3) == 0 or M28Conditions.GetFactoryLifetimeCount(oFactory, M28UnitInfo.refCategoryIndirect * categories.TECH3) < oFactory[refiTotalBuildCount] * 0.35 then
                    if iFactoryTechLevel >= 3 then
                        if ConsiderBuildingCategory(M28UnitInfo.refCategoryIndirect * categories.TECH3) then return sBPIDToBuild end
                    elseif aiBrain[M28Economy.refiGrossMassBaseIncome] >= 4 and not(M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingMass]) then --redundancy for niche cases such as e.g. a map that has ravagers near the start
                        --If we have no units upgrading in this zone, then upgrade if we either have t3 land or no active t3 land upgrade for this brain
                        local bUpgradingOtherFactoryInZone = false
                        if M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subreftoActiveUpgrades]) == false then
                            for iUpgrade, oUpgrade in tLZTeamData[M28Map.subreftoActiveUpgrades] do
                                if not(oUpgrade.Dead) and EntityCategoryContains(M28UnitInfo.refCategoryLandFactory, oUpgrade.UnitId) and (iFactoryTechLevel == 1 or EntityCategoryContains(categories.TECH2, oUpgrade.UnitId)) then
                                    bUpgradingOtherFactoryInZone = true
                                    break
                                end
                            end
                        end
                        if bDebugMessages == true then LOG(sFunctionRef..': Want T3 to deal with ravagers, bUpgradingOtherFactoryInZone='..tostring(bUpgradingOtherFactoryInZone)..'; aiBrain[M28Economy.refiOurHighestLandFactoryTech]='..aiBrain[M28Economy.refiOurHighestLandFactoryTech]..'; Do we have active T2 HQ upgrade='..tostring(M28Team.DoesBrainHaveActiveHQUpgradesOfCategory(aiBrain, M28UnitInfo.refCategoryLandFactory * categories.TECH2))) end
                        if not(bUpgradingOtherFactoryInZone) then

                            if aiBrain[M28Economy.refiOurHighestLandFactoryTech] > iFactoryTechLevel or not(M28Team.DoesBrainHaveActiveHQUpgradesOfCategory(aiBrain, M28UnitInfo.refCategoryLandFactory * categories.TECH2)) then
                                if ConsiderUpgrading() then  return sBPIDToBuild end
                            end
                        end
                    end
                end
            end

        end
    end

    --T2 MAA for ACU
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if iFactoryTechLevel >= 2 and oFactory[refiTotalBuildCount] >= 3 and not(bDontConsiderBuildingMAA) then
        --Does ACU have an MAA guard? if not then build MAA if we are in the same island; build amphibious/hover if not in same island
        if M28UnitInfo.IsUnitValid(aiBrain[M28ACU.refoPrimaryACU]) and M28Utilities.IsTableEmpty(aiBrain[M28ACU.refoPrimaryACU][M28Land.reftoAssignedMAAGuards]) then
            if NavUtils.GetLabel(M28Map.refPathingTypeLand, aiBrain[M28ACU.refoPrimaryACU]:GetPosition()) == tLZData[M28Map.subrefLZIslandRef] then
                if ConsiderBuildingCategory(M28UnitInfo.refCategoryMAA * categories.TECH2) then return sBPIDToBuild end
            elseif NavUtils.GetLabel(M28Map.refPathingTypeHover,  aiBrain[M28ACU.refoPrimaryACU]:GetPosition()) == iPlateau and not(M28UnitInfo.IsUnitUnderwater(aiBrain[M28ACU.refoPrimaryACU])) then
                if ConsiderBuildingCategory(M28UnitInfo.refCategoryMAA * categories.TECH2 * categories.HOVER) then return sBPIDToBuild end
            end
        end
    end

    --Priority upgrade to T3 if have lots of T3 mexes, and no enemies in this zone (even if have enemies nearby), provided we have other factores in the zone that can build units
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if bDebugMessages == true then LOG(sFunctionRef..': Priority factory upgrade, iFactoryTechLevel='..iFactoryTechLevel..'; Our highest factory tech='..(aiBrain[M28Economy.refiOurHighestLandFactoryTech] or 'nil')..'; T3 mexes='..(tLZTeamData[M28Map.subrefMexCountByTech][3] or 'nil')..'; Is table of enemy units empty='..tostring(M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subrefTEnemyUnits]))..'; Gross mass income='..aiBrain[M28Economy.refiGrossMassBaseIncome]..'; Team has low power='..tostring(M28Conditions.HaveLowPower(iTeam))..'; Gross energy='..aiBrain[M28Economy.refiGrossEnergyBaseIncome]) end
    if iFactoryTechLevel == 2 and aiBrain[M28Economy.refiOurHighestLandFactoryTech] == 2 and (tLZTeamData[M28Map.subrefMexCountByTech][3] >= 2 or (tLZTeamData[M28Map.subrefMexCountByTech][3] >= 1 and aiBrain[M28Economy.refiGrossMassBaseIncome] >= 14) or (tLZTeamData[M28Map.subrefMexCountByTech][1] == 0 and aiBrain[M28Economy.refiGrossMassBaseIncome] >= 18)) and M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subrefTEnemyUnits]) and (aiBrain[M28Economy.refiGrossMassBaseIncome] >= 10 or tLZTeamData[M28Map.subrefMexCountByTech][3] >= 4) and (not(M28Conditions.HaveLowPower(iTeam)) or (not(M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingEnergy]) and aiBrain[M28Economy.refiGrossEnergyBaseIncome] >= 100)) then
        local bAlreadyUpgradingT2HQ = false
        --Check we arent already upgrading a T2 factory of any kind
        if M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subreftoActiveUpgrades]) == false then
            for iUpgrade, oUpgrade in tLZTeamData[M28Map.subreftoActiveUpgrades] do
                if EntityCategoryContains(categories.TECH2 * M28UnitInfo.refCategoryAllHQFactories, oUpgrade.UnitId) then
                    bAlreadyUpgradingT2HQ = true
                    break
                end
            end
        end
        if bDebugMessages == true then LOG(sFunctionRef..': Passed eco and enemy unit conditions, will check if have other upgrades already, bAlreadyUpgradingT2HQ='..tostring(bAlreadyUpgradingT2HQ)) end
        if not(bAlreadyUpgradingT2HQ) then
            --Do we have other land factories in this zone? treat t1 factories as being worth 1/3 a t2 factory, need to -1 due to this factory
            local iT2FactoryEquivalent = -1 + aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryLandFactory * categories.TECH2) + aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryLandFactory) / 3
            local iOtherT2Wanted = 1
            if aiBrain[M28Overseer.refbPrioritiseLowTech] or aiBrain[M28Overseer.refbPrioritiseAir] or aiBrain[M28Overseer.refbPrioritiseNavy] then iOtherT2Wanted = 3
            elseif aiBrain[M28Overseer.refbPrioritiseHighTech] then
                iOtherT2Wanted = 0.5
            end
            if iT2FactoryEquivalent >= iOtherT2Wanted then
                if ConsiderUpgrading() then  return sBPIDToBuild end
            end
        end
    end

    --Enhancements (LOUD)
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    local sEnhancementWanted = ConsiderFactoryEnhancement(oFactory, tLZTeamData)
    if sEnhancementWanted then return sEnhancementWanted, true end

    --Support category for this zone (except very early game)
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    --Near unit cap - dont build anything at land fac if low mass and not highest tech level
    if aiBrain[M28Overseer.refbCloseToUnitCap] and (iFactoryTechLevel < math.min(3, M28Team.tTeamData[iTeam][M28Team.subrefiHighestFriendlyLandFactoryTech]) or (bHaveLowMass and not(tLZTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ]))) then
        --Try and get an upgrade if dont have low mass
        if not(bHaveLowMass) and (iFactoryTechLevel < aiBrain[M28Economy.refiOurHighestLandFactoryTech] or (iFactoryTechLevel < 3 and M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.subreftTeamUpgradingHQs]))) then
            if ConsiderUpgrading() then return sBPIDToBuild end
        end
    else
        --MAA as a priority for 1 factory if have multiple factories in LZ and a land experimental
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if bDebugMessages == true then LOG(sFunctionRef..': Priority MAA builder for experimental, MAA in this zone='..(tLZTeamData[M28Map.subrefLZThreatAllyMAA] or 'nil')..'; Enemy air to ground='..(M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] or 0)..'; bDontConsiderBuildingMAA='..tostring(bDontConsiderBuildingMAA or false)..'; Dangerous enemies in this LZ='..tostring(tLZTeamData[M28Map.subrefbDangerousEnemiesInThisLZ])..'; iLandFactoriesInLZ='..iLandFactoriesInLZ..'; iFactoryTechLevel='..iFactoryTechLevel..'; Far behind on air='..tostring(M28Team.tAirSubteamData[iAirSubteam][M28Team.refbFarBehindOnAir])..'; iNearbyMAAThreat='..iNearbyMAAThreat..'; iNearbyAirToGroundThreat='..iNearbyAirToGroundThreat..'; M28Team.tTeamData[iTeam][M28Team.subrefiAlliedMAAThreat]='..(M28Team.tTeamData[iTeam][M28Team.subrefiAlliedMAAThreat] or 0)..'; M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat]='..(M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] or 'nil')) end
        if not(bDontConsiderBuildingMAA) and not(tLZTeamData[M28Map.subrefbDangerousEnemiesInThisLZ]) and iFactoryTechLevel >= 2 and (iLandFactoriesInLZ >= 2 or (M28Team.tTeamData[iTeam][M28Team.subrefiHighestFriendlyAirFactoryTech] >= 3 and bHaveLowMass) or (M28Team.tAirSubteamData[iAirSubteam][M28Team.refbFarBehindOnAir] and (bHaveLowMass or M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] <= 0.2))) and (M28Team.tAirSubteamData[iAirSubteam][M28Team.refbFarBehindOnAir] or ((M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurAirAAThreat] or 0) < 3500 and ((M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] or 0) > 2000 or not(M28Team.tAirSubteamData[iAirSubteam][M28Team.refbHaveAirControl])))) and (M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] or 0) > 0 and iNearbyMAAThreat < math.max(iNearbyAirToGroundThreat, 1000 + 250 * iLandFactoriesInLZ) then
            if M28Team.tTeamData[iTeam][M28Team.subrefiAlliedMAAThreat] <= math.max(3000, iNearbyAirToGroundThreat, math.min(5000, (M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] or 0) * 0.2)) then
                --If we either have a land experimental needing MAA, or we have nearby enemy air to ground threat and minimal MAA, then want more MAA
                if bDebugMessages == true then LOG(sFunctionRef..': Cur land experimentals='..aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryLandExperimental)) end
                if aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryLandExperimental) > 0 or iNearbyMAAThreat < iNearbyAirToGroundThreat then
                    local iCurMAABeingBuilt = M28Conditions.GetNumberOfUnitsCurrentlyBeingBuiltOfCategoryInZone(tLZTeamData, M28UnitInfo.refCategoryMAA - categories.TECH1)
                    if bDebugMessages == true then LOG(sFunctionRef..': Want MAA unless already building some, iCurMAABeingBUilt='..iCurMAABeingBuilt) end
                    if iCurMAABeingBuilt == 0 or (iCurMAABeingBuilt <= 1 and iLandFactoriesInLZ >= 4) then
                        if iNearbyMAAThreat < iNearbyAirToGroundThreat then
                            if ConsiderBuildingCategory(M28UnitInfo.refCategoryMAA - categories.TECH1) then return sBPIDToBuild end
                        else
                            --Do we have a land non-Fatboy (since it can build its own MAA) experimental on the same plateau as this factory and wanting MAA?
                            local tFriendlyLandExp = aiBrain:GetListOfUnits(M28UnitInfo.refCategoryLandExperimental - M28UnitInfo.refCategoryFatboy, false, true)
                            if M28Utilities.IsTableEmpty(tFriendlyLandExp) == false then
                                local bExpOnPlateauWantsMAA = false
                                local bExpOnIslandWantsMAA = false
                                local iIslandWanted = NavUtils.GetLabel(M28Map.refPathingTypeLand, oFactory:GetPosition())
                                if iIslandWanted then
                                    local iExpIslandRef
                                    for iExp, oExp in tFriendlyLandExp do
                                        if bDebugMessages == true then LOG(sFunctionRef..': Considering oExp='..oExp.UnitId..M28UnitInfo.GetUnitLifetimeCount(oExp)..'; assigned plateau='..(oExp[M28UnitInfo.reftAssignedPlateauAndLandZoneByTeam][iTeam][1] or 'nil')) end
                                        if oExp[M28UnitInfo.reftAssignedPlateauAndLandZoneByTeam][iTeam][1] == iPlateau or iPlateau == NavUtils.GetLabel(M28Map.refPathingTypeHover, oExp:GetPosition()) then
                                            bExpOnPlateauWantsMAA = true
                                            iExpIslandRef = NavUtils.GetLabel(M28Map.refPathingTypeLand, oExp:GetPosition())
                                            if bDebugMessages == true then LOG(sFunctionRef..': iExpIslandRef='..iExpIslandRef) end
                                            if iExpIslandRef == iIslandWanted then
                                                bExpOnIslandWantsMAA = true
                                                break
                                            end
                                        end
                                    end
                                end
                                if bDebugMessages == true then LOG(sFunctionRef..': bExpOnIslandWantsMAA='..tostring(bExpOnIslandWantsMAA or false)..'; bExpOnPlateauWantsMAA='..tostring(bExpOnPlateauWantsMAA or false)..'; iIslandWanted='..iIslandWanted) end
                                if bExpOnIslandWantsMAA then
                                    if ConsiderBuildingCategory(M28UnitInfo.refCategoryMAA - categories.TECH1) then return sBPIDToBuild end
                                elseif bExpOnPlateauWantsMAA then
                                    if ConsiderBuildingCategory(M28UnitInfo.refCategoryMAA * categories.HOVER - categories.TECH1) then return sBPIDToBuild end
                                end
                            end
                        end
                    end
                end
            end
        end

        --Consider upgrading t1 to t2 support fac if we are overflowing mass, have built at least 3 units, and dont have enemies in this zone
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if iFactoryTechLevel <= 2 and aiBrain:GetEconomyStoredRatio('MASS') >= 0.7 and not(bHaveLowPower) and aiBrain[M28Economy.refiOurHighestLandFactoryTech] > iFactoryTechLevel and oFactory[refiTotalBuildCount] >= 3 and M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subrefTEnemyUnits]) and tLZTeamData[M28Map.subrefLZbCoreBase] then
            --Check that, excluding this factory, we have at least 3 factories able to build of this tech level or higher
            local iExistingFactoriesAbleToBuildInZone = 0
            local tLandFacInZone = EntityCategoryFilterDown(M28UnitInfo.refCategoryLandFactory, tLZTeamData[M28Map.subreftoLZOrWZAlliedUnits])
            if M28Utilities.IsTableEmpty(tLandFacInZone) == false then
                for iUnit, oUnit in tLandFacInZone do
                    if oUnit:GetFractionComplete() == 1 and not(oUnit:IsUnitState('Upgrading')) then
                        local iCurTech = M28UnitInfo.GetUnitTechLevel(oUnit)
                        if iCurTech == iFactoryTechLevel then iExistingFactoriesAbleToBuildInZone = iExistingFactoriesAbleToBuildInZone + 1
                        elseif iCurTech > iFactoryTechLevel then iExistingFactoriesAbleToBuildInZone = (iCurTech - iFactoryTechLevel) * 2
                        end
                    end
                end
            end
            if bDebugMessages == true then LOG(sFunctionRef..': Consider Upgrade to support land fac, iExistingFactoriesAbleToBuildInZone='..iExistingFactoriesAbleToBuildInZone..'; oFactory[refiTotalBuildCount]='..oFactory[refiTotalBuildCount]) end
            if iExistingFactoriesAbleToBuildInZone >= 3 or (iExistingFactoriesAbleToBuildInZone >= 1 and oFactory[refiTotalBuildCount] > 10) and (not(bHaveLowMass) or not(aiBrain[M28Overseer.refbPrioritiseLowTech])) then
                if ConsiderUpgrading() then return sBPIDToBuild end
            end
        end

        --Seraphim high priority land scouts at start for 'lurker' mode - decided to remove as after testing M28 did significantly worse on polar depression 1v1 with RNG (with this, it got crushed by 1.1 RNG; wtihout it, it crushed RNG)
        --[[iCurrentConditionToTry = iCurrentConditionToTry + 1
        if iFactoryTechLevel == 1 and M28UnitInfo.GetUnitLifetimeCount(oFactory) == 1 and EntityCategoryContains(categories.SERAPHIM, oFactory.UnitId) then
            if bDebugMessages == true then LOG(sFunctionRef..': High priority selen builder, total build count='..oFactory[refiTotalBuildCount]..'; Cur land scouts='.. aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryLandScout)) end
            if oFactory[refiTotalBuildCount] <= 15 and aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryLandScout) <= 1 + 1.5 * M28Map.iMapSize / 256 then
                if ConsiderBuildingCategory(M28UnitInfo.refCategoryLandScout) then return sBPIDToBuild end
            end
        end--]]

        --Enemies nearby and have built fewer tanks of this tech level than engineers; or are on a core expansion and have no combat threat in this LZ
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if bDebugMessages == true then
            LOG(sFunctionRef .. ': CHecking if nearby enemy threat and we are T2 plus, iFactoryTechLevel=' .. iFactoryTechLevel .. '; Enemies in this or adjacent LZ=' .. tostring(tLZTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ]) .. '; bSaveMassDueToEnemyFirebaseOrOurExperimental=' .. tostring(bSaveMassDueToEnemyFirebaseOrOurExperimental) .. '; bDontConsiderBuildingMAA=' .. tostring(bDontConsiderBuildingMAA)..'; refbAdjZonesWantEngiForUnbuiltMex='..tostring(tLZTeamData[M28Map.refbAdjZonesWantEngiForUnbuiltMex] or false))
        end
        --If early on and we have ACU in our zone and nearest enemy base is close and no enemies in our zone itself, and we have nearby zones wanting engis for mex, then dont build
        if tLZTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ] and (iFactoryTechLevel > 1 or oFactory[refiTotalBuildCount] >= 10 or GetGameTimeSeconds() >= 300 or not(tLZTeamData[M28Map.subrefLZbCoreBase]) or (tLZTeamData[M28Map.subrefTThreatEnemyCombatTotal] > 60 and tLZTeamData[M28Map.subrefLZThreatAllyMobileDFTotal] < tLZTeamData[M28Map.subrefTThreatEnemyCombatTotal] * 2) or not(tLZTeamData[M28Map.refbAdjZonesWantEngiForUnbuiltMex]) or M28Utilities.GetDistanceBetweenPositions(tLZData[M28Map.subrefMidpoint], tLZTeamData[M28Map.reftClosestEnemyBase]) >= 300) then
            --Require lifetime engi build count of 2 first for t1 fac
            if iFactoryTechLevel == 1 and not(M28Map.bIsCampaignMap) and (oFactory[refiTotalBuildCount] or 0) < 4 and M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryEngineer) < 3 then
                --Do nothing (want later initial engineer builder to apply instead)
                if bDebugMessages == true then LOG(sFunctionRef..': Wont build tank as want to get engineers') end
            else
                --Build tanks unless we have a LC of tanks of at least 5 and more than our LC of engineers
                --                      GetLandZoneSupportCategoryWanted(oFactory, iTeam, iPlateau, iLandZone, iTargetLandZone, bDontConsiderBuildingMAA, bConsiderMobileShields, bConsiderMobileStealths, bConsiderAbsolvers, bDontGetCombat, bDontGetIndirect, bDontConsiderLandScouts)
                local iCategoryToGet = GetLandZoneSupportCategoryWanted(oFactory, iTeam, iPlateau, iLandZone, iLandZone,        bDontConsiderBuildingMAA, bConsiderMobileShields, bConsiderMobileStealths, bConsiderAbsolvers,nil,nil, bDontConsiderLandScouts)
                if bDebugMessages == true then LOG(sFunctionRef..': Considered support category wanted for this LZ, is iCategoryToGet nil='..tostring(iCategoryToGet==nil)) end

                --About to overflow mass and enemy is in adj zone but not this zone, or are in a 'safe' zone
                if not(iCategoryToGet) and tLZTeamData[M28Map.subrefLZbCoreBase] and M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subrefTEnemyUnits]) and tLZTeamData[M28Map.subrefTbWantBP] then
                    if not(bHaveLowMass) and M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.25 and (tLZTeamData[M28Map.refbBaseInSafePosition] or (M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.45 and (M28Team.tTeamData[iTeam][M28Team.subrefiTeamNetMass] > 0.025 * M28Team.tTeamData[iTeam][M28Team.subrefiTeamGrossMass] or M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] > 0.95 or (M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.8 and (aiBrain:GetEconomyIncome('MASS') > 0 or M28Team.tTeamData[iTeam][M28Team.subrefiTeamNetMass] > 0))))) then
                        iCategoryToGet = M28UnitInfo.refCategoryEngineer
                    end
                end

                --Combat land scouts
                if iFactoryTechLevel == 1 and aiBrain[M28Overseer.refiCombatLandScoutThreshold] > 0 and EntityCategoryContains(categories.AEON + categories.UEF, oFactory.UnitId) and tLZTeamData[M28Map.subrefLZbCoreBase] and aiBrain[M28Overseer.refiCombatLandScoutThreshold] * 0.5 > M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryLandScout) then
                    iCategoryToGet = M28UnitInfo.refCategoryLandScout
                end
                if not (iCategoryToGet) and M28Utilities.IsTableEmpty(tLZData[M28Map.subrefLZAdjacentLandZones]) == false then
                    for _, iAdjLZ in tLZData[M28Map.subrefLZAdjacentLandZones] do
                        if iFactoryTechLevel < 3 or not (bDontConsiderBuildingMAA) then
                            iCategoryToGet = GetLandZoneSupportCategoryWanted(oFactory, iTeam, iPlateau, iLandZone, iAdjLZ, bDontConsiderBuildingMAA, bConsiderMobileShields, bConsiderMobileStealths, bConsiderAbsolvers,nil,nil,bDontConsiderLandScouts)
                        elseif M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] >= 1000 then
                            iCategoryToGet = GetLandZoneSupportCategoryWanted(oFactory, iTeam, iPlateau, iLandZone, iAdjLZ, false, bConsiderMobileShields, bConsiderMobileStealths, bConsiderAbsolvers,nil,nil,bDontConsiderLandScouts)
                        else
                            iCategoryToGet = GetLandZoneSupportCategoryWanted(oFactory, iTeam, iPlateau, iLandZone, iAdjLZ, bDontConsiderBuildingMAA, bConsiderMobileShields, bConsiderMobileStealths, bConsiderAbsolvers,nil,nil,bDontConsiderLandScouts)
                        end
                        if bDebugMessages == true then LOG(sFunctionRef..': Finished considering category to build for iAdjLZ='..iAdjLZ..'; is iCategoryToGet nil='..tostring(iCategoryToGet == nil)) end
                        if iCategoryToGet then
                            break
                        end
                    end
                end
                if bDebugMessages == true then LOG(sFunctionRef .. ': Finished checking for support category wanted for this or adjacent LZ. Is iCategoryToGet nil=' .. tostring(iCategoryToGet == nil)..'; bHaveLowMass='..tostring(bHaveLowMass)..'; tiLandFactoriesByTechInZone='..repru(tiLandFactoriesByTechInZone)) end
                if iCategoryToGet then
                    if iCategoryToGet == 'Upgrade' then
                        if ConsiderBuildingCategory(iCategoryToGet) then return sBPIDToBuild end
                    else
                        local iTankLC = M28Conditions.GetLifetimeBuildCount(aiBrain, iCategoryToGet * M28UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel))
                        if bDebugMessages == true then
                            LOG(sFunctionRef .. ': Lifetime build count for this tech level=' .. iTankLC .. '; Engi LC for this tech=' .. M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryEngineer * M28UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel))..'; tLZTeamData[M28Map.subrefLZbCoreBase]='..tostring(tLZTeamData[M28Map.subrefLZbCoreBase] or false)..'; oFactory[refiTotalBuildCount]='..oFactory[refiTotalBuildCount]..'; Does our category to get include DF Tank='..tostring(M28Utilities.DoesCategoryContainCategory(M28UnitInfo.refCategoryDFTank, iCategoryToGet)))
                        end
                        --Switch category to get indirect if we have a large tank LC and low ratio for a core expansion
                        if iFactoryTechLevel < 3 and iTankLC >= 10 and not(tLZTeamData[M28Map.subrefLZbCoreBase]) and oFactory[refiTotalBuildCount] >= 5 and M28Utilities.DoesCategoryContainCategory(M28UnitInfo.refCategoryDFTank, iCategoryToGet) then
                            local iFactoryTankLC = M28Conditions.GetFactoryLifetimeCount(oFactory, M28UnitInfo.refCategoryDFTank)
                            local iIndirectLC = M28Conditions.GetFactoryLifetimeCount(oFactory, M28UnitInfo.refCategoryIndirect)
                            if bDebugMessages == true then LOG(sFunctionRef..': Considering if want to switch to get indirect fire category, iFactoryTankLC='..iFactoryTankLC..' and iIndirectLC='..iIndirectLC) end
                            if iFactoryTankLC >= 5 and (iIndirectLC == 0 or iIndirectLC * 8 < iFactoryTankLC) then
                                iCategoryToGet = M28UnitInfo.refCategoryIndirect
                                if bDebugMessages == true then LOG(sFunctionRef..': Will get indirect fire category') end
                            end
                        end
                        if iTankLC < 3 or
                                ((not(bHaveLowMass) or iFactoryTechLevel >= M28Team.tTeamData[iTeam][M28Team.subrefiHighestFriendlyFactoryTech] or (tiLandFactoriesByTechInZone[iFactoryTechLevel + 1] == 0 and (iFactoryTechLevel == 2 or tiLandFactoriesByTechInZone[3] ==0))) and iTankLC < M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryEngineer * M28UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel))) then
                            if iFactoryTechLevel < 3 then
                                if ConsiderBuildingCategory(iCategoryToGet) then
                                    return sBPIDToBuild
                                end
                            else
                                --If are overflowing mass, no enemies in cur LZ, at T3, and need BP, then get engineers
                                if bDebugMessages == true then LOG(sFunctionRef .. ': Checking for mass overflow exception where will get engis instead; tLZTeamData[M28Map.subrefbDangerousEnemiesInThisLZ]=' .. tostring(tLZTeamData[M28Map.subrefbDangerousEnemiesInThisLZ]) .. '; Stored%=' .. M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] .. '; Want BP=' .. tostring(tLZTeamData[M28Map.subrefTbWantBP]) .. '; iTankLC=' .. iTankLC) end
                                local bGetEngineersInstead = false
                                if iTankLC >= 4 and not (bHaveLowMass) and not (tLZTeamData[M28Map.subrefbDangerousEnemiesInThisLZ]) and M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.95 and tLZTeamData[M28Map.subrefTbWantBP] then

                                    if M28Utilities.IsTableEmpty(tLZTeamData[M28Map.reftoNearestDFEnemies]) then
                                        bGetEngineersInstead = true
                                    else
                                        local oNearestDFEnemy
                                        oNearestDFEnemy = M28Utilities.GetNearestUnit(tLZTeamData[M28Map.reftoNearestDFEnemies], oFactory:GetPosition())
                                        if oNearestDFEnemy then
                                            if M28Utilities.GetDistanceBetweenPositions(oFactory:GetPosition(), oNearestDFEnemy:GetPosition()) >= 70 then
                                                bGetEngineersInstead = true
                                            end
                                        else
                                            bGetEngineersInstead = true
                                        end
                                    end
                                end
                                if bGetEngineersInstead then
                                    if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then return sBPIDToBuild end
                                else
                                    --Enemies near to base/land factory, and we have a category to get; however want to still consider unit ratios but based on these LZs before going with the standard support category - i.e. consider indirect fire if have lots of DF and T3 land
                                    local iDFTotalThreat = tLZTeamData[M28Map.subrefLZThreatAllyMobileDFTotal]
                                    local iIndirectTotalThreat = tLZTeamData[M28Map.subrefLZThreatAllyMobileIndirectTotal]
                                    local iEnemyAirToGroundThreat = tLZTeamData[M28Map.refiEnemyAirToGroundThreat]
                                    if M28Utilities.IsTableEmpty(tLZData[M28Map.subrefLZAdjacentLandZones]) == false then
                                        for _, iAdjLZ in tLZData[M28Map.subrefLZAdjacentLandZones] do
                                            iDFTotalThreat = iDFTotalThreat + M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iLandZone][M28Map.subrefLZTeamData][iTeam][M28Map.subrefLZThreatAllyMobileDFTotal]
                                            iIndirectTotalThreat = iIndirectTotalThreat + M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iLandZone][M28Map.subrefLZTeamData][iTeam][M28Map.subrefLZThreatAllyMobileIndirectTotal]
                                            iEnemyAirToGroundThreat = iEnemyAirToGroundThreat + M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iLandZone][M28Map.subrefLZTeamData][iTeam][M28Map.refiEnemyAirToGroundThreat]
                                        end
                                    end
                                    if iDFTotalThreat >= 8000 and iDFTotalThreat > iIndirectTotalThreat * 8 and iEnemyAirToGroundThreat <= tLZTeamData[M28Map.subrefLZThreatAllyGroundAA] and (EntityCategoryContains(categories.AEON, oFactory.UnitId)) or iDFTotalThreat > iIndirectTotalThreat * 10 then
                                        if ConsiderBuildingCategory(M28UnitInfo.refCategoryT3MobileArtillery) then return sBPIDToBuild end
                                    elseif ConsiderBuildingCategory(iCategoryToGet) then
                                        return sBPIDToBuild
                                    end
                                end
                            end
                        else
                            if bDebugMessages == true then LOG(sFunctionRef..': Will just try and get the support category') end
                            if ConsiderBuildingCategory(iCategoryToGet) then return sBPIDToBuild
                            end
                        end
                    end
                end
            end
        end

        --Priority tanks if at T2
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if bDebugMessages == true then LOG(sFunctionRef .. ': Considering priority T2 units, iFactoryTechLevel=' .. iFactoryTechLevel .. '; Highest friendly factory tech=' .. M28Team.tTeamData[iTeam][M28Team.subrefiHighestFriendlyFactoryTech] .. '; Lifetime build count for T2 land combat=' .. M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryLandCombat - categories.TECH1) .. '; Current T2+ engineers=' .. aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryEngineer - categories.TECH1)) end
        if iFactoryTechLevel == 2 and iFactoryTechLevel == M28Team.tTeamData[iTeam][M28Team.subrefiHighestFriendlyFactoryTech] and M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryLandCombat - categories.TECH1) < math.min(3, aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryEngineer - categories.TECH1)) then
            if bDebugMessages == true then LOG(sFunctionRef .. ': Cur skirmishers=' .. aiBrain:GetCurrentUnits(M28UnitInfo.refCategorySkirmisher * categories.TECH2) .. '; Cur DF tnaks=' .. aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryLandCombat * categories.TECH2)..'; subrefbLZWantsIndirectSupport='..tostring(tLZTeamData[M28Map.subrefbLZWantsIndirectSupport] or false)) end
            if tLZTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ] and ((aiBrain.M28Easy and oFactory[refiTotalBuildCount] < 10) or (not(aiBrain.M28Easy) and aiBrain:GetCurrentUnits(M28UnitInfo.refCategorySkirmisher * categories.TECH2) > math.max(2, aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryLandCombat * categories.TECH2 - M28UnitInfo.refCategorySkirmisher)))) then
                --Does enemy have structure threat in this or adjacent LZ? if so then prioritise MML instead unless we already have at least 15
                if tLZTeamData[M28Map.subrefbLZWantsIndirectSupport] and aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryIndirect * categories.TECH2) < 15 then
                    if bDebugMessages == true then LOG(sFunctionRef..': Want more MML') end
                    if ConsiderBuildingCategory(M28UnitInfo.refCategoryIndirect * categories.TECH2) then return sBPIDToBuild end
                end

                if ConsiderBuildingCategory(M28UnitInfo.refCategoryLandCombat * categories.TECH2) then
                    return sBPIDToBuild
                elseif ConsiderBuildingCategory(M28UnitInfo.refCategorySkirmisher * categories.TECH2) then
                    return sBPIDToBuild
                end
            end
        end

        --Initial engineers
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if bDebugMessages == true then LOG(sFunctionRef .. ': Considering high priority engineers, iFactoryTechLevel=' .. iFactoryTechLevel .. '; Team highest factory tech level=' .. M28Team.tTeamData[iTeam][M28Team.subrefiHighestFriendlyFactoryTech] .. '; Lifetime build count=' .. M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryEngineer * M28UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel)) .. '; Current units=' .. aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryEngineer * M28UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel))) end
        if iFactoryTechLevel >= M28Team.tTeamData[iTeam][M28Team.subrefiHighestFriendlyFactoryTech] and tLZTeamData[M28Map.subrefLZbCoreBase] then
            local iMinEngisWanted --lifetime count; or half this for active current number
            if tLZTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ] or M28Map.bIsLowMexMap then
                iMinEngisWanted = 2
                --If enemies in adj zone arent mobile then increase min to 3
                if not(tLZTeamData[M28Map.subrefbDangerousEnemiesInThisLZ]) and iFactoryTechLevel == 1 and M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryEngineer) < 4 and not(M28Map.bIsLowMexMap) and GetGameTimeSeconds() <= 300 then
                    --Are there no mobile enemies in adj zone (e.g. might be a civilian PD)
                    local bNearbyMobileThreat = false
                    if M28Utilities.IsTableEmpty(tLZData[M28Map.subrefLZAdjacentLandZones]) == false then
                        for _, iAdjLZ in tLZData[M28Map.subrefLZAdjacentLandZones] do
                            local tAdjLZData = M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iAdjLZ]
                            local tAdjLZTeamData = tAdjLZData[M28Map.subrefLZTeamData][iTeam]
                            if (tAdjLZTeamData[M28Map.subrefLZThreatEnemyMobileDFTotal] or 0) > 0 or (tAdjLZTeamData[M28Map.subrefLZThreatEnemyMobileIndirectTotal] or 0) > 0 then
                                bNearbyMobileThreat = true
                                break
                            end
                        end
                    end
                    if not(bNearbyMobileThreat) then
                        iMinEngisWanted = 3
                        if M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryIndirect) > 0 then iMinEngisWanted = 4 end
                    end
                    if bDebugMessages == true then LOG(sFunctionRef..': bNearbyMobileThreat='..tostring(bNearbyMobileThreat)..'; iMinEngisWatned='..iMinEngisWanted..'; Lifetime indirect build count='..M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryIndirect)) end
                end
            else
                iMinEngisWanted = 4
            end
            if (M28Utilities.bLoudModActive or M28Utilities.bQuietModActive) and iMinEngisWanted > 3 then iMinEngisWanted = 3 end
            if M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryEngineer * M28UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel)) < iMinEngisWanted or aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryEngineer * M28UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel)) <= (iMinEngisWanted * 0.5) then
                if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then
                    return sBPIDToBuild
                end
            end
        end

        --Engineers if overflowing and at T3 (or early game in core base with far away enemy base) and no ground enemies in this zone
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if bDebugMessages == true then LOG(sFunctionRef .. ': Engineers when about to overflow, [M28Map.subrefTbWantBP]='..tostring(tLZTeamData[M28Map.subrefTbWantBP])..'; tLZTeamData[M28Map.subrefbDangerousEnemiesInThisLZ]=' .. tostring(tLZTeamData[M28Map.subrefbDangerousEnemiesInThisLZ]) .. '; bHaveLowMass=' .. tostring(bHaveLowMass) .. '; Want more BP=' .. tostring(tLZTeamData[M28Map.subrefTbWantBP]) .. '; iFactoryTechLevel=' .. iFactoryTechLevel .. '; Mass percent stored=' .. M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] .. '; Gross mass=' .. M28Team.tTeamData[iTeam][M28Team.subrefiTeamGrossMass]) end
        if not (tLZTeamData[M28Map.subrefbDangerousEnemiesInThisLZ]) and not (bHaveLowMass) and tLZTeamData[M28Map.subrefTbWantBP] and (iFactoryTechLevel >= 3 or (tLZTeamData[M28Map.subrefLZbCoreBase] and M28Utilities.GetDistanceBetweenPositions(tLZData[M28Map.subrefMidpoint], tLZTeamData[M28Map.reftClosestEnemyBase]) >= 500)) and (M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.7 or (GetGameTimeSeconds() <= 300 and M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.45)) and (iFactoryTechLevel < 3 or M28Team.tTeamData[iTeam][M28Team.subrefiTeamGrossMass] >= 7) then
            if bDebugMessages == true then
                LOG(sFunctionRef .. ': Will try and get more engieners to avoid overflow')
            end
            if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then
                return sBPIDToBuild
            end
        end


        --Early game - more engineers if are on a large map where unlikely to have enemies nearby for a while
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if bDebugMessages == true then LOG(sFunctionRef .. ': Considering engineer for maps where enemy far away or not pathable, time=' .. GetGameTimeSeconds() .. '; Factory tehc=' .. iFactoryTechLevel .. '; Core base=' .. tostring(tLZTeamData[M28Map.subrefLZbCoreBase]) .. '; Path to enemy base iwth land=' .. tostring(aiBrain[M28Map.refbCanPathToEnemyBaseWithLand]) .. '; Dist to closest enemy base from this LZ=' .. M28Utilities.GetDistanceBetweenPositions(tLZTeamData[M28Map.reftClosestEnemyBase], tLZData[M28Map.subrefMidpoint])) end
        if iFactoryTechLevel == 1 and GetGameTimeSeconds() <= 480 and tLZTeamData[M28Map.subrefLZbCoreBase] and not(M28Map.bIsLowMexMap) and (not(tLZTeamData[M28Map.subrefbDangerousEnemiesInThisLZ]) or (oFactory[refiTotalBuildCount] <= 4 and M28UnitInfo.GetUnitLifetimeCount(oFactory) <= 2)) and (not (aiBrain[M28Map.refbCanPathToEnemyBaseWithLand]) or M28Utilities.GetDistanceBetweenPositions(tLZTeamData[M28Map.reftClosestEnemyBase], tLZData[M28Map.subrefMidpoint]) >= 450) then
            --Do we have a low lifetime engineer build count?
            local iLCWanted = 12
            if M28Map.iMapSize <= 512 and aiBrain[M28Map.refbCanPathToEnemyBaseWithLand] then
                iLCWanted = 6
            end
            if M28Utilities.bLoudModActive or M28Utilities.bQuietModActive then iLCWanted = iLCWanted - 2 end
            local iLifetimeEngiCount = M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryEngineer)
            if tLZTeamData[M28Map.subrefbDangerousEnemiesInThisLZ] then iLCWanted = iLCWanted * 0.5 end
            if bDebugMessages == true then
                LOG(sFunctionRef .. ': iLifetimeEngiCount=' .. iLifetimeEngiCount .. '; iLCWanted=' .. iLCWanted)
            end
            if iLifetimeEngiCount < iLCWanted then
                if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then return sBPIDToBuild end
            end
            if iLifetimeEngiCount < iLifetimeEngiCount * 2 and (not (aiBrain[M28Map.refbCanPathToEnemyBaseWithLand]) or M28Map.iMapSize > 512 or iLifetimeEngiCount < iLCWanted * 1.25) then
                --Do we have adjacent LZ with unbuilt mexes, no enemies, needing engineers with no engineers currently assigned or traveling?
                for _, iAdjLZ in tLZData[M28Map.subrefLZAdjacentLandZones] do
                    if not (M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iAdjLZ][M28Map.subrefLZTeamData][iTeam][M28Map.subrefbEnemiesInThisOrAdjacentLZ]) then
                        if M28Utilities.IsTableEmpty(M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iAdjLZ][M28Map.subrefLZTeamData][iTeam][M28Map.subrefMexUnbuiltLocations]) == false and M28Utilities.IsTableEmpty(M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iAdjLZ][M28Map.subrefLZTeamData][iTeam][M28Map.subrefTEngineersTravelingHere]) == false and M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iAdjLZ][M28Map.subrefLZTeamData][iTeam][M28Map.subrefTbWantBP] then
                            if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then
                                return sBPIDToBuild
                            end
                        end
                    end
                end

                --Do we have a nearby island wanting engineers?
                if GetGameTimeSeconds() <= 360 and M28Utilities.IsTableEmpty(tLZData[M28Map.subrefLZPathingToOtherIslands]) == false then
                    local iDistanceThreshold
                    if bHaveLowMass then
                        iDistanceThreshold = M28Utilities.GetDistanceBetweenPositions(tLZData[M28Map.subrefMidpoint], M28Map.GetPrimaryEnemyBaseLocation(aiBrain)) * 0.5
                        --If have t2 naval fac then greatly reduce distance threshold
                        if M28Team.tTeamData[iTeam][M28Team.subrefiHighestFriendlyNavalFactoryTech] >= 2 then
                            iDistanceThreshold = iDistanceThreshold * 0.4
                        end
                    else
                        iDistanceThreshold = M28Utilities.GetDistanceBetweenPositions(tLZData[M28Map.subrefMidpoint], M28Map.GetPrimaryEnemyBaseLocation(aiBrain)) * 0.75
                    end
                    iDistanceThreshold = math.min(300, iDistanceThreshold)

                    for iEntry, tPathingData in tLZData[M28Map.subrefLZPathingToOtherIslands] do
                        if bDebugMessages == true then
                            LOG(sFunctionRef .. ': Considering island ' .. tPathingData[M28Map.subrefIslandNumber] .. '; travel dist=' .. tPathingData[M28Map.subrefIslandTravelDist] .. '; Closest LZ ref=' .. (tPathingData[M28Map.subrefIslandClosestLZRef] or 'nil') .. '; are enemies in this or adjacent LZ=' .. tostring(M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][tPathingData[M28Map.subrefIslandClosestLZRef]][M28Map.subrefLZTeamData][iTeam][M28Map.subrefbEnemiesInThisOrAdjacentLZ]))
                        end
                        if tPathingData[M28Map.subrefIslandTravelDist] > iDistanceThreshold then
                            break
                        else
                            --Only consider island if available mexes and no enemies
                            if tPathingData[M28Map.subrefIslandClosestLZRef] then
                                local tIslandLZData = M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][tPathingData[M28Map.subrefIslandClosestLZRef]]
                                local tIslandLZTeamData = tIslandLZData[M28Map.subrefLZTeamData][iTeam]
                                if not (tIslandLZTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ]) and M28Utilities.IsTableEmpty(tIslandLZData[M28Map.subrefMexUnbuiltLocations]) == false and tIslandLZData[M28Map.subrefTbWantBP] then
                                    if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer - categories.FIELDENGINEER) then
                                        return sBPIDToBuild
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end


        --Initiail combat
        if bDebugMessages == true then LOG(sFunctionRef .. ': Considering initial combat units, lifetime count=' .. M28Conditions.GetTeamLifetimeBuildCount(iTeam, M28UnitInfo.refCategoryLandCombat)..'; Is this core base='..tostring(tLZTeamData[M28Map.subrefLZbCoreBase])) end
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if bCanPathToEnemyWithLand and iFactoryTechLevel == 1 and bHaveHighestLZTech and M28Conditions.GetTeamLifetimeBuildCount(iTeam, M28UnitInfo.refCategoryLandCombat - categories.COMMAND) < 3 then
            --Get LABs for the first couple of combat units (non-seraphim)
            if bDebugMessages == true then LOG(sFunctionRef..': T1 factory - Will get attack bot if are non-seraphim and low LC for this brain, LC='..M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryLightAttackBot)) end
            local iAttackBotLifetimeCount = M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryLightAttackBot)
            if not(EntityCategoryContains(categories.SERAPHIM, oFactory.UnitId)) and iAttackBotLifetimeCount <= 1 and (iAttackBotLifetimeCount == 0 or M28Utilities.GetDistanceBetweenPositions(tLZData[M28Map.subrefMidpoint], tLZTeamData[M28Map.reftClosestEnemyBase]) >= 200) and ConsiderBuildingCategory(M28UnitInfo.refCategoryLightAttackBot) then
                return sBPIDToBuild
            elseif iAttackBotLifetimeCount >= 2 and M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryLandScout) <= 1 and (not(M28Team.tTeamData[iTeam][M28Team.subrefbTeamHasOmniVision]) or EntityCategoryContains(categories.SERAPHIM, oFactory.UnitId)) and ConsiderBuildingCategory(M28UnitInfo.refCategoryLandScout) then
                return sBPIDToBuild
            elseif ConsiderBuildingCategory(M28UnitInfo.refCategoryDFTank - M28UnitInfo.refCategoryLightAttackBot) then
                return sBPIDToBuild
            end
        end

        --Scouts if we want any, subject to limit based on number of engineers we have
        if bDebugMessages == true then LOG(sFunctionRef .. ': Considering if we want land scouts, does this LZ want scouts=' .. tostring(tLZTeamData[M28Map.refbWantLandScout])) end
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if (tLZTeamData[M28Map.refbWantLandScout] or (tLZTeamData[M28Map.refiRadarCoverage] <= 30 and iFactoryTechLevel == 1 and oFactory[refiTotalBuildCount] <= 10 and tLZTeamData[M28Map.subrefLZbCoreBase] and not (bDontConsiderLandScouts) and ((EntityCategoryContains(categories.SERAPHIM, oFactory.UnitId) and M28Conditions.GetFactoryLifetimeCount(oFactory, M28UnitInfo.refCategoryLandScout) <= 4) or (M28Conditions.GetFactoryLifetimeCount(oFactory, M28UnitInfo.refCategoryLandScout) == 0 and M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryLandScout) <= 3)))) then
            if not (bHaveHighestLZTech) then
                if ConsiderBuildingCategory(M28UnitInfo.refCategoryLandScout) then
                    return sBPIDToBuild
                end
            else
                local iCurLandScouts = aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryLandScout)
                if iCurLandScouts < 8 or iCurLandScouts < aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryEngineer) or iCurLandScouts * 2 < aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryLandCombat) then
                    if ConsiderBuildingCategory(M28UnitInfo.refCategoryLandScout) then
                        return sBPIDToBuild
                    end
                end
            end
        elseif tLZTeamData[M28Map.refiRadarCoverage] <= 150 and iFactoryTechLevel <= 2 and not(bDontConsiderLandScouts) and M28Utilities.IsTableEmpty(tLZData[M28Map.subrefLZAdjacentLandZones]) == false then
            --If we have t1 radar in this zone we still want land scouts to support units further away
            local iCurLandScouts = aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryLandScout)
            if bDebugMessages == true then LOG(sFunctionRef..': Land scouts for adjacent zone builder, iCurLandScouts='..iCurLandScouts) end
            if iCurLandScouts <= 2 or (iFactoryTechLevel == 1 and EntityCategoryContains(categories.SERAPHIM, oFactory.UnitId) and iCurLandScouts <= 2 + 3 * M28Map.iMapSize / 256 and aiBrain[M28Economy.refiOurHighestFactoryTechLevel] == 1) then
                if ConsiderBuildingCategory(M28UnitInfo.refCategoryLandScout) then return sBPIDToBuild end
            elseif iCurLandScouts <= 6 and iCurLandScouts <= oFactory[refiTotalBuildCount] / 3 then
                for _, iAdjLZ in tLZData[M28Map.subrefLZAdjacentLandZones] do
                    local tAdjLZTeamData = M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iAdjLZ][M28Map.subrefLZTeamData][iTeam]
                    if bDebugMessages == true then LOG(sFunctionRef..': Does adj LZ='..iAdjLZ..' want land scout='..tostring(tAdjLZTeamData[M28Map.refbWantLandScout])) end
                    if tAdjLZTeamData[M28Map.refbWantLandScout] then
                        if ConsiderBuildingCategory(M28UnitInfo.refCategoryLandScout) then return sBPIDToBuild end
                    end
                end
            end
        end

        --MAA if we are building a land experimental, lack air control, and enemy has a large air to ground threat
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if not(bDontConsiderBuildingMAA) and iFactoryTechLevel >= 2 and M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] >= 10000 and not(M28Conditions.TeamHasAirControl(iTeam)) and M28Engineer.GetExperimentalsBeingBuiltInThisAndOtherLandZones(iTeam, iPlateau, iLandZone, false, 0, M28UnitInfo.refCategoryLandExperimental, false, nil, aiBrain.M28AirSubteam) then
            if bDebugMessages == true then LOG(sFunctionRef..': Will get MAA as we are building a ground exp, enemy has signif air to ground threat, and we lack air control') end
            if ConsiderBuildingCategory(M28UnitInfo.refCategoryMAA) then return sBPIDToBuild end
        end


        --Initial T2+ tanks if have at least 5 engis of our current tech level and dont have many tanks, and can path to enemy by land (core base only)
        local iSkirmisherCategory = M28UnitInfo.refCategorySkirmisher * M28UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel)
        if (M28Utilities.bLoudModActive or M28Utilities.bQuietModActive) and iFactoryTechLevel == 2 and categories.brmt2medm then iSkirmisherCategory = iSkirmisherCategory + categories.brmt2medm end

        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if iFactoryTechLevel >= 2 and bHaveHighestLZTech and tLZTeamData[M28Map.subrefLZbCoreBase] then
            --Can we path to enemy base from this land zone?
            local iCurIsland = NavUtils.GetLabel(M28Map.refPathingTypeLand, tLZData[M28Map.subrefMidpoint])
            local iEnemyIsland = NavUtils.GetLabel(M28Map.refPathingTypeLand, tLZTeamData[M28Map.reftClosestEnemyBase])
            if bDebugMessages == true then
                LOG(sFunctionRef .. ': iCurrentConditionToTry=' .. iCurrentConditionToTry .. '; iCurIsland=' .. (iCurIsland or 'nil') .. '; iEnemyIsland=' .. (iEnemyIsland or 'nil') .. '; iFactoryTechLevel=' .. iFactoryTechLevel .. '; Cur engineers of this tech level=' .. aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryEngineer * M28UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel)) .. '; Cur DF units of this tech level=' .. aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryMobileLand * categories.DIRECTFIRE * M28UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel))..'; Team has air control='..tostring(M28Conditions.TeamHasAirControl(iTeam)))
            end
            if iCurIsland == iEnemyIsland and (M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] <= 8000 or M28Conditions.TeamHasAirControl(iTeam)) and math.min(8 - M28Team.tTeamData[iTeam][M28Team.subrefiActiveM28BrainCount], aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryEngineer * M28UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel))) > math.max(1, aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryMobileLand * categories.DIRECTFIRE * M28UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel))) then
                if bCanPathToEnemyWithLand then
                    if iFactoryTechLevel == 2 and not(aiBrain.M28Easy) and ConsiderBuildingCategory(iSkirmisherCategory) then
                        return sBPIDToBuild
                        --Initial T3 tanks - want tanks instead of sniperbots if enemy has lower health units/isnt at T3
                    elseif iFactoryTechLevel == 3 and not(aiBrain.M28Easy) and oFactory[refiTotalBuildCount] >= 5 and (oFactory[refiTotalBuildCount] >= 15 or (M28Team.tTeamData[iTeam][M28Team.refiEnemyHighestMobileLandHealth] >= 2400 and M28Team.tTeamData[iTeam][M28Team.subrefiHighestFriendlyLandFactoryTech] >= 3)) and ConsiderBuildingCategory(iSkirmisherCategory) then
                        return sBPIDToBuild
                    elseif ConsiderBuildingCategory(M28UnitInfo.refCategoryLandCombat * M28UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel)) then
                        return sBPIDToBuild
                    end
                else
                    if ConsiderBuildingCategory(M28UnitInfo.refCategoryAmphibiousCombat - categories.FIELDENGINEER) then
                        return sBPIDToBuild
                    end
                end
            end
        end

        --Non-core land zones - consider building combat units ahead of engineers if need them for this LZ
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if bDebugMessages == true then
            LOG(sFunctionRef .. ': iCurrentConditionToTry=' .. iCurrentConditionToTry .. '; Do we have a core base=' .. tostring(tLZTeamData[M28Map.subrefLZbCoreBase] or false) .. '; will consider if we want non-core base units for this LZ if not a core base')
        end
        if not (tLZTeamData[M28Map.subrefLZbCoreBase]) then
            local iCategoryToGet = GetLandZoneSupportCategoryWanted(oFactory, iTeam, iPlateau, iLandZone, iLandZone, bDontConsiderBuildingMAA, bConsiderMobileShields, bConsiderMobileStealths, bConsiderAbsolvers, bSaveMassDueToEnemyFirebaseOrOurExperimental, nil, bDontConsiderLandScouts)
            if iCategoryToGet then
                if bDebugMessages == true then LOG(sFunctionRef..': Have support category wanted for iPlateau='..iPlateau..'; iLandZone='..iLandZone) end
                if ConsiderBuildingCategory(iCategoryToGet) then
                    return sBPIDToBuild
                end
            end
        end



        --Consider upgrading factory to t2 (or T3) if we have lots of mass, or have built lots of units from this factory
        local iUnitCountToUpgrade = 25
        if iFactoryTechLevel < 3 then
            if iFactoryTechLevel < aiBrain[M28Economy.refiOurHighestLandFactoryTech] then
                iUnitCountToUpgrade = iUnitCountToUpgrade - 10
                local iUpgradingCount = 0
                if M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.subreftTeamUpgradingHQs]) == false then
                    for iUpgrade, oUpgrade in M28Team.tTeamData[iTeam][M28Team.subreftTeamUpgradingHQs] do
                        if M28UnitInfo.IsUnitValid(oUpgrade) and EntityCategoryContains(M28UnitInfo.refCategoryLandFactory, oUpgrade.UnitId) then
                            iUpgradingCount = iUpgradingCount + 1
                        end
                    end
                end
                if bDebugMessages == true then LOG(sFunctionRef..': iUpgradingCount='..iUpgradingCount..'; iUnitCountToUpgrade pre this='..iUnitCountToUpgrade) end
                iUnitCountToUpgrade = iUnitCountToUpgrade + (iUpgradingCount + (iUpgradingCount - 1)) * 6


            else
                if iFactoryTechLevel < M28Team.tTeamData[iTeam][M28Team.subrefiHighestFriendlyLandFactoryTech] then
                    iUnitCountToUpgrade = iUnitCountToUpgrade - 5
                end
                --If have active HQ upgrades for this brain then make it much less likely we will upgrade
                local bHaveActiveHQUpgrade = true
                if M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subreftoActiveUpgrades]) or M28Utilities.IsTableEmpty(EntityCategoryFilterDown(M28UnitInfo.refCategoryAllHQFactories, tLZTeamData[M28Map.subreftoActiveUpgrades])) then
                    --Check all active upgrades of this tech level and below for this brain
                    if M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.subreftTeamUpgradingHQs]) then
                        bHaveActiveHQUpgrade = false
                    else
                        bHaveActiveHQUpgrade = false
                        for iUpgrade, oUpgrade in M28Team.tTeamData[iTeam][M28Team.subreftTeamUpgradingHQs] do
                            if EntityCategoryContains(M28UnitInfo.refCategoryLandFactory, oUpgrade.UnitId) or M28UnitInfo.GetUnitTechLevel(oUpgrade) >= iFactoryTechLevel then
                                bHaveActiveHQUpgrade = true
                                break
                            end
                        end
                    end
                end
                if bHaveActiveHQUpgrade then
                    iUnitCountToUpgrade = iUnitCountToUpgrade + 15
                    if bHaveLowMass or M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] <= 0.6 then
                        iUnitCountToUpgrade = iUnitCountToUpgrade + 15
                    end
                end
            end

            --(iFactoryTechLevel < M28Team.tTeamData[iTeam][M28Team.subrefiHighestFriendlyLandFactoryTech] and (M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subreftoActiveUpgrades]) then iUnitCountToUpgrade = iUnitCountToUpgrade - 10 end
            if bHaveLowMass then iUnitCountToUpgrade = iUnitCountToUpgrade + 15 end
            if tLZTeamData[M28Map.subrefbDangerousEnemiesInThisLZ] then iUnitCountToUpgrade = iUnitCountToUpgrade + 15 end
            if M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.4 and M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subrefTEnemyUnits]) then
                if bDebugMessages == true then LOG(sFunctionRef..': No enemy units in this zone and at least 40% mass stored so reducing unit count to upgrade by 25% from '..iUnitCountToUpgrade) end
                iUnitCountToUpgrade = iUnitCountToUpgrade * 0.75
                if M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.8 or (M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.subreftTeamUpgradingHQs]) and GetGameTimeSeconds() - (oFactory[refiTimeSinceLastFailedToGetOrder] or -100) <= 5 and tLZTeamData[M28Map.subrefLZbCoreBase]) then
                    if bDebugMessages == true then LOG(sFunctionRef..': Either have at least 80% mass stored or it has been a while since we had nothing to build so reducing unit count to upgrade by 50% from '..iUnitCountToUpgrade) end
                    iUnitCountToUpgrade = iUnitCountToUpgrade * 0.5
                end
            end
            if (GetGameTimeSeconds() - (oFactory[refiTimeSinceLastFailedToGetOrder] or -100)) <= 5 and (iFactoryTechLevel >= aiBrain[M28Economy.refiOurHighestLandFactoryTech] or not(tLZTeamData[M28Map.subrefLZbCoreBase])) then
                if bDebugMessages == true then LOG(sFunctionRef..': Not had anythign to build recently and we either have our highest tech or are not at a core base, so doubling unit count required') end
                iUnitCountToUpgrade = iUnitCountToUpgrade * 2
            end
            if M28Utilities.IsTableEmpty(M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subreftoActiveUpgrades])) then
                if bDebugMessages == true then LOG(sFunctionRef..': No active upgrades in this zone so reducing the unit count to upgrade by 25% from '..iUnitCountToUpgrade) end
                iUnitCountToUpgrade = iUnitCountToUpgrade * 0.75
            end

            --If we dont have many factories for this brain then increase the unit count for early game
            if aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryLandFactory + M28UnitInfo.refCategoryAirFactory) < 3 and GetGameTimeSeconds() <= 480 then
                if bDebugMessages == true then LOG(sFunctionRef..'; We only have '..aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryLandFactory + M28UnitInfo.refCategoryAirFactory)..' factories in total and early game so increasing the units to upgrade') end
                iUnitCountToUpgrade = math.max(iUnitCountToUpgrade * 1.5, 16)
            end
            --If we have mexes in this zone and theyre not T2 then dont consider upgrading unless have a very high unit count
            if iFactoryTechLevel >= 2 then
                if math.min(2, tLZData[M28Map.subrefLZMexCount] * 0.75) > tLZTeamData[M28Map.subrefMexCountByTech][iFactoryTechLevel] then iUnitCountToUpgrade = math.max(15, iUnitCountToUpgrade) + iUnitCountToUpgrade end
                if tLZData[M28Map.subrefLZMexCount] > 0 and tLZTeamData[M28Map.subrefMexCountByTech][2] * 0.5 + tLZTeamData[M28Map.subrefMexCountByTech][3] < 1 then iUnitCountToUpgrade = iUnitCountToUpgrade + 10 end
            else
                if math.min(2, (tLZData[M28Map.subrefLZMexCount] or 0) * 0.75) > tLZTeamData[M28Map.subrefMexCountByTech][2] + tLZTeamData[M28Map.subrefMexCountByTech][3] * 2 then iUnitCountToUpgrade = math.max(15, iUnitCountToUpgrade) + iUnitCountToUpgrade end
                if tLZData[M28Map.subrefLZMexCount] > 0 and tLZTeamData[M28Map.subrefMexCountByTech][iFactoryTechLevel] == 0 then iUnitCountToUpgrade = iUnitCountToUpgrade + 10 end
                --Overflowing mass - upgrade T1 support factory in core base to t2 support fac evne if normal unit count would be much higher
                if bDebugMessages == true then LOG(sFunctionRef..': Will massively reduce unit count if t1 fac and want to upgrade to support fac, iUnitCountToUpgrade='..iUnitCountToUpgrade..'; Low mass='..tostring(bHaveLowMass)..'; Core base='..tostring(tLZTeamData[M28Map.subrefLZbCoreBase])..'; Our highest tech='..aiBrain[M28Economy.refiOurHighestLandFactoryTech]..'; Is table of enemy units empty='..tostring(M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subrefTEnemyUnits]))..'; Energy stored%='..M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageEnergyPercentStored]..'; Mass%='..M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored]..'; Net mass='..M28Team.tTeamData[iTeam][M28Team.subrefiTeamNetMass]..'; Gross mass='..aiBrain[M28Economy.refiGrossMassBaseIncome]..'; Brain mass income='..aiBrain:GetEconomyIncome('MASS')) end
                if iUnitCountToUpgrade >= 3 and not(bHaveLowMass) and tLZTeamData[M28Map.subrefLZbCoreBase] and iFactoryTechLevel < aiBrain[M28Economy.refiOurHighestLandFactoryTech]  and M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subrefTEnemyUnits]) and (M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageEnergyPercentStored] >= 0.99 or M28Team.tTeamData[iTeam][M28Team.subrefiTeamGrossEnergy] >= 150) and not(M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingEnergy]) then
                    local bAppliedLowerCount = false
                    if M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.5 and (M28Team.tTeamData[iTeam][M28Team.subrefiTeamNetMass] >= 1 or (M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.8 and (aiBrain:GetEconomyIncome('MASS') > 0 or M28Team.tTeamData[iTeam][M28Team.subrefiTeamNetMass] > 0 or M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.95)) and aiBrain[M28Economy.refiGrossMassBaseIncome] >= 8) then
                        if bDebugMessages == true then LOG(sFunctionRef..': Cur engineers='..aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryEngineer)..'; Engis in zone='..GetEngiCountInZone()) end
                        if aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryEngineer) >= 8 then
                            if GetEngiCountInZone() >= 6 then
                                if aiBrain[M28Economy.refiOurHighestLandFactoryTech] >= 3 then iUnitCountToUpgrade = 0
                                else
                                    iUnitCountToUpgrade = 2
                                    bAppliedLowerCount = true
                                end
                                if bDebugMessages == true then LOG(sFunctionRef..': Will lower unit count to upgrade to just '..iUnitCountToUpgrade) end
                            end
                        end
                    end
                    if not(bAppliedLowerCount) then
                        --We still want to reduce the engineers wanted significantly if we have more than 1k mass stored, and positive income, for a T1 land fac
                        if iFactoryTechLevel == 1 and aiBrain:GetEconomyStored('MASS') >= 1000 and (aiBrain:GetEconomyStored('MASS') >= 2000 or  aiBrain[M28Economy.refiNetMassBaseIncome] > 0) then
                            iUnitCountToUpgrade = math.max(math.min(iUnitCountToUpgrade, 7), iUnitCountToUpgrade * 0.5)
                            if bDebugMessages == true then LOG(sFunctionRef..': iUnitCountToUpgrade after reducing for having enough mass for a support fac='..iUnitCountToUpgrade) end
                        end
                    end
                else
                    if iFactoryTechLevel == 1 and aiBrain:GetEconomyStored('MASS') >= 1000 and (aiBrain:GetEconomyStored('MASS') >= 2000 or  aiBrain[M28Economy.refiNetMassBaseIncome] > 0) and M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subrefTEnemyUnits]) and (M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageEnergyPercentStored] >= 0.99 or aiBrain[M28Economy.refiGrossEnergyBaseIncome] >= 150) and not(M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingEnergy]) and tLZTeamData[M28Map.subrefMexCountByTech][2] + tLZTeamData[M28Map.subrefMexCountByTech][3] >= 3 then
                        iUnitCountToUpgrade = math.max(iUnitCountToUpgrade * 0.5, iUnitCountToUpgrade - (aiBrain:GetEconomyStored('MASS') - 500) / 100)
                        if bDebugMessages == true then LOG(sFunctionRef..': iUnitCountToUpgrade after reducing slightly for having enough mass for a support fac='..iUnitCountToUpgrade) end
                    end
                end
                if iFactoryTechLevel == 1 and M28Team.tTeamData[iTeam][M28Team.refbFocusOnT1Spam] and M28Map.iMapSize <= 256 then
                    iUnitCountToUpgrade = iUnitCountToUpgrade + math.max(iUnitCountToUpgrade * 1.25, 20)
                    if bDebugMessages == true then LOG(sFunctionRef..': Significantly increasing units to upgrade as are in t1 spam mode') end
                end
            end
            if M28Utilities.bLoudModActive or M28Utilities.bQuietModActive then
                if iFactoryTechLevel == 1 and tLZTeamData[M28Map.subrefMexCountByTech][2] < 2 and tLZTeamData[M28Map.subrefMexCountByTech][1] > 0 then
                    iUnitCountToUpgrade = iUnitCountToUpgrade * 2
                    if bDebugMessages == true then LOG(sFunctionRef..': Increasing unit count requirement as we lack t2 mexes') end
                elseif iFactoryTechLevel == 2 and tLZTeamData[M28Map.subrefMexCountByTech][3] < 2 and tLZTeamData[M28Map.subrefMexCountByTech][1] + tLZTeamData[M28Map.subrefMexCountByTech][2] > 0 then
                    iUnitCountToUpgrade = iUnitCountToUpgrade * 2
                    if bDebugMessages == true then LOG(sFunctionRef..': Increasing unit count requirement as we lack t3 mexes') end
                end
            end
            if aiBrain[M28Overseer.refbPrioritiseAir] or aiBrain[M28Overseer.refbPrioritiseLowTech] or aiBrain[M28Overseer.refbPrioritiseNavy] then iUnitCountToUpgrade = iUnitCountToUpgrade * 2
            elseif aiBrain[M28Overseer.refbPrioritiseHighTech] then iUnitCountToUpgrade = iUnitCountToUpgrade * 0.5
            end




            iCurrentConditionToTry = iCurrentConditionToTry + 1
            if bDebugMessages == true then LOG(sFunctionRef..': Considering if we want to upgrade factory, iFactoryTechLevel='..(iFactoryTechLevel or 'nil')..'; Highest friendly tech='..(M28Team.tTeamData[iTeam][M28Team.subrefiHighestFriendlyLandFactoryTech] or 'nil')..'; Time since last had no order='..(GetGameTimeSeconds() - (oFactory[refiTimeSinceLastFailedToGetOrder] or -100))..'; Is table of active upgrades empty='..tostring(M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subreftoActiveUpgrades]))..'; iUnitCountToUpgrade='..iUnitCountToUpgrade..'; Factory lifetime build count='..M28Conditions.GetFactoryLifetimeCount(oFactory, nil, true)..'; bHaveLowMass='..tostring(bHaveLowMass)..'; tLZData[M28Map.subrefLZMexCount]='..tLZData[M28Map.subrefLZMexCount]..'; tLZTeamData[M28Map.subrefMexCountByTech]='..repru(tLZTeamData[M28Map.subrefMexCountByTech])) end
            if M28Conditions.GetFactoryLifetimeCount(oFactory, nil, true) >= iUnitCountToUpgrade then
                --Exception - we have access to higher tech than this factory already, and have low mass, and still have mexes in the zone at the same tech levle as this factory
                if (not(bHaveLowMass) and (not(aiBrain[M28Overseer.refbPrioritiseLowTech]) or aiBrain[M28Economy.refiOurHighestLandFactoryTech] > iFactoryTechLevel)) or M28Conditions.GetFactoryLifetimeCount(oFactory, nil, true) >= math.max(20, iUnitCountToUpgrade * 3) or (not(aiBrain[M28Overseer.refbPrioritiseLowTech]) and tLZTeamData[M28Map.subrefMexCountByTech][iFactoryTechLevel] == 0 and (iFactoryTechLevel == 1 or tLZTeamData[M28Map.subrefMexCountByTech][iFactoryTechLevel][1] == 0)) then
                    if bDebugMessages == true then LOG(sFunctionRef..': Will try and upgrade factory '..oFactory.UnitId..M28UnitInfo.GetUnitLifetimeCount(oFactory)) end
                    if ConsiderUpgrading() then return sBPIDToBuild end
                else
                    local iHighestOtherLandOrAirTech = 0

                    if M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subreftoLZOrWZAlliedUnits]) == false then
                        local tOtherFactoriesInZone = EntityCategoryFilterDown(M28UnitInfo.refCategoryFactory,  tLZTeamData[M28Map.subreftoLZOrWZAlliedUnits])
                        if M28Utilities.IsTableEmpty(tOtherFactoriesInZone) == false then
                            for iOtherFactory, oOtherFactory in tOtherFactoriesInZone do
                                iHighestOtherLandOrAirTech = math.max(iHighestOtherLandOrAirTech, M28UnitInfo.GetUnitTechLevel(oOtherFactory))
                            end
                        end
                    end
                    if iHighestOtherLandOrAirTech <= iFactoryTechLevel then
                        if bDebugMessages == true then LOG(sFunctionRef..': Dont have any factories with a higher tech level so will try upgrading this factory, factory='..oFactory.UnitId..M28UnitInfo.GetUnitLifetimeCount(oFactory)) end
                        if ConsiderUpgrading() then return sBPIDToBuild end
                    end

                end
            end
        end

        --Early game - get combat units in proportion to engineers at T1 if enemy relatively nearby spawn and aren't close to overflowing, or are in t1 spam mode and already have several engineers being built in factories in this zone
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if bDebugMessages == true then LOG(sFunctionRef..': Compat proportionate to engineers if enemy near spawn, Time='..GetGameTimeSeconds()..'; Dist to enemy base='..M28Utilities.GetDistanceBetweenPositions(tLZTeamData[M28Map.reftClosestEnemyBase], tLZData[M28Map.subrefMidpoint])..'; bHaveLowMass='..tostring(bHaveLowMass)..'; Av mass%='..M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored]..'; Net mass='..M28Team.tTeamData[iTeam][M28Team.subrefiTeamNetMass]..'; refbAdjZonesWantEngiForUnbuiltMex='..tostring(tLZTeamData[M28Map.refbAdjZonesWantEngiForUnbuiltMex] or false)) end
        if iFactoryTechLevel <= 2 and GetGameTimeSeconds() <= 480 and not(tLZTeamData[M28Map.refbBaseInSafePosition]) and aiBrain[M28Map.refbCanPathToEnemyBaseWithLand] and
                (tLZTeamData[M28Map.subrefLZbCoreBase] and (bHaveLowMass or M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] < 0.4 or (M28Team.tTeamData[iTeam][M28Team.subrefiTeamNetMass] < 0 and aiBrain:GetEconomyStoredRatio('MASS') < 0.8)) and M28Utilities.GetDistanceBetweenPositions(tLZTeamData[M28Map.reftClosestEnemyBase], tLZData[M28Map.subrefMidpoint]) < 450) or
                (M28Conditions.ZoneWantsT1Spam(tLZTeamData, iTeam) and M28Conditions.GetNumberOfUnitsMeetingCategoryUnderConstructionInLandOrWaterZone(tLZTeamData, M28UnitInfo.refCategoryEngineer, false) >= math.min(5, math.max(4, M28Conditions.GetNumberOfConstructedUnitsMeetingCategoryInZone(tLZTeamData, M28UnitInfo.refCategoryLandFactory)) * 0.5)) then
            if iFactoryTechLevel == 1 then
                local iLifetimeEngineers = M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryEngineer)
                local iLifetimeLandCombat = M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryLandCombat)
                if bDebugMessages == true then LOG(sFunctionRef..': Lifetime combat='..iLifetimeLandCombat..'; Lifetime engi='..iLifetimeEngineers) end
                if GetGameTimeSeconds() >= 150 or iLifetimeEngineers >= 7 or M28Map.iMapSize < 512 or M28Conditions.GetNumberOfUnitsCurrentlyBeingBuiltOfCategoryInZone(tLZTeamData, M28UnitInfo.refCategoryEngineer) >= 3 or M28UnitInfo.GetUnitLifetimeCount(oFactory) >= 3 then
                    if iLifetimeLandCombat < math.max(5, iLifetimeEngineers) and (iLifetimeEngineers > 20 or not(tLZTeamData[M28Map.refbAdjZonesWantEngiForUnbuiltMex]) or iLifetimeLandCombat < iLifetimeEngineers * 0.2 or tLZTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ]) and aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryLandCombat) < aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryEngineer) then
                        --Larger maps need to be careful we dont underbuild engineers early on
                        --If have fewer than 2 tanks for each t1 arti then restrict to only building tanks
                        local iCombatCategoryWanted
                        --Aeon - get scouts to use in combat role
                        if EntityCategoryContains(categories.AEON + categories.UEF, oFactory.UnitId) and tLZTeamData[M28Map.subrefLZbCoreBase] and aiBrain[M28Overseer.refiCombatLandScoutThreshold] > 0 and aiBrain[M28Overseer.refiCombatLandScoutThreshold] > M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryLandScout) then
                            iCombatCategoryWanted = M28UnitInfo.refCategoryLandScout
                        elseif iLifetimeLandCombat <= 5 or aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryLandCombat - categories.INDIRECTFIRE) / iLifetimeLandCombat < 0.65 then
                            iCombatCategoryWanted = M28UnitInfo.refCategoryLandCombat - categories.INDIRECTFIRE
                        else
                            iCombatCategoryWanted = M28UnitInfo.refCategoryLandCombat
                        end
                        if iLifetimeEngineers > 15 or not(tLZTeamData[M28Map.subrefTbWantBP]) or not(bHaveLowPower) or tLZTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ] then
                            if bDebugMessages == true then LOG(sFunctionRef..': Will get main combat category wanted as should have enough engineers') end
                            if ConsiderBuildingCategory(iCombatCategoryWanted) then return sBPIDToBuild end
                        elseif GetEngiCountInZone() > math.min(6, aiBrain[M28Economy.refiGrossMassBaseIncome] * 3) then
                            if bDebugMessages == true then LOG(sFunctionRef..': Have enough engineers to handle our mass so will get combat category') end
                            if ConsiderBuildingCategory(iCombatCategoryWanted) then return sBPIDToBuild end
                        end
                    end
                end
            end
            --Consider land scouts to accompany the early combat
            if bDebugMessages == true then LOG(sFunctionRef..': Checking if want land scout, tLZTeamData[M28Map.refbWantLandScout]='..tostring(tLZTeamData[M28Map.refbWantLandScout])..'; Radar coverage='..tLZTeamData[M28Map.refiRadarCoverage]..'; Does enemy have omni='..tostring((M28Team.tTeamData[iTeam][M28Team.subrefbEnemyHasOmni]))) end
            if (tLZTeamData[M28Map.refbWantLandScout] or (tLZTeamData[M28Map.refiRadarCoverage] <= 30 and iFactoryTechLevel == 1 and tLZTeamData[M28Map.subrefLZbCoreBase] and (oFactory[refiTotalBuildCount] <= 10 and (EntityCategoryContains(categories.SERAPHIM, oFactory.UnitId) and M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryLandScout) <= 2 + 3 * M28Map.iMapSize / 256 and aiBrain[M28Economy.refiOurHighestFactoryTechLevel] == 1) or (M28Conditions.GetFactoryLifetimeCount(oFactory, M28UnitInfo.refCategoryLandScout) == 0 and M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryLandScout) <= 3)))) and tLZTeamData[M28Map.refiRadarCoverage] <= 20  and not (bDontConsiderLandScouts) then
                local iLifetimeScout = M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryLandScout)
                if iLifetimeScout <= 5 and M28Conditions.GetFactoryLifetimeCount(oFactory, M28UnitInfo.refCategoryLandScout) < math.min(2, M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryLandCombat)) then
                    if ConsiderBuildingCategory(M28UnitInfo.refCategoryLandScout) then return sBPIDToBuild end
                end
            end
        end

        --Engineers if we dont have low mass, and want more, or if have adj zones where can build mexes and are at T1
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        local bNeedCurTech = true
        for iCurTech = 1, iFactoryTechLevel do
            if tLZTeamData[M28Map.subrefSpareBPByTech][iCurTech] > 0 then
                bNeedCurTech = false
                break
            end
        end
        if bDebugMessages == true then LOG(sFunctionRef .. ': iCurrentConditionToTry=' .. iCurrentConditionToTry .. '; about to consider getting engineers, do we have low mass=' .. tostring(bHaveLowMass) .. '; Highest team tech level=' .. M28Team.tTeamData[iTeam][M28Team.subrefiHighestFriendlyFactoryTech] .. '; bHaveHighestLZTech=' .. tostring(bHaveHighestLZTech) .. '; bNeedCurTech=' .. tostring(bNeedCurTech) .. '; iFactoryTechLevel=' .. iFactoryTechLevel .. '; Lowest % mass stored=' .. M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored]) end
        if bNeedCurTech and not (bHaveLowMass) and (tLZTeamData[M28Map.subrefLZbCoreBase] or aiBrain:GetEconomyStoredRatio('MASS') >= 0.15) and (iFactoryTechLevel >= M28Team.tTeamData[iTeam][M28Team.subrefiHighestFriendlyFactoryTech] or M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.5) then
            --Minor zone - if already have 10+ engineers in this zone and factory has built 4+ units then dont get more
            if bDebugMessages == true then LOG(sFunctionRef..': Will consider more engineers unless this is a minor zone that already has lots') end
            if tLZTeamData[M28Map.subrefLZbCoreBase] or oFactory[refiTotalBuildCount] < 5 or GetEngiCountInZone() < 10 or aiBrain:GetEconomyStoredRatio('MASS') >= 0.95 then
                if bDebugMessages == true then LOG(sFunctionRef .. ': Will try to build engineer') end
                if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then return sBPIDToBuild end
            end
        end

        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if iFactoryTechLevel == 1 and tLZTeamData[M28Map.refbAdjZonesWantEngiForUnbuiltMex] then
            if bDebugMessages == true then LOG(sFunctionRef..': Will get engineer for adjacent zones') end
            if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then return sBPIDToBuild end
        end

        --Engineers if we have few engineers in the current land zone (or an adjacent zone wants them urgently) and want more, and no adjacent enemies
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if bDebugMessages == true then LOG(sFunctionRef .. ': iCurrentConditionToTry=' .. iCurrentConditionToTry .. '; Will consider if we want more engis due to only having a few in the land zone, bNeedCurTech=' .. tostring(bNeedCurTech) .. '; tLZTeamData[M28Map.subrefTThreatEnemyCombatTotal]=' .. tLZTeamData[M28Map.subrefTThreatEnemyCombatTotal]..'; tLZTeamData[M28Map.subrefLZbCoreBase]='..tostring(tLZTeamData[M28Map.subrefLZbCoreBase])) end
        if bNeedCurTech and not (tLZTeamData[M28Map.subrefTThreatEnemyCombatTotal] > 10) and (iFactoryTechLevel >= 3 or not(bHaveLowMass) or not(M28Map.bIsLowMexMap)) then
            local iEngisWanted = 3
            if tLZTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ] then
                iEngisWanted = 2
                if bDebugMessages == true then LOG(sFunctionRef..': Want only 2 engis in zone due to nearby enemies') end
            elseif tLZTeamData[M28Map.subrefLZbCoreBase] or not(bHaveLowMass) then
                if M28Team.tTeamData[iTeam][M28Team.subrefiTeamGrossMass] > 3 then
                    iEngisWanted = math.min(6, math.ceil(aiBrain[M28Economy.refiGrossMassBaseIncome]))
                end
                if not (tLZTeamData[M28Map.subrefLZbCoreBase]) then
                    iEngisWanted = math.max(2, iEngisWanted * 0.5)
                    if bDebugMessages == true then LOG(sFunctionRef..': Limiting engis wanted to 2 or half of normal as not a core base') end
                end
            end
            if M28Utilities.bLoudModActive or M28Utilities.bQuietModActive then
                if bHaveLowMass then iEngisWanted = iEngisWanted * 0.6
                else
                    iEngisWanted = iEngisWanted * 0.75
                end
            end
            if bDebugMessages == true then LOG(sFunctionRef..': iEngisInLZ='..GetEngiCountInZone()..'; iEngisWanted='..iEngisWanted) end
            if GetEngiCountInZone() < iEngisWanted then
                if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then return sBPIDToBuild end
            elseif GetEngiCountInZone() < 10 then
                local bAdjacentLandZoneWantsEngineers = tLZTeamData[M28Map.refbAdjZonesWantEngiForUnbuiltMex]
                if not(bAdjacentLandZoneWantsEngineers) and M28Utilities.IsTableEmpty(tLZData[M28Map.subrefLZAdjacentLandZones]) == false then
                    for _, iAdjLZ in tLZData[M28Map.subrefLZAdjacentLandZones] do
                        local tAdjLZTeamData = M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iAdjLZ][M28Map.subrefLZTeamData][iTeam]
                        if tAdjLZTeamData[M28Map.refbAdjZonesWantEngiForUnbuiltMex] and not(tAdjLZTeamData[M28Map.subrefbDangerousEnemiesInThisLZ]) and tAdjLZTeamData[M28Map.refiModDistancePercent] <= 0.5 and M28Utilities.IsTableEmpty(tAdjLZTeamData[M28Map.subrefTEngineersTravelingHere]) then
                            bAdjacentLandZoneWantsEngineers = true
                            break
                        end
                    end
                end
                if bDebugMessages == true then LOG(sFunctionRef..': do we have adjacent zone wanting engineers='..tostring(bAdjacentLandZoneWantsEngineers)) end
                if bAdjacentLandZoneWantsEngineers then
                    if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then return sBPIDToBuild end
                end
            end
        end

        --MAA builder if nearby enemy strat and we lack significant groundAA
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if iFactoryTechLevel >= 2 and not(bDontConsiderBuildingMAA) and M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] >= 1700 and tLZTeamData[M28Map.subrefLZThreatAllyGroundAA] <= math.min(2500, M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat]) and M28Team.tTeamData[iTeam][M28Team.subrefiOurAirAAThreat] <= 2500 and not(tLZTeamData[M28Map.subrefbDangerousEnemiesInThisLZ]) then
            local iNearbyMAAThreat = (tLZTeamData[M28Map.subrefLZThreatAllyMAA] or 0)
            local bNearbyEnemyCombatThreat = false
            local bNearbyEnemyAirToGroundThreat = false
            if tLZTeamData[M28Map.refiEnemyAirToGroundThreat] > 0 then bNearbyEnemyAirToGroundThreat = true end
            if M28Utilities.IsTableEmpty(tLZData[M28Map.subrefLZAdjacentLandZones]) == false then
                for _, iAdjLZ in tLZData[M28Map.subrefLZAdjacentLandZones] do
                    local tAdjLZTeamData = M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iAdjLZ][M28Map.subrefLZTeamData][iTeam]
                    if not(bNearbyEnemyCombatThreat) and tAdjLZTeamData[M28Map.subrefbDangerousEnemiesInThisLZ] then bNearbyEnemyCombatThreat = true end
                    if not(bNearbyEnemyAirToGroundThreat) and tAdjLZTeamData[M28Map.refiEnemyAirToGroundThreat] > 0 then bNearbyEnemyAirToGroundThreat = true end
                    iNearbyMAAThreat = iNearbyMAAThreat + (tAdjLZTeamData[M28Map.subrefLZThreatAllyMAA] or 0)
                end
            end
            if bDebugMessages == true then LOG(sFunctionRef..': Higher priority MAA for potential enemy strat threat, iNearbyMAAThreat='..iNearbyMAAThreat..'; bNearbyEnemyAirToGroundThreat='..tostring(bNearbyEnemyAirToGroundThreat)..'; bNearbyEnemyCombatThreat='..tostring(bNearbyEnemyCombatThreat)) end
            if iNearbyMAAThreat < math.min(1200, M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat]) and (bNearbyEnemyAirToGroundThreat or not(bNearbyEnemyCombatThreat)) then
                if bDebugMessages == true then LOG(sFunctionRef..': Want to build MAA due to potential enemy strat threat') end
                if ConsiderBuildingCategory(M28UnitInfo.refCategoryMAA) then return sBPIDToBuild end
            end
        end

        --Land scouts due to priority units wanting scout
        if M28Conditions.IsTableOfUnitsStillValid(M28Team.tLandSubteamData[iLandSubteam][M28Team.reftoPriorityUnitsWantingLandScout]) and not(aiBrain[M28Overseer.refbCloseToUnitCap]) and tLZTeamData[M28Map.refiRadarCoverage] <= 550 and not (bDontConsiderLandScouts) and M28Conditions.GetNumberOfUnitsCurrentlyBeingBuiltOfCategoryInZone(tLZTeamData, M28UnitInfo.refCategoryLandScout) == 0 then
            --Check we are in same plateau as a unit wanting priority scout, and the unit is within 550 of here
            local bHaveUnitToGetScoutFor = false
            for iUnit, oUnit in M28Team.tLandSubteamData[iLandSubteam][M28Team.reftoPriorityUnitsWantingLandScout] do
                if oUnit[M28Land.refiCurrentAssignmentPlateauAndLZ][1] == iPlateau and M28UnitInfo.IsUnitValid(oUnit) and (not(oUnit[M28Land.refiTimeLastBuiltLandScoutForUnit]) or GetGameTimeSeconds() - oUnit[M28Land.refiTimeLastBuiltLandScoutForUnit] >= 40) and M28Utilities.GetDistanceBetweenPositions(oUnit:GetPosition(), oFactory:GetPosition()) <= 550 then
                    if bDebugMessages == true then LOG(sFunctionRef..': Have unit wanting priority land scout, oUnit='..oUnit.UnitId..M28UnitInfo.GetUnitLifetimeCount(oUnit)..' assigned to P'..oUnit[M28Land.refiCurrentAssignmentPlateauAndLZ][1]..'Z'..oUnit[M28Land.refiCurrentAssignmentPlateauAndLZ][2]..'; Dist to factory='..M28Utilities.GetDistanceBetweenPositions(oUnit:GetPosition(), oFactory:GetPosition())..'; Does the LZ it is assigned to want land scouts='..tostring(M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][oUnit[M28Land.refiCurrentAssignmentPlateauAndLZ][2]][M28Map.subrefLZTeamData][iTeam][M28Map.refbWantLandScout])) end
                    bHaveUnitToGetScoutFor = true
                    oUnit[M28Land.refiTimeLastBuiltLandScoutForUnit] = GetGameTimeSeconds()
                    break
                end
            end
            if bHaveUnitToGetScoutFor then
                if ConsiderBuildingCategory(M28UnitInfo.refCategoryLandScout) then return sBPIDToBuild end
            end
        end


        --Other actions - dont do unless we have lots of mass if this is lower than our highest tech level
        if bHaveHighestLZTech and (iFactoryTechLevel >= aiBrain[M28Economy.refiOurHighestLandFactoryTech] or (not (bHaveLowMass) and (oFactory[refiTotalBuildCount] <= 5 or aiBrain:GetEconomyStoredRatio('MASS') >= 0.2 or aiBrain:GetEconomyStored('MASS') >= 400 or iFactoryTechLevel >= 3 or not(tLZData[M28Map.subrefLZIslandRef] == NavUtils.GetLabel(M28Map.refPathingTypeLand, tLZTeamData[M28Map.reftClosestFriendlyBase]))))) and (not(M28Map.bIsLowMexMap) or iFactoryTechLevel >= 3 or tLZTeamData[M28Map.subrefMexCountByTech][3] > 0 or not(bHaveLowMass)) then
            --Combat or MAA if this LZ needs more units
            iCurrentConditionToTry = iCurrentConditionToTry + 1
            --if tLZTeamData[M28Map.subrefbLZWantsSupport] then
            if bDebugMessages == true then
                LOG(sFunctionRef .. ': Have highest LZ tech, iCurrentConditionToTry=' .. iCurrentConditionToTry .. '; Will see if we want to get support for this LZ, bDontConsiderBuildingMAA=' .. tostring(bDontConsiderBuildingMAA) .. '; bConsiderMobileShields=' .. tostring(bConsiderMobileShields) .. '; bConsiderMobileStealths=' .. tostring(bConsiderMobileStealths))
            end
            local iCategoryToGet = GetLandZoneSupportCategoryWanted(oFactory, iTeam, iPlateau, iLandZone, iLandZone, bDontConsiderBuildingMAA, bConsiderMobileShields, bConsiderMobileStealths, bConsiderAbsolvers, bSaveMassDueToEnemyFirebaseOrOurExperimental, nil, bDontConsiderLandScouts)
            if iCategoryToGet then
                if ConsiderBuildingCategory(iCategoryToGet) then return sBPIDToBuild end
            end


            --Upgrade factory if this LZ is lagging behind tech wise (but not if low mass if this isn't a core LZ
            iCurrentConditionToTry = iCurrentConditionToTry + 1
            if iFactoryTechLevel == 1 and M28Team.tTeamData[iTeam][M28Team.subrefiHighestFriendlyLandFactoryTech] >= 2 and (iLandFactoriesInLZ >= 4 or M28Team.tTeamData[iTeam][M28Team.subrefiHighestFriendlyLandFactoryTech] == 3) and (tLZTeamData[M28Map.subrefLZbCoreBase] or (tLZTeamData[M28Map.subrefLZCoreExpansion] and (not (bHaveLowMass) or M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauIslandMexCount][NavUtils.GetLabel(M28Map.refPathingTypeLand, tLZData[M28Map.subrefMidpoint])] >= 7)))

                    --AI brain specific adjustments
                    and (not(aiBrain[M28Overseer.refbPrioritiseAir] or aiBrain[M28Overseer.refbPrioritiseLowTech] or aiBrain[M28Overseer.refbPrioritiseNavy]) or (not(bHaveLowMass) and iFactoryTechLevel < aiBrain[M28Economy.refiOurHighestLandFactoryTech]) or iFactoryTechLevel < M28Team.tTeamData[iTeam][M28Team.subrefiHighestFriendlyLandFactoryTech] - 1 or iFactoryTechLevel < aiBrain[M28Economy.refiOurHighestAirFactoryTech] - 1)

            then
                --Dont upgrade to T2 if we have T1 mexes in the LZ, no upgrading mexes, and less than 35 gross mass per tick
                if M28Team.tTeamData[iTeam][M28Team.subrefiTeamGrossMass] >= 3.5 or tLZTeamData[M28Map.subrefMexCountByTech][2] + tLZTeamData[M28Map.subrefMexCountByTech][3] * 3 >= 3 or tLZTeamData[M28Map.subrefMexCountByTech][1] == 0 or M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subreftoActiveUpgrades]) == false then

                    local bUpgradingLandFactory = false
                    if M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subreftoActiveUpgrades]) == false then
                        for iUnit, oUnit in tLZTeamData[M28Map.subreftoActiveUpgrades] do
                            if EntityCategoryContains(M28UnitInfo.refCategoryLandFactory, oUnit.UnitId) then
                                if bDebugMessages == true then
                                    LOG(sFunctionRef .. ': Have an active land factory upgrade=' .. oUnit.UnitId .. M28UnitInfo.GetUnitLifetimeCount(oUnit.UnitId) .. '; Is unit valid=' .. tostring(M28UnitInfo.IsUnitValid(oUnit)) .. '; Fraction complete=' .. oUnit:GetFractionComplete() .. '; Work progress=' .. oUnit:GetWorkProgress())
                                end
                                bUpgradingLandFactory = true
                                break
                            end
                        end
                    end
                    if not (bUpgradingLandFactory) then
                        if ConsiderUpgrading() then return sBPIDToBuild end
                    end
                end
            end

            --Maintain basic level of unit threat ratios
            --DF tanks of the cur tech level or higher - get more if we have fewer of these than we have engineers of this tech level and we have less DF threat than the enemy overall
            iCurrentConditionToTry = iCurrentConditionToTry + 1
            if bDebugMessages == true then LOG(sFunctionRef..': Maintaining basic threat ratios - bCanPathToEnemyWithLand='..tostring(bCanPathToEnemyWithLand)..'; bSaveMassDueToEnemyFirebaseOrOurExperimental='..tostring(bSaveMassDueToEnemyFirebaseOrOurExperimental)..'; iFactoryTechLevel='..iFactoryTechLevel..'; If have fewer than 9 DF units and fewer than no. of engineers then will build more, cur DF units of this tech level='..aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryMobileLand * categories.DIRECTFIRE * M28UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel))) end
            if bCanPathToEnemyWithLand and not (bSaveMassDueToEnemyFirebaseOrOurExperimental) and iFactoryTechLevel >= 2 then
                --First consider ratio of combat vs engineers
                local iIndirectFireOfThisTech = aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryIndirect * categories.MOBILE * categories.LAND * M28UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel))
                if math.min(9, aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryEngineer * M28UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel))) > aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryMobileLand * categories.DIRECTFIRE * M28UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel)) then
                    if bDebugMessages == true then
                        LOG(sFunctionRef .. ': Have fewer DF tanks than engineers so want to get more skirmishers or (if cant build any) DF tanks')
                    end

                    if (not(tLZTeamData[M28Map.refbEnemiesInNearbyPlateau]) or iIndirectFireOfThisTech >= 8) and not(aiBrain.M28Easy) and ConsiderBuildingCategory(iSkirmisherCategory) then
                        return sBPIDToBuild
                    else
                        --Cant get skirmishers (or dont want to), so get indirect fire if we have none before getting normal tnaks

                        if (iIndirectFireOfThisTech == 0 or (tLZTeamData[M28Map.refbEnemiesInNearbyPlateau] and iIndirectFireOfThisTech < 8)) and ConsiderBuildingCategory(M28UnitInfo.refCategoryIndirect * M28UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel)) then
                            return sBPIDToBuild
                        elseif ConsiderBuildingCategory(M28UnitInfo.refCategoryLandCombat * M28UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel)) then
                            return sBPIDToBuild
                        end
                    end
                end
                --Next consider ratio of direct fire vs indirect, to handle cases where we have way too much DF or way too much indirect fire, provided we can path to enemy base
                if iFactoryTechLevel >= 2 and (iIndirectFireOfThisTech <= 6 or iIndirectFireOfThisTech >= 50 or (iIndirectFireOfThisTech <= 15 and iFactoryTechLevel >= 3 and EntityCategoryContains(categories.UEF, oFactory.UnitId))) and tLZData[M28Map.subrefLZIslandRef] == NavUtils.GetLabel(M28Map.refPathingTypeLand, tLZTeamData[M28Map.reftClosestEnemyBase]) then
                    local iDirectFireOfThisTech = aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryLandCombat * M28UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel))
                    if bDebugMessages == true then LOG(sFunctionRef..': Considering higher priority DF vs indirect proportion builder since we can path to closest enemy base from here, iDirectFireOfThisTech='..iDirectFireOfThisTech..'; iIndirectFireOfThisTech='..iIndirectFireOfThisTech) end
                    --UEF - prioritise spearheads
                    if EntityCategoryContains(categories.UEF, oFactory.UnitId) and iFactoryTechLevel >= 3 and iIndirectFireOfThisTech <= 8 and iIndirectFireOfThisTech < 2 * iDirectFireOfThisTech and ConsiderBuildingCategory(M28UnitInfo.refCategoryMML * categories.TECH3) then
                        if bDebugMessages == true then LOG(sFunctionRef..': will get spearheads in proportion to DF as UEF') end
                        return sBPIDToBuild
                    elseif iDirectFireOfThisTech > iIndirectFireOfThisTech * 7 and iDirectFireOfThisTech >= 6 and (iFactoryTechLevel < 3 or iDirectFireOfThisTech > iIndirectFireOfThisTech * 10) then
                        if ConsiderBuildingCategory(M28UnitInfo.refCategoryIndirect * M28UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel)) then return sBPIDToBuild end
                    elseif iIndirectFireOfThisTech > 4 * iDirectFireOfThisTech and iIndirectFireOfThisTech >= 50 and (iIndirectFireOfThisTech > 6 * iDirectFireOfThisTech or M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subreftoAllNearbyEnemyT2ArtiUnits])) then
                        if ConsiderBuildingCategory(M28UnitInfo.refCategoryLandCombat * M28UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel)) then return sBPIDToBuild end
                    end
                end
            end

            iCurrentConditionToTry = iCurrentConditionToTry + 1
            if bDebugMessages == true then
                LOG(sFunctionRef .. ': Checking threat ratios for if we want more indirect, DF threat=' .. M28Team.tTeamData[iTeam][M28Team.subrefiAlliedDFThreat] .. '; Indirect=' .. M28Team.tTeamData[iTeam][M28Team.subrefiAlliedIndirectThreat])
            end
            local bHaveTooMuchIndirectVsDirect = false
            if not (bSaveMassDueToEnemyFirebaseOrOurExperimental) then
                local iIndirectRatioWanted = 0
                if iFactoryTechLevel == 1 then
                    iIndirectRatioWanted = 6
                elseif iFactoryTechLevel == 2 then
                    iIndirectRatioWanted = 6 --MMLs are better now
                elseif iFactoryTechLevel == 3 then
                    local iCurDFCombat = aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryLandCombat + iSkirmisherCategory)

                    if EntityCategoryContains(categories.AEON, oFactory.UnitId) then
                        iIndirectRatioWanted = 7
                    else
                        iIndirectRatioWanted = 9
                    end
                    if iCurDFCombat >= 60 and not(M28Utilities.bLoudModActive or M28Utilities.bQuietModActive) then
                        --Adjust above gradually so dont end up spamming indirect
                        iIndirectRatioWanted = math.max(4, iIndirectRatioWanted - 5 * (iCurDFCombat - 59)/60)
                        if EntityCategoryContains(categories.AEON, oFactory.UnitId) then
                            iIndirectRatioWanted = iIndirectRatioWanted - 0.5
                        end
                    end
                    if (M28Utilities.bLoudModActive or M28Utilities.bQuietModActive) and iIndirectRatioWanted < 10 then
                        if iFactoryTechLevel == 2 then
                            if iIndirectRatioWanted < 7.5 then
                                iIndirectRatioWanted = math.min(7.5, iIndirectRatioWanted * 1.3)
                            end
                        else
                            --T3 mobile arti arent great in LOUD
                            iIndirectRatioWanted = math.min(10, iIndirectRatioWanted * 2)
                        end
                    end
                end
                if bDebugMessages == true then LOG(sFunctionRef..': Indirect threat ratio, bCanPathToEnemyWithLand='..tostring(bCanPathToEnemyWithLand)..', M28Team.tTeamData[iTeam][M28Team.subrefiAlliedDFThreat]='..M28Team.tTeamData[iTeam][M28Team.subrefiAlliedDFThreat]..'; M28Team.tTeamData[iTeam][M28Team.subrefiAlliedIndirectThreat]='..M28Team.tTeamData[iTeam][M28Team.subrefiAlliedIndirectThreat]..'; iIndirectRatioWanted='..iIndirectRatioWanted..'; bHaveLowMass='..tostring(bHaveLowMass)..'; Cur T3 DF and skrimisher count='..aiBrain:GetCurrentUnits((M28UnitInfo.refCategoryDFTank + M28UnitInfo.refCategorySkirmisher) * categories.TECH3)) end
                --Reduce threat value due to ACU
                if bCanPathToEnemyWithLand and M28Team.tTeamData[iTeam][M28Team.subrefiAlliedDFThreat] - 1500 * M28Team.tTeamData[iTeam][M28Team.subrefiActiveM28BrainCount] > M28Team.tTeamData[iTeam][M28Team.subrefiAlliedIndirectThreat] * iIndirectRatioWanted and (not (bHaveLowMass) or (iFactoryTechLevel >= 2 and M28Team.tTeamData[iTeam][M28Team.subrefiAlliedDFThreat] > M28Team.tTeamData[iTeam][M28Team.subrefiAlliedIndirectThreat] * iIndirectRatioWanted * 2 and aiBrain:GetCurrentUnits((M28UnitInfo.refCategoryDFTank + M28UnitInfo.refCategorySkirmisher) * M28UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel)) >= 30)) and (iFactoryTechLevel > 1 or GetGameTimeSeconds() >= 600 or M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryDFTank + M28UnitInfo.refCategorySkirmisher) >= 10) then
                    if bDebugMessages == true then
                        LOG(sFunctionRef .. ': Will try to build more indirect fire units if arent building any of this tech level or higher in this LZ')
                    end
                    if iFactoryTechLevel == 1 or (tLZTeamData[M28Map.refbEnemiesInNearbyPlateau] and iFactoryTechLevel >= aiBrain[M28Economy.refiOurHighestLandFactoryTech]) or M28Conditions.GetNumberOfUnitsMeetingCategoryUnderConstructionInLandOrWaterZone(tLZTeamData, M28UnitInfo.refCategoryIndirect * M28UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel)) == 0 then
                        if iFactoryTechLevel <= 2 or tLZTeamData[M28Map.refbEnemiesInNearbyPlateau] or not(M28Overseer.bUnitRestrictionsArePresent) then
                            if ConsiderBuildingCategory(M28UnitInfo.refCategoryIndirect) then return sBPIDToBuild end
                            --Exclude T1 incase unit restrictions present
                        elseif ConsiderBuildingCategory(M28UnitInfo.refCategoryIndirect - categories.TECH1) then return sBPIDToBuild
                        end
                    end
                elseif tLZTeamData[M28Map.refbEnemiesInNearbyPlateau] and iFactoryTechLevel >= aiBrain[M28Economy.refiOurHighestLandFactoryTech] then
                    if ConsiderBuildingCategory(M28UnitInfo.refCategoryIndirect) then return sBPIDToBuild end
                else
                    if iFactoryTechLevel >= 3 and M28Team.tTeamData[iTeam][M28Team.subrefiAlliedIndirectThreat] >= 3000 and not(tLZTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ]) and M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subreftEnemyFirebasesInRange]) and M28Team.tTeamData[iTeam][M28Team.subrefiAlliedDFThreat] * 3.5 < M28Team.tTeamData[iTeam][M28Team.subrefiAlliedIndirectThreat] * iIndirectRatioWanted then
                        bHaveTooMuchIndirectVsDirect = true
                    end
                    if bDebugMessages == true then LOG(sFunctionRef..': If we have more than 2.5 times the indirect fire ratio wanted, and are at T3, will consider getting more direct fire when we consider support zone categories, bHaveTooMuchIndirectVsDirect='..tostring(bHaveTooMuchIndirectVsDirect)) end
                end
            end

            iCurrentConditionToTry = iCurrentConditionToTry + 1
            if bCanPathToEnemyWithLand and not (bHaveLowMass) and not (bDontConsiderBuildingMAA) then
                --Maintain MAA ratio vs overall combat threat - Only get MAA if we either have T2 land, or 50 gross mass, or enemy has air; max of 2 at a time
                if bDebugMessages == true then
                    LOG(sFunctionRef .. ': Checking MAA ratio overall, M28Team.tTeamData[iTeam][M28Team.subrefiTeamGrossMass]=' .. M28Team.tTeamData[iTeam][M28Team.subrefiTeamGrossMass] .. '; M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat]=' .. M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] .. '; M28Team.tAirSubteamData[iAirSubteam][M28Team.refbFarBehindOnAir]=' .. tostring(M28Team.tAirSubteamData[iAirSubteam][M28Team.refbFarBehindOnAir]) .. '; M28Team.tTeamData[iTeam][M28Team.subrefiAlliedMAAThreat]=' .. M28Team.tTeamData[iTeam][M28Team.subrefiAlliedMAAThreat])
                end
                if iFactoryTechLevel >= 2 or M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.reftoAllEnemyAir]) == false or M28Team.tTeamData[iTeam][M28Team.subrefiTeamGrossMass] >= 5 then
                    local iThreatFactor = 20
                    if M28Team.tAirSubteamData[iAirSubteam][M28Team.refbFarBehindOnAir] and M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] >= 4000 then
                        iThreatFactor = 8
                    elseif not (M28Team.tAirSubteamData[iAirSubteam][M28Team.refbHaveAirControl]) and (M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] >= 2000 or M28Team.tAirSubteamData[iAirSubteam][M28Team.refbFarBehindOnAir]) then
                        iThreatFactor = 13
                    end
                    if M28Team.tTeamData[iTeam][M28Team.subrefiAlliedDFThreat] + M28Team.tTeamData[iTeam][M28Team.subrefiAlliedIndirectThreat] > M28Team.tTeamData[iTeam][M28Team.subrefiAlliedMAAThreat] * iThreatFactor then
                        local iMAACat
                        if M28Conditions.WantT3MAAInsteadOfT2(oFactory, iTeam) then
                            iMAACat = M28UnitInfo.refCategoryMAA
                        else
                            iMAACat = M28UnitInfo.refCategoryMAA - categories.TECH3
                        end
                        if M28Conditions.GetNumberOfUnitsMeetingCategoryUnderConstructionInLandOrWaterZone(tLZTeamData, iMAACat) <= 1 then
                            if bDebugMessages == true then
                                LOG(sFunctionRef .. ': Will get MAA3')
                            end
                            if ConsiderBuildingCategory(iMAACat) then
                                return sBPIDToBuild
                            end
                        end
                    end
                end
            end

            --Be building engineers in 1/4 of land facs if we have a shortfall for this land zone
            if iLandFactoriesInLZ > 1 and (M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] > 0.01 or M28Team.tTeamData[iTeam][M28Team.refbDefendAgainstArti]) and tLZTeamData[M28Map.subrefTbWantBP] then
                local iEngisUnderConstruction = M28Conditions.GetNumberOfUnitsMeetingCategoryUnderConstructionInLandOrWaterZone(tLZTeamData, M28UnitInfo.refCategoryEngineer)
                if iEngisUnderConstruction < iLandFactoriesInLZ * 0.25 and (not(M28Utilities.bLoudModActive or M28Utilities.bQuietModActive) or iEngisUnderConstruction < iLandFactoriesInLZ * 0.2) then
                    if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then
                        return sBPIDToBuild
                    end
                end
            end

            --Combat or MAA if we have a LZ within half of dist between us and nearest enemy that wants more units
            iCurrentConditionToTry = iCurrentConditionToTry + 1
            local iEnemyPlateau, iEnemyLandZone = M28Map.GetPlateauAndLandZoneReferenceFromPosition(M28Map.GetPrimaryEnemyBaseLocation(aiBrain))
            if iEnemyPlateau == iPlateau then
                local iDistToEnemyBaseToConsider
                --Is enemy in same island?
                local iIsland = NavUtils.GetTerrainLabel(M28Map.refPathingTypeLand, oFactory:GetPosition())
                if bDebugMessages == true then
                    local iEnemyBaseSegmentX, iEnemyBaseSegmentZ = M28Map.GetPathingSegmentFromPosition(M28Map.GetPrimaryEnemyBaseLocation(aiBrain))
                    LOG(sFunctionRef..': Primary enemy base location='..repru(M28Map.GetPrimaryEnemyBaseLocation(aiBrain))..'; Land label='..(NavUtils.GetLabel(M28Map.refPathingTypeLand, M28Map.GetPrimaryEnemyBaseLocation(aiBrain)) or 'nil')..'; iEnemyLandZone='..(iEnemyLandZone or 'nil')..'; tPathingPlateauAndLZOverride[iX][iZ]='..repru(M28Map.tPathingPlateauAndLZOverride[(M28Map.GetPrimaryEnemyBaseLocation(aiBrain)[1] or 0)][(M28Map.GetPrimaryEnemyBaseLocation(aiBrain)[3] or 0)])..'; iEnemyBaseSegmentX'..iEnemyBaseSegmentX..'; , iEnemyBaseSegmentZ='..iEnemyBaseSegmentZ..'; tLandZoneBySegment='..(M28Map.tLandZoneBySegment[iEnemyBaseSegmentX][iEnemyBaseSegmentZ] or 'nil'))
                end
                if NavUtils.GetTerrainLabel(M28Map.refPathingTypeLand, M28Map.GetPrimaryEnemyBaseLocation(aiBrain)) == iIsland and (iEnemyLandZone or 0) > 0 then
                    if not (bHaveLowMass) then
                        if M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.5 then
                            iDistToEnemyBaseToConsider = M28Map.GetTravelDistanceBetweenLandZones(iPlateau, iLandZone, iEnemyLandZone, true)
                            --Campaign specific - if no active upgrades then increase the dist further (as we may be tech capped/unable to build experimentals)
                            if (M28Map.bIsCampaignMap or M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.8) and M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.subreftTeamUpgradingHQs]) and M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.subreftTeamUpgradingMexes]) and not(M28Conditions.HaveLowPower(iTeam)) then
                                iDistToEnemyBaseToConsider = math.max(500, iDistToEnemyBaseToConsider)
                            end
                        else
                            if bDebugMessages == true then LOG(sFunctionRef..': About to get travel distance to use based on dist to enemy base, iPlateau='..(iPlateau or 'nil')..'; iLandZone='..(iLandZone or 'nil')..'; iEnemyLandZone='..(iEnemyLandZone or 'nil')..'; iEnemyPlateau='..(iEnemyPlateau or 'nil')) end
                            iDistToEnemyBaseToConsider = M28Map.GetTravelDistanceBetweenLandZones(iPlateau, iLandZone, iEnemyLandZone, true) * 0.75
                        end
                        iDistToEnemyBaseToConsider = math.max(iDistToEnemyBaseToConsider, 250)

                    else
                        if bDebugMessages == true then LOG('About to get iDistToEnemyBaseToConsider for iPlateau='..(iPlateau or 'nil')..'; iLandZone='..(iLandZone or 'nil')..'; iEnemyLandZone='..(iEnemyLandZone or 'nil')) end
                        iDistToEnemyBaseToConsider = M28Map.GetTravelDistanceBetweenLandZones(iPlateau, iLandZone, iEnemyLandZone, true) * 0.5
                    end
                else
                    --enemy base is a dif island to ours or for some reason doesnt have a land zone, so want to control all of our island (within reason)
                    iDistToEnemyBaseToConsider = M28Utilities.GetDistanceBetweenPositions(tLZData[M28Map.subrefMidpoint], M28Map.GetPrimaryEnemyBaseLocation(aiBrain))
                end

                --Reduce distance to consider if we are building an experimental
                if iDistToEnemyBaseToConsider >= 200 then
                    if iFactoryTechLevel == 3 and bHaveLowMass and oFactory[refiTotalBuildCount] >= 5 and aiBrain:GetEconomyStored('MASS') < 600 and M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.subreftTeamEngineersBuildingExperimentals]) == false and not(tLZTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ]) then
                        if (iEnemyLandZone or 0) > 0 then
                            iDistToEnemyBaseToConsider = math.max(200,     (M28Map.GetTravelDistanceBetweenLandZones(iPlateau, iLandZone, iEnemyLandZone) or 0) * 0.3)
                        else
                            iDistToEnemyBaseToConsider = 200
                        end
                    end
                end
                local iOldDistToConsider = iDistToEnemyBaseToConsider
                if bHaveTooMuchIndirectVsDirect and iDistToEnemyBaseToConsider > 150 then
                    iDistToEnemyBaseToConsider = math.max(150, math.min(M28Map.iMapSize * 0.35, iDistToEnemyBaseToConsider * 0.75, 0.35 * M28Utilities.GetDistanceBetweenPositions(tLZData[M28Map.subrefMidpoint], M28Map.GetPrimaryEnemyBaseLocation(aiBrain))))
                    if bDebugMessages == true then LOG(sFunctionRef..': Reducing search distance for support categories') end
                end

                if M28Utilities.IsTableEmpty(tLZData[M28Map.subrefLZPathingToOtherLandZones]) == false then
                    local bDontConsiderPlayableArea = not(M28Map.bIsCampaignMap)
                    for iEntry, tLZPathing in tLZData[M28Map.subrefLZPathingToOtherLandZones] do
                        if bDebugMessages == true then
                            LOG(sFunctionRef .. ': About to check alternative LZ ' .. tLZPathing[M28Map.subrefLZNumber] .. '; iDistToEnemyBaseToConsider=' .. iDistToEnemyBaseToConsider .. '; tLZPathing[M28Map.subrefLZTravelDist]=' .. tLZPathing[M28Map.subrefLZTravelDist])
                        end
                        if tLZPathing[M28Map.subrefLZTravelDist] > iDistToEnemyBaseToConsider then
                            if bHaveTooMuchIndirectVsDirect and iDistToEnemyBaseToConsider < iOldDistToConsider then
                                if bDebugMessages == true then LOG(sFunctionRef..': Didnt find anything with shorter search range, will try and build direct fire, and failing that will increase search range') end
                                if (M28Utilities.bLoudModActive or M28Utilities.bQuietModActive) and iFactoryTechLevel >= 2 and categories.ual0204 and (not(M28Utilities.bQuietModActive) or iFactoryTechLevel == 2 or oFactory[refiTotalBuildCount] <= 5) and EntityCategoryContains(categories.AEON, oFactory.UnitId) then
                                    if iFactoryTechLevel == 2 then
                                        if GetBlueprintThatCanBuildOfCategory(oFactory:GetAIBrain(), M28UnitInfo.refCategorySniperBot * categories.TECH2, oFactory) then return sBPIDToBuild end
                                        --LOUD - keep building t2 sniperbots at t3 stage for a bit due to how good they are
                                    elseif not(M28Utilities.bQuietModActive) and iFactoryTechLevel == 3 and (oFactory[refiTotalBuildCount] <= 10 or math.random(1,3) == 1) then
                                        if ConsiderBuildingCategory(M28UnitInfo.refCategorySniperBot * categories.TECH2) then return sBPIDToBuild end
                                    end
                                end
                                if ConsiderBuildingCategory(M28UnitInfo.refCategoryDFTank) then return sBPIDToBuild end
                                iOldDistToConsider = iDistToEnemyBaseToConsider
                            else
                                break
                            end
                        end
                        if tLZPathing[M28Map.subrefLZTravelDist] <= iDistToEnemyBaseToConsider and (bDontConsiderPlayableArea or M28Conditions.IsLocationInPlayableArea(M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][tLZPathing[M28Map.subrefLZNumber]][M28Map.subrefMidpoint])) then
                            --if M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][tLZPathing[M28Map.subrefLZNumber]][M28Map.subrefLZTeamData][iTeam][M28Map.subrefbLZWantsSupport] then
                            --How far away is it?
                            if bDebugMessages == true then
                                LOG(sFunctionRef .. ': Considering whether to reinforce alternative LZ ' .. (tLZPathing[M28Map.subrefLZNumber] or 'nil') .. '; Travel dist=' .. (tLZPathing[M28Map.subrefLZTravelDist] or 'nil') .. '; iDistToEnemyBaseToConsider=' .. (iDistToEnemyBaseToConsider or 'nil') .. '; Size of this alt LZ in segments=' .. (M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][tLZPathing[M28Map.subrefLZNumber]][M28Map.subrefLZTotalSegmentCount] or 'nil'))
                            end
                            --if tLZPathing[M28Map.subrefLZTravelDist] <= iDistToEnemyBaseToConsider then
                            local iCategoryToGet = GetLandZoneSupportCategoryWanted(oFactory, iTeam, iPlateau, iLandZone, tLZPathing[M28Map.subrefLZNumber], bDontConsiderBuildingMAA, bConsiderMobileShields, bConsiderMobileStealths, bConsiderAbsolvers, bSaveMassDueToEnemyFirebaseOrOurExperimental, nil, bDontConsiderLandScouts)
                            if bDebugMessages == true then
                                LOG(sFunctionRef .. ': DO we have no category (i.e. false means we want to build something) for this alternative LZ ' .. tLZPathing[M28Map.subrefLZNumber] .. '=' .. tostring(iCategoryToGet == nil) .. '; bDontConsiderBuildingMAA=' .. tostring(bDontConsiderBuildingMAA))
                            end
                            if iCategoryToGet then
                                if bDebugMessages == true then
                                    LOG(sFunctionRef..': Have got a category to build based on the land zone '..tLZPathing[M28Map.subrefLZNumber])
                                    --LOG(sFunctionRef .. ': Will draw the LZ where we want more units in a rnadom colour')
                                    --M28Map.DrawSpecificLandZone(iPlateau, tLZPathing[M28Map.subrefLZNumber], math.random(1, 8))
                                end
                                if ConsiderBuildingCategory(iCategoryToGet) then
                                    if bDebugMessages == true then LOG(sFunctionRef..': Have got valid blueprint '..sBPIDToBuild..' to build') end
                                    return sBPIDToBuild
                                end
                            end
                        end
                    end
                end
            end

            --Do we have adjacent water with friendly units that wants MAA?
            iCurrentConditionToTry = iCurrentConditionToTry + 1
            if M28Utilities.IsTableEmpty(tLZData[M28Map.subrefAdjacentWaterZones]) == false and not (bDontConsiderBuildingMAA) then
                local iAdjWZ, iPond
                local iCategoryWanted = (categories.NAVAL + M28UnitInfo.refCategoryAmphibious + categories.HOVER) * M28UnitInfo.refCategoryMAA
                for iEntry, tSubtable in tLZData[M28Map.subrefAdjacentWaterZones] do
                    iAdjWZ = tSubtable[M28Map.subrefAWZRef]
                    iPond = M28Map.tiPondByWaterZone[iAdjWZ]
                    local tWZTeamData = M28Map.tPondDetails[iPond][M28Map.subrefPondWaterZones][iAdjWZ][M28Map.subrefWZTeamData][iTeam]
                    if bDebugMessages == true then
                        if not (iPond) then
                            LOG('iPond nil')
                        end
                        if not (iAdjWZ) then
                            LOG('iAdjWZ nil')
                        end
                        if not (tWZTeamData[M28Map.subrefWZMAAThreatWanted]) then
                            LOG('tWZTeamData[M28Map.subrefWZMAAThreatWanted] nil')
                        end
                        if not (tWZTeamData[M28Map.subrefTThreatEnemyCombatTotal]) then
                            LOG('tWZTeamData[M28Map.subrefTThreatEnemyCombatTotal] nil')
                        end
                        if not (tWZTeamData[M28Map.subrefWZTThreatAllyCombatTotal]) then
                            LOG('tWZTeamData[M28Map.subrefWZTThreatAllyCombatTotal] nil')
                        end
                        LOG(sFunctionRef .. ': Considering if want MAA for iPond=' .. iPond .. '; iAdjWZ=' .. iAdjWZ .. '; tWZTeamData[M28Map.subrefWZMAAThreatWanted]=' .. tWZTeamData[M28Map.subrefWZMAAThreatWanted] .. '; tWZTeamData[M28Map.subrefTThreatEnemyCombatTotal]=' .. tWZTeamData[M28Map.subrefTThreatEnemyCombatTotal] .. '; tWZTeamData[M28Map.subrefWZTThreatAllyCombatTotal]=' .. tWZTeamData[M28Map.subrefWZTThreatAllyCombatTotal])
                    end
                    if tWZTeamData[M28Map.subrefWZMAAThreatWanted] > 0 and (tWZTeamData[M28Map.subrefTThreatEnemyCombatTotal] < 10 or tWZTeamData[M28Map.subrefWZTThreatAllyCombatTotal] > 10) then
                        if bDebugMessages == true then
                            LOG(sFunctionRef .. ': Will try and build hover flak to support adjacent water zone')
                        end
                        if ConsiderBuildingCategory(iCategoryWanted) then
                            return sBPIDToBuild
                        end
                    end
                end
            end

            --Now consider islands
            iCurrentConditionToTry = iCurrentConditionToTry + 1
            if M28Utilities.IsTableEmpty(tLZData[M28Map.subrefLZPathingToOtherIslands]) == false then
                local iDistanceThreshold
                if bHaveLowMass then
                    iDistanceThreshold = M28Utilities.GetDistanceBetweenPositions(tLZData[M28Map.subrefMidpoint], M28Map.GetPrimaryEnemyBaseLocation(aiBrain)) * 0.5
                    --If have t2 naval fac then greatly reduce distance threshold
                    if M28Team.tTeamData[iTeam][M28Team.subrefiHighestFriendlyNavalFactoryTech] >= 2 then
                        iDistanceThreshold = iDistanceThreshold * 0.4
                    end
                else
                    iDistanceThreshold = M28Utilities.GetDistanceBetweenPositions(tLZData[M28Map.subrefMidpoint], M28Map.GetPrimaryEnemyBaseLocation(aiBrain)) * 0.75
                end

                for iEntry, tPathingData in tLZData[M28Map.subrefLZPathingToOtherIslands] do
                    if bDebugMessages == true then
                        LOG(sFunctionRef .. ': Considering island ' .. tPathingData[M28Map.subrefIslandNumber] .. '; travel dist=' .. tPathingData[M28Map.subrefIslandTravelDist] .. '; Closest LZ ref=' .. (tPathingData[M28Map.subrefIslandClosestLZRef] or 'nil') .. '; are enemies in this or adjacent LZ=' .. tostring(M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][tPathingData[M28Map.subrefIslandClosestLZRef]][M28Map.subrefLZTeamData][iTeam][M28Map.subrefbEnemiesInThisOrAdjacentLZ]))
                    end
                    if tPathingData[M28Map.subrefIslandTravelDist] > iDistanceThreshold then
                        break
                    else
                        --Are there enemies in the target LZ?
                        if tPathingData[M28Map.subrefIslandClosestLZRef] and M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][tPathingData[M28Map.subrefIslandClosestLZRef]][M28Map.subrefLZTeamData][iTeam][M28Map.subrefbEnemiesInThisOrAdjacentLZ] then
                            if ConsiderBuildingCategory(M28UnitInfo.refCategoryAmphibiousCombat - categories.FIELDENGINEER) then
                                return sBPIDToBuild
                            end
                        end
                    end
                end
            end
        elseif (not (bHaveHighestLZTech) or iFactoryTechLevel < aiBrain[M28Economy.refiOurHighestLandFactoryTech]) and (not(M28Map.bIsLowMexMap) or not(bHaveLowMas)) then
            --Dont have our brains highest tech, and have low mass
            if bDebugMessages == true then
                LOG(sFunctionRef .. ': Consideringi f we want to upgrade factory, iFactoryTechLevel=' .. iFactoryTechLevel .. '; Brain highest tech=' .. aiBrain[M28Economy.refiOurHighestLandFactoryTech])
            end
            iCurrentConditionToTry = iCurrentConditionToTry + 1
            if iFactoryTechLevel < aiBrain[M28Economy.refiOurHighestLandFactoryTech] then
                --Do we want ot upgrade a support factory? Check first if are upgrading anything here
                local bUpgradingLandFactory = false

                if M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subreftoActiveUpgrades]) == false then
                    for iUnit, oUnit in tLZTeamData[M28Map.subreftoActiveUpgrades] do
                        if EntityCategoryContains(M28UnitInfo.refCategoryLandFactory, oUnit.UnitId) then
                            if bDebugMessages == true then
                                LOG(sFunctionRef .. ': Have an active land factory upgrade=' .. oUnit.UnitId .. M28UnitInfo.GetUnitLifetimeCount(oUnit.UnitId) .. '; Is unit valid=' .. tostring(M28UnitInfo.IsUnitValid(oUnit)) .. '; Fraction complete=' .. oUnit:GetFractionComplete() .. '; Work progress=' .. oUnit:GetWorkProgress())
                            end
                            bUpgradingLandFactory = true
                            break
                        end
                    end
                end
                if bDebugMessages == true then
                    LOG(sFunctionRef .. ': bUpgradingLandFactory=' .. tostring(bUpgradingLandFactory) .. '; bHaveLowMass=' .. tostring(bHaveLowMass) .. '; Lowest mass % stored=' .. M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored])
                end
                if not (bUpgradingLandFactory) or (not (bHaveLowMass) and (aiBrain[M28Economy.refiOurHighestLandFactoryTech] == 3 or M28Team.tTeamData[iTeam][M28Team.subrefiTeamMassStored] >= 4000 or M28Conditions.GetFactoryLifetimeCount(oFactory, nil, true) >= 25) and (iFactoryTechLevel == 1 or M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.5)) then
                    if (tLZTeamData[M28Map.subrefLZbCoreBase] or (tLZTeamData[M28Map.subrefLZCoreExpansion] and (not (bHaveLowMass) or M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauIslandMexCount][NavUtils.GetLabel(M28Map.refPathingTypeLand, tLZData[M28Map.subrefMidpoint])] >= 7))) then
                        local iAdjustFactor = 1
                        if aiBrain[M28Overseer.refbPrioritiseAir] or aiBrain[M28Overseer.refbPrioritiseLowTech] or aiBrain[M28Overseer.refbPrioritiseNavy] then iAdjustFactor = 2
                        elseif aiBrain[M28Overseer.refbPrioritiseHighTech] then iAdjustFactor = 0.75
                        end
                        if not (bHaveLowMass) and M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] > 0.3 and M28Conditions.GetLifetimeBuildCount(aiBrain, categories.LAND * categories.MOBILE * M28UnitInfo.ConvertTechLevelToCategory(aiBrain[M28Economy.refiOurHighestLandFactoryTech])) >= 3 * iAdjustFactor then
                            if ConsiderUpgrading() then
                                return sBPIDToBuild
                            end
                        elseif M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.02 * iAdjustFactor and (M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.15 or M28Team.tTeamData[iTeam][M28Team.subrefiTeamNetMass] > 0) and M28Conditions.GetLifetimeBuildCount(aiBrain, categories.LAND * categories.MOBILE * M28UnitInfo.ConvertTechLevelToCategory(aiBrain[M28Economy.refiOurHighestLandFactoryTech])) >= 6 * iAdjustFactor then
                            --Still consider upgrading if we have a T2 land factory but no t2 support factory in the LZ and have built some T2 units already
                            local tLandFactoriesInZone = EntityCategoryFilterDown(M28UnitInfo.refCategoryLandFactory, tLZTeamData[M28Map.subreftoLZOrWZAlliedUnits])
                            local iHQAndSupportCount = 0
                            for iUnit, oUnit in tLandFactoriesInZone do
                                if M28UnitInfo.GetUnitTechLevel(oUnit) >= aiBrain[M28Economy.refiOurHighestLandFactoryTech] then
                                    iHQAndSupportCount = iHQAndSupportCount + 1
                                end
                            end
                            if bDebugMessages == true then
                                LOG(sFunctionRef .. ': iHQAndSupportCount=' .. iHQAndSupportCount)
                            end
                            if iHQAndSupportCount <= 1 then
                                if ConsiderUpgrading() then
                                    return sBPIDToBuild
                                end
                            end
                        end
                    end
                end
            end

            --Do we want MAA, mobile shield or mobile stealth (with T2 factory while we have other T3 factories)?
            iCurrentConditionToTry = iCurrentConditionToTry + 1
            if iFactoryTechLevel == 2 then
                local iEnemyPlateau, iEnemyLandZone = M28Map.GetPlateauAndLandZoneReferenceFromPosition(M28Map.GetPrimaryEnemyBaseLocation(aiBrain))
                if iEnemyPlateau == iPlateau then
                    if bDebugMessages == true then
                        LOG(sFunctionRef .. ': Time ' .. GetGameTimeSeconds() .. '; aiBrain[M28Overseer.refiDistanceToNearestEnemyBase]=' .. (aiBrain[M28Overseer.refiDistanceToNearestEnemyBase] or 'nil') .. '; iPlateau=' .. (iPlateau or 'nil') .. '; iLandZone=' .. (iLandZone or 'nil') .. '; iEnemyLandZone=' .. (iEnemyLandZone or 'nil') .. '; Factory=' .. oFactory.UnitId .. M28UnitInfo.GetUnitLifetimeCount(oFactory) .. ' at position ' .. repru(oFactory:GetPosition()) .. '; Primary enemy base location=' .. repru(M28Map.GetPrimaryEnemyBaseLocation(aiBrain)))
                    end
                    local iDistToEnemyBaseToConsider
                    if iEnemyLandZone == iLandZone then
                        iDistToEnemyBaseToConsider = (M28Map.GetTravelDistanceBetweenLandZones(iPlateau, iLandZone, iEnemyLandZone) or aiBrain[M28Overseer.refiDistanceToNearestEnemyBase]) * 0.5
                    else
                        iDistToEnemyBaseToConsider = aiBrain[M28Overseer.refiDistanceToNearestEnemyBase] * 0.4
                    end
                    local bDontConsiderIndirect = false
                    local bDontConsiderMainCombat = true
                    --Dont get more MML if we already have lots (60+) and are low on mass
                    if bHaveLowMass and aiBrain:GetEconomyStoredRatio('MASS') <= 0.02 and aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryIndirect * categories.TECH2) >= math.max(60, aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryLandCombat * categories.TECH2) * 2 + aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryLandCombat * categories.TECH3) * 4) then
                        bDontConsiderIndirect = true
                    else
                        --If we have enough mass spare and dont have much t3 land combat or t2 land combat then consider getting more t2 land combat for a bit
                        if (not(bHaveLowMass) or   aiBrain:GetEconomyStoredRatio('MASS') >= 0.05) and M28Team.tTeamData[iTeam][M28Team.refiConstructedExperimentalCount] == 0 and aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryLandCombat * categories.TECH3) < 8 and aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryLandCombat * categories.TECH2) <= 50 then
                            bDontConsiderMainCombat = false
                        end
                    end


                    if M28Utilities.IsTableEmpty(tLZData[M28Map.subrefLZPathingToOtherLandZones]) == false then
                        for iEntry, tLZPathing in tLZData[M28Map.subrefLZPathingToOtherLandZones] do
                            if tLZPathing[M28Map.subrefLZTravelDist] <= iDistToEnemyBaseToConsider then
                                --How far away is it?
                                if bDebugMessages == true then
                                    LOG(sFunctionRef .. ': T2 Considering whether to reinforce alternative LZ ' .. tLZPathing[M28Map.subrefLZNumber] .. '; Travel dist=' .. tLZPathing[M28Map.subrefLZTravelDist] .. '; iDistToEnemyBaseToConsider=' .. iDistToEnemyBaseToConsider..'; bDontConsiderMainCombat='..tostring(bDontConsiderMainCombat)..'; bDontConsiderIndirect='..tostring(bDontConsiderIndirect))
                                end
                                if tLZPathing[M28Map.subrefLZTravelDist] <= iDistToEnemyBaseToConsider then
                                    local iCategoryToGet = GetLandZoneSupportCategoryWanted(oFactory, iTeam, iPlateau, iLandZone, tLZPathing[M28Map.subrefLZNumber], bDontConsiderBuildingMAA, bConsiderMobileShields, bConsiderMobileStealths, bConsiderAbsolvers, bDontConsiderMainCombat, bDontConsiderIndirect, bDontConsiderLandScouts)
                                    if bDebugMessages == true then
                                        LOG(sFunctionRef .. ': T2 DO we have no category for this alternative LZ ' .. tLZPathing[M28Map.subrefLZNumber] .. '=' .. tostring(iCategoryToGet == nil) .. '; bDontConsiderBuildingMAA=' .. tostring(bDontConsiderBuildingMAA))
                                    end
                                    if iCategoryToGet then
                                        if ConsiderBuildingCategory(iCategoryToGet) then
                                            return sBPIDToBuild
                                        end
                                    end
                                end
                            else
                                break
                            end
                        end
                    end
                end
            end
        end

        --Different island to nearest friendly base or expansion base - ensure we have some DF and indirect fire threat nearby
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if bDebugMessages == true then LOG(sFunctionRef..': Checking if on a different island or are an expansion base, Factory land label='..(NavUtils.GetLabel(M28Map.refPathingTypeLand, oFactory:GetPosition()) or 'nil')..'; Closest friendly base='..(NavUtils.GetLabel(M28Map.refPathingTypeLand, tLZTeamData[M28Map.reftClosestFriendlyBase]) or 'nil')..'; Is this a core expansion zone='..tostring(tLZTeamData[M28Map.subrefLZCoreExpansion] or false)..'; Is this a core zone='..tostring(tLZTeamData[M28Map.subrefLZbCoreBase] or false)) end
        if not(NavUtils.GetLabel(M28Map.refPathingTypeLand, oFactory:GetPosition()) == NavUtils.GetLabel(M28Map.refPathingTypeLand, tLZTeamData[M28Map.reftClosestFriendlyBase])) or tLZTeamData[M28Map.subrefLZCoreExpansion] then
            if bDebugMessages == true then LOG(sFunctionRef..': Closest base is in a different island, so will get base level of tanks') end
            local iNearbyDFThreat = tLZTeamData[M28Map.subrefLZThreatAllyMobileDFTotal]
            --Include T2 PD threat

            if M28Utilities.IsTableEmpty( tLZTeamData[M28Map.subrefLZThreatAllyStructureDFByRange]) == false and (tLZTeamData[M28Map.subrefLZThreatEnemyBestMobileDFRange] or 0) < 50 and (tLZTeamData[M28Map.subrefLZThreatEnemyBestMobileIndirectRange] or 0) < 50 then
                local iBestEnemyRange = math.max((tLZTeamData[M28Map.subrefLZThreatEnemyBestMobileDFRange] or 0) < 50 and (tLZTeamData[M28Map.subrefLZThreatEnemyBestMobileIndirectRange] or 0))
                for iRange, iThreat in tLZTeamData[M28Map.subrefLZThreatAllyStructureDFByRange] do
                    if iRange > iBestEnemyRange then
                        iNearbyDFThreat = iNearbyDFThreat + iThreat * 0.75
                    end
                end
            end
            local iNearbyIFThreat = tLZTeamData[M28Map.subrefLZThreatAllyMobileIndirectTotal]
            local iNearbyGroundAAThreat = tLZTeamData[M28Map.subrefLZThreatAllyGroundAA]
            local iFriendlyDFThreatWanted = 100
            local iFriendlyIFThreatWanted = 50
            local iFriendlyAAThreatWanted = 100
            if NavUtils.GetLabel(M28Map.refPathingTypeLand, oFactory:GetPosition()) == NavUtils.GetLabel(M28Map.refPathingTypeLand, tLZTeamData[M28Map.reftClosestFriendlyBase]) and M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] == 0 then
                iFriendlyAAThreatWanted = 0
            end
            local iThreatFactor = 1
            if M28Map.bIsCampaignMap then iThreatFactor = 3 end
            if M28Map.subrefLZSValue >= 1000 then iThreatFactor = iThreatFactor * 1.5 end
            if tLZTeamData[M28Map.subrefMexCountByTech][2] + tLZTeamData[M28Map.subrefMexCountByTech][3] > 0 then iThreatFactor = iThreatFactor * 2 end
            if tLZData[M28Map.subrefLZMexCount] >= 4 then iThreatFactor = iThreatFactor * 2 end


            if not(iThreatFactor == 1) then
                iFriendlyDFThreatWanted = iFriendlyDFThreatWanted * iThreatFactor
                iFriendlyIFThreatWanted = iFriendlyIFThreatWanted * iThreatFactor
                iFriendlyAAThreatWanted = iFriendlyAAThreatWanted * iThreatFactor
            end
            --If no enemies in an adjacent land zone and this factory ahs built at least 25 units, then disable this test, as otherwise we run the risk of units traveling far away meaning we keep buliding inappropriate units
            if M28Conditions.GetFactoryLifetimeCount(oFactory, nil, true) >= 25 and not(tLZTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ]) and not(tLZTeamData[M28Map.subrefbDangerousEnemiesInAdjacentWZ]) then
                if bHaveLowMass or GetGameTimeSeconds() - (M28Team.tTeamData[iTeam][M28Team.refiTimeLastHadNothingToBuildForLandFactory] or -100) <= 10 then
                    if M28Conditions.GetFactoryLifetimeCount(oFactory, nil, true) <= 50 then
                        --Consider lifetime counts for each unit type specifically
                        if M28Conditions.GetFactoryLifetimeCount(oFactory, M28UnitInfo.refCategoryLandCombat * categories.DIRECTFIRE, true) >= 15 then iFriendlyDFThreatWanted = 0 end
                        if M28Conditions.GetFactoryLifetimeCount(oFactory, M28UnitInfo.refCategoryMAA, true) >= 12 then iFriendlyAAThreatWanted = 0 end
                        if M28Conditions.GetFactoryLifetimeCount(oFactory, M28UnitInfo.refCategoryIndirect, true) >= 12 then iFriendlyIFThreatWanted = 0 end
                    else
                        iFriendlyDFThreatWanted = 0
                        iFriendlyIFThreatWanted = 0
                        iFriendlyAAThreatWanted = 0
                    end
                end
            end

            if bDebugMessages == true then LOG(sFunctionRef..': Checking if we have a base level of threat around this land factory, iThreatFactor='..iThreatFactor..'; iNearbyDFThreat='..iNearbyDFThreat..'; iFriendlyDFThreatWanted='..iFriendlyDFThreatWanted..'; iThreatFactor='..iThreatFactor) end

            if iNearbyDFThreat < iFriendlyDFThreatWanted or iNearbyIFThreat < iFriendlyIFThreatWanted or iNearbyGroundAAThreat < iFriendlyAAThreatWanted then
                local bAdjZoneWantsScout = false
                if M28Utilities.IsTableEmpty(tLZData[M28Map.subrefLZAdjacentLandZones]) == false then
                    for iEntry, iAdjLZ in tLZData[M28Map.subrefLZAdjacentLandZones] do
                        local tAdjLZTeamData = M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iAdjLZ][M28Map.subrefLZTeamData][iTeam]
                        iNearbyDFThreat = iNearbyDFThreat + tAdjLZTeamData[M28Map.subrefLZThreatAllyMobileDFTotal]
                        iNearbyIFThreat = iNearbyIFThreat + tAdjLZTeamData[M28Map.subrefLZThreatAllyMobileIndirectTotal]
                        iNearbyGroundAAThreat = iNearbyGroundAAThreat + tAdjLZTeamData[M28Map.subrefLZThreatAllyGroundAA]
                        if not(bAdjZoneWantsScout) and tAdjLZTeamData[M28Map.refbWantLandScout] then bAdjZoneWantsScout = true end
                    end
                end
                if bDebugMessages == true then LOG(sFunctionRef..': Threat after factoring in adjacent land zones: iNearbyDFThreat='..iNearbyDFThreat..'; iNearbyIFThreat='..iNearbyIFThreat..'; iNearbyGroundAAThreat='..iNearbyGroundAAThreat..'; iFriendlyDFThreatWanted='..iFriendlyDFThreatWanted) end
                if iNearbyDFThreat < iFriendlyDFThreatWanted or iNearbyIFThreat < iFriendlyIFThreatWanted or iNearbyGroundAAThreat < iFriendlyAAThreatWanted then
                    if bDebugMessages == true then LOG(sFunctionRef..': Will get basic level of combat threat as are on an island') end
                    --Get a couple of each type first:
                    if iNearbyDFThreat < 100 then
                        if bDebugMessages == true then LOG(sFunctionRef..': Want land combat as low nearby DF threat') end
                        if ConsiderBuildingCategory(M28UnitInfo.refCategoryLandCombat * categories.DIRECTFIRE) then return sBPIDToBuild end
                    end
                    if iNearbyGroundAAThreat < math.min(iFriendlyAAThreatWanted, 100) and (iNearbyGroundAAThreat == 0 or not(NavUtils.GetLabel(M28Map.refPathingTypeLand, oFactory:GetPosition()) == NavUtils.GetLabel(M28Map.refPathingTypeLand, tLZTeamData[M28Map.reftClosestFriendlyBase]))) then
                        if bDebugMessages == true then LOG(sFunctionRef..': Want AA as low AA threat') end
                        if ConsiderBuildingCategory(M28UnitInfo.refCategoryMAA) then return sBPIDToBuild end
                    end
                    if iNearbyIFThreat < 50 then
                        if bDebugMessages == true then LOG(sFunctionRef..': Want indirect threat') end
                        if ConsiderBuildingCategory(M28UnitInfo.refCategoryIndirect) then return sBPIDToBuild end
                    end

                    --If want a land scout then build this
                    if bAdjZoneWantsScout and tLZTeamData[M28Map.refiRadarCoverage] <= 60  and not (bDontConsiderLandScouts) then
                        if ConsiderBuildingCategory(M28UnitInfo.refCategoryLandScout) then return sBPIDToBuild end
                    end

                    --Now get the one that we ahve the lowest ratio for
                    local iLowestCategoryType
                    local iLowestRatio = 10000
                    local iCurRatio
                    if iNearbyDFThreat < iFriendlyDFThreatWanted then
                        iLowestRatio = iNearbyDFThreat / iFriendlyDFThreatWanted
                        iLowestCategoryType = M28UnitInfo.refCategoryLandCombat * categories.DIRECTFIRE
                    end

                    if iNearbyGroundAAThreat < iFriendlyAAThreatWanted then
                        iCurRatio = iNearbyGroundAAThreat / iFriendlyAAThreatWanted
                        if iCurRatio < iLowestRatio then
                            iLowestRatio = iCurRatio
                            iLowestCategoryType = M28UnitInfo.refCategoryMAA
                        end
                    end

                    if iNearbyIFThreat < iFriendlyIFThreatWanted then
                        iCurRatio = iNearbyIFThreat / iFriendlyIFThreatWanted
                        if iCurRatio < iLowestRatio then
                            iLowestRatio = iCurRatio
                            iLowestCategoryType = M28UnitInfo.refCategoryIndirect
                        end
                    end
                    if bDebugMessages == true then LOG(sFunctionRef..': iLowestRatio='..iLowestRatio..'; will now build the lowest category type ratio') end
                    if iLowestCategoryType then
                        if ConsiderBuildingCategory(iLowestCategoryType) then return sBPIDToBuild end
                    end
                end
            end


        end

        --Engineers if we have mass and dont have spare engineers, unless are on an island zone with lots of engineers already
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if bDebugMessages == true then
            LOG(sFunctionRef .. ': Considering if want engineers if have mass: M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored]=' .. M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] .. '; bHaveHighestLZTech=' .. tostring(bHaveHighestLZTech) .. '; subrefTbWantBP=' .. tostring(tLZTeamData[M28Map.subrefTbWantBP]))
        end
        if tLZTeamData[M28Map.subrefTbWantBP] and M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] > 0.01 and ((bHaveHighestLZTech and (not(M28Map.bIsLowMexMap) or not(bHaveLowMass))) or (M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] > 0.4 and tLZTeamData[M28Map.subrefLZbCoreBase])) then
            if not((M28Utilities.bLoudModActive or M28Utilities.bQuietModActive) and bHaveLowMass) then
                if bDebugMessages == true then LOG(sFunctionRef..': Will get an engi unless have lots in this zone already, GetEngiCountInZone='..GetEngiCountInZone()) end
                if tLZTeamData[M28Map.subrefLZbCoreBase] or oFactory[refiTotalBuildCount] < 5 or GetEngiCountInZone() < 10 or tLZData[M28Map.subrefLZIslandRef] == NavUtils.GetTerrainLabel(M28Map.refPathingTypeLand, tLZTeamData[M28Map.reftClosestFriendlyBase]) or M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauIslandMexCount] >= 7 then
                    if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then
                        return sBPIDToBuild
                    end
                end
            end
        end

        --T1 mobile arti if we dont ahve low mass and are below highest tech level, or normal tanks otherwise
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if not (bHaveLowMass) and (not (bSaveMassDueToEnemyFirebaseOrOurExperimental) or M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.45) then
            --Is there a relatively nearby enemy?
            local bEnemiesRelativelyNear = tLZData[M28Map.subrefbEnemiesInThisOrAdjacentLZ]
            local bEnemyLongerRangedPDNearby = false
            if (not (bEnemiesRelativelyNear) or iFactoryTechLevel == 1) and M28Utilities.IsTableEmpty(tLZData[M28Map.subrefLZAdjacentLandZones]) == false then
                for _, iAdjLZ in tLZData[M28Map.subrefLZAdjacentLandZones] do
                    local tAltLZTeamData = M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iAdjLZ][M28Map.subrefLZTeamData][iTeam]
                    if tAltLZTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ] and (tAltLZTeamData[M28Map.subrefbDangerousEnemiesInThisLZ] or iFactoryTechLevel >= 2 or aiBrain:GetEconomyStoredRatio('MASS') >= 0.3 or oFactory[refiTotalBuildCount] <= 3 or not(tLZData[M28Map.subrefLZIslandRef] == NavUtils.GetLabel(M28Map.refPathingTypeLand, tLZTeamData[M28Map.reftClosestFriendlyBase]))) then
                        if iFactoryTechLevel <= 2 and tAltLZTeamData[M28Map.subrefLZThreatEnemyBestStructureDFRange] >= 40 and (iFactoryTechLevel == 1 or  tAltLZTeamData[M28Map.subrefLZThreatEnemyBestStructureDFRange] >= 65) then
                            bEnemyLongerRangedPDNearby = true
                        end
                        bEnemiesRelativelyNear = true
                        if bEnemyLongerRangedPDNearby then
                            break
                        end
                    end
                end
            end
            if bDebugMessages == true then
                LOG(sFunctionRef .. ': Dont have low mass so considering if we have enemies adjacent to an adjacent LZ in which case will build T1 arti, bEnemiesRelativelyNear=' .. tostring(bEnemiesRelativelyNear)..'; bEnemyLongerRangedPDNearby='..tostring(bEnemyLongerRangedPDNearby))
                if iFactoryTechLevel < 3 then LOG(sFunctionRef..': Lifetime count of combat units of T3='..M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryLandCombat * categories.TECH3)..'; T2='..M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryLandCombat * categories.TECH2)..'; Factory tech='..iFactoryTechLevel..'; aiBrain[M28Economy.refiOurHighestLandFactoryTech]='..aiBrain[M28Economy.refiOurHighestLandFactoryTech]) end
            end
            if bEnemiesRelativelyNear then
                if bEnemyLongerRangedPDNearby then
                    if ConsiderUpgrading() then return sBPIDToBuild end
                elseif bHaveHighestLZTech or (iFactoryTechLevel == aiBrain[M28Economy.refiOurHighestLandFactoryTech] - 1 and ((iFactoryTechLevel == 1 and M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryLandCombat - categories.TECH1) <= 6) or (iFactoryTechLevel == 2 and M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryLandCombat * categories.TECH3) <= 6))) then
                    if bDebugMessages == true then LOG(sFunctionRef..': Will get tanks and skirmishers if can path by land, bCanPathToEnemyWithLand='..tostring(bCanPathToEnemyWithLand)) end
                    if bCanPathToEnemyWithLand then
                        if ConsiderBuildingCategory(M28UnitInfo.refCategoryDFTank + iSkirmisherCategory - M28UnitInfo.refCategoryLightAttackBot) then
                            return sBPIDToBuild
                        end
                    else
                        if ConsiderBuildingCategory(M28UnitInfo.refCategoryAmphibiousCombat - categories.FIELDENGINEER) then
                            return sBPIDToBuild
                        end
                    end
                else
                    if bCanPathToEnemyWithLand then
                        local iCurT1Arti = aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryIndirect * categories.TECH1)
                        if iCurT1Arti <= 60 then
                            local iCurTanks = aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryDFTank)
                            if bDebugMessages == true then LOG(sFunctionRef..': iCurT1Arti='..iCurT1Arti..'; iCurTanks='..iCurTanks) end
                            if iCurT1Arti < iCurTanks * 0.5 or not(EntityCategoryContains(categories.AEON, oFactory.UnitId)) then
                                if ConsiderBuildingCategory(M28UnitInfo.refCategoryIndirect * categories.TECH1) then
                                    return sBPIDToBuild
                                end
                            end
                        end
                        --Upgrade to T2 if we have no active land fac upgrades instead
                        if bDebugMessages == true then LOG(sFunctionRef..': Will consider upgrading if we have no active land fac upgrades in this zone') end
                        if M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subreftoActiveUpgrades]) or M28Utilities.IsTableEmpty(EntityCategoryFilterDown(M28UnitInfo.refCategoryLandFactory, tLZTeamData[M28Map.subreftoActiveUpgrades])) then
                            if bDebugMessages == true then LOG(sFunctionRef..': Will try and upgrade') end
                            if ConsiderUpgrading() then return sBPIDToBuild end
                        end
                    end
                end
            end
        end



        --Upgrade T1 to T2 if we have multiple mex upgrades and T1 land facs in this land zone, and already have T2 land, even if have low mass
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if iFactoryTechLevel == 1 and M28Team.tTeamData[iTeam][M28Team.subrefiHighestFriendlyLandFactoryTech] >= 2 and M28Team.tTeamData[iTeam][M28Team.subrefiTeamMassStored] >= 20 and GetGameTimeSeconds() - (M28Team.tTeamData[iTeam][M28Team.refiTimeOfLastMassStall] or -5) >= 3 then
            if M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subreftoActiveUpgrades]) == false and table.getn(tLZTeamData[M28Map.subreftoActiveUpgrades]) >= 3 then
                if (tLZTeamData[M28Map.subrefLZbCoreBase] or (tLZTeamData[M28Map.subrefLZCoreExpansion] and (not (bHaveLowMass) or (not(aiBrain[M28Overseer.refbPrioritiseAir] or aiBrain[M28Overseer.refbPrioritiseLowTech]) or M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauIslandMexCount][NavUtils.GetLabel(M28Map.refPathingTypeLand, tLZData[M28Map.subrefMidpoint])] >= 7)))) then
                    local iCurMexUpgrades = 0
                    local iCurT1FactoryUpgrades = 0
                    for iUnit, oUnit in tLZTeamData[M28Map.subreftoActiveUpgrades] do
                        if EntityCategoryContains(M28UnitInfo.refCategoryMex, oUnit.UnitId) then
                            iCurMexUpgrades = iCurMexUpgrades + 1
                        elseif EntityCategoryContains(M28UnitInfo.refCategoryFactory * categories.TECH1, oUnit.UnitId) then
                            iCurT1FactoryUpgrades = iCurT1FactoryUpgrades + 1
                        end
                    end
                    if iCurT1FactoryUpgrades == 0 and iCurMexUpgrades >= 2 then
                        --Do we have more than 1 T1 land factory in this land zone?
                        local tT1LandFactories = EntityCategoryFilterDown(M28UnitInfo.refCategoryLandFactory * categories.TECH1, tLZTeamData[M28Map.subreftoLZOrWZAlliedUnits])
                        if table.getn(tT1LandFactories) >= 2 then
                            if ConsiderUpgrading() then
                                return sBPIDToBuild
                            end
                        end
                    end
                end
            end
        end

        --Build more engineers if we have multiple upgrades and need more engineers for the current LZ, even if relatively low mass
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if tLZTeamData[M28Map.subrefTbWantBP] and M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subreftoActiveUpgrades]) == false and M28Team.tTeamData[iTeam][M28Team.subrefiTeamMassStored] >= 50 and GetGameTimeSeconds() - (M28Team.tTeamData[iTeam][M28Team.refiTimeOfLastMassStall] or -5) >= 5 and M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.subreftTeamUpgradingMexes]) == false then
            if table.getn(M28Team.tTeamData[iTeam][M28Team.subreftTeamUpgradingMexes]) / M28Team.tTeamData[iTeam][M28Team.subrefiActiveM28BrainCount] >= 3 then
                --Build engineers as we have lots of upgrades
                if not(M28Utilities.bLoudModActive or M28Utilities.bQuietModActive) or not(bHaveLowMass) or (M28Team.tTeamData[iTeam][M28Team.subrefiTeamMassStored] >= 200 and GetGameTimeSeconds() - (M28Team.tTeamData[iTeam][M28Team.refiTimeOfLastMassStall] or -5) >= 15) then
                    if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then
                        return sBPIDToBuild
                    end
                end
            end
        end

        --More land scouts (no cap)
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if bDebugMessages == true then LOG(sFunctionRef..': Uncapped land scout builder, tLZTeamData[M28Map.refbWantLandScout]='..tostring(tLZTeamData[M28Map.refbWantLandScout])) end
        if (not(M28Map.bIsLowMexMap) or not(bHaveLowMass))  and not (bDontConsiderLandScouts) then
            local bAdjZoneWantsScout = tLZTeamData[M28Map.refbWantLandScout]
            --Workaround for issue that core bases shouldnt be requesting land scouts for themselves
            if not(bAdjZoneWantsScout) and tLZTeamData[M28Map.subrefLZbCoreBase] and M28Utilities.IsTableEmpty(tLZData[M28Map.subrefLZAdjacentLandZones]) == false then
                for _, iAdjLZ in tLZData[M28Map.subrefLZAdjacentLandZones] do
                    local tAdjLZTeamData = M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iAdjLZ][M28Map.subrefLZTeamData][iTeam]
                    if not(bAdjZoneWantsScout) and tAdjLZTeamData[M28Map.refbWantLandScout] then
                        bAdjZoneWantsScout = true
                        break
                    end
                end
            end
            if bDebugMessages == true then LOG(sFunctionRef..': bAdjZoneWantsScout='..tostring(bAdjZoneWantsScout)) end
            if bAdjZoneWantsScout then
                if ConsiderBuildingCategory(M28UnitInfo.refCategoryLandScout) then
                    return sBPIDToBuild
                end
            end
        end

        --Get mobile stealth if we have low lifetime count, a cybran T2+ factory, and dont have low power
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if bDebugMessages == true then LOG(sFunctionRef..': Mobile stealth low lifetime count low priority builder, bHaveLowPower='..tostring(bHaveLowPower)..'; Factory build count='..oFactory[refiTotalBuildCount]..'; Mobile stealth LC='..M28Conditions.GetTeamLifetimeBuildCount(iTeam, M28UnitInfo.refCategoryMobileLandStealth)..'; Team built omni='..tostring(M28Team.tTeamData[iTeam][M28Team.subrefbEnemyBuiltOmni])..'; Our gross power='..tostring(aiBrain[M28Economy.refiGrossEnergyBaseIncome])) end
        if bConsiderMobileStealths and not(bHaveLowPower) and oFactory[refiTotalBuildCount] >= 4 and iFactoryTechLevel >= 2 and EntityCategoryContains(categories.CYBRAN, oFactory.UnitId) and aiBrain[M28Economy.refiGrossEnergyBaseIncome] >= 150 and not(M28Team.tTeamData[iTeam][M28Team.subrefbEnemyBuiltOmni]) and not(M28Team.tTeamData[iTeam][M28Team.subrefbEnemyHasOmni]) then
            local iMobileStealthLifetimeCount = M28Conditions.GetTeamLifetimeBuildCount(iTeam, M28UnitInfo.refCategoryMobileLandStealth)
            if iMobileStealthLifetimeCount <= 6 and iMobileStealthLifetimeCount < 2 * M28Team.tTeamData[iTeam][M28Team.subrefiActiveM28BrainCount] then
                if not(bHaveLowMass) or iMobileStealthLifetimeCount <= math.min(3,  M28Team.tTeamData[iTeam][M28Team.subrefiActiveM28BrainCount]) then
                    if bDebugMessages == true then LOG(sFunctionRef..': will get mobile steatlh if we have built enough land combat units, lifetime T2+ count='..M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryLandCombat - categories.TECH1)) end
                    if M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryLandCombat - categories.TECH1) >= math.max(4, iMobileStealthLifetimeCount * 5) then
                        if ConsiderBuildingCategory(M28UnitInfo.refCategoryMobileLandStealth) then return sBPIDToBuild end
                    end
                end
            end
        end


        --Want factories to have a lifetime build count of indirect fire units
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if not(bHaveLowMass) and (oFactory[refiTotalBuildCount] <= 5 or aiBrain:GetEconomyStoredRatio('MASS') >= 0.2 or aiBrain:GetEconomyStored('MASS') >= 400 or iFactoryTechLevel >= 2 or not(tLZData[M28Map.subrefLZIslandRef] == NavUtils.GetLabel(M28Map.refPathingTypeLand, tLZTeamData[M28Map.reftClosestFriendlyBase]))) and ((bCanPathToEnemyWithLand and M28Conditions.GetFactoryLifetimeCount(oFactory, M28UnitInfo.refCategoryIndirect, false) < 5) or (not(bCanPathToEnemyWithLand) and M28Conditions.GetFactoryLifetimeCount(oFactory, M28UnitInfo.refCategoryIndirect, false) < 1)) then
            if ConsiderBuildingCategory(M28UnitInfo.refCategoryIndirect) then return sBPIDToBuild end
        end

        --Build more units if we are overflowing mass and dont have many units in cur land zone
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.95 then
            if M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subrefLZTAlliedCombatUnits]) or table.getn(tLZTeamData[M28Map.subrefLZTAlliedCombatUnits]) < 25 then
                if tLZTeamData[M28Map.subrefTbWantBP] and ConsiderBuildingCategory(M28UnitInfo.refCategoryLandCombat + M28UnitInfo.refCategoryIndirect) then return sBPIDToBuild end
                if ConsiderBuildingCategory(M28UnitInfo.refCategoryLandCombat + M28UnitInfo.refCategoryIndirect) then return sBPIDToBuild end
            end
        end

        --Build land scouts if need more if in LZ expansion with poor radar coverage
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if tLZTeamData[M28Map.refiRadarCoverage] < 50 and tLZTeamData[M28Map.refbWantLandScout] and (not(M28Map.bIsLowMexMap) or not(bHaveLowMass))  and not (bDontConsiderLandScouts) then
            if ConsiderBuildingCategory(M28UnitInfo.refCategoryLandScout) then return sBPIDToBuild end
        end
    end



    M28Team.tTeamData[iTeam][M28Team.refiTimeLastHadNothingToBuildForLandFactory] = GetGameTimeSeconds()
    oFactory[refiTimeSinceLastFailedToGetOrder] = GetGameTimeSeconds() --Redundancy, will also include in parent logic
    tLZTeamData[M28Map.subrefiTimeLandFacHadNothingToBuild] = GetGameTimeSeconds()

    if bDebugMessages == true then LOG(sFunctionRef..': Updated time that last had nothing to build for land factory to '..M28Team.tTeamData[iTeam][M28Team.refiTimeLastHadNothingToBuildForLandFactory]) end
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
end

function DetermineWhatToBuild(aiBrain, oFactory)
    local sBPIDToBuild, bEnhancement
    if EntityCategoryContains(M28UnitInfo.refCategoryLandFactory, oFactory.UnitId) then
        if EntityCategoryContains(categories.EXPERIMENTAL, oFactory.UnitId) then
            sBPIDToBuild, bEnhancement = GetBlueprintToBuildForExperimentalLandFactory(aiBrain, oFactory)
        else
            sBPIDToBuild, bEnhancement = GetBlueprintToBuildForLandFactory(aiBrain, oFactory)
        end
    elseif EntityCategoryContains(M28UnitInfo.refCategoryAirFactory, oFactory.UnitId) then
        sBPIDToBuild, bEnhancement = GetBlueprintToBuildForAirFactory(aiBrain, oFactory)
    elseif EntityCategoryContains(M28UnitInfo.refCategoryNavalFactory, oFactory.UnitId) then
        sBPIDToBuild, bEnhancement = GetBlueprintToBuildForNavalFactory(aiBrain, oFactory)
    elseif EntityCategoryContains(M28UnitInfo.refCategoryQuantumGateway, oFactory.UnitId) then
        sBPIDToBuild = GetBlueprintToBuildForQuantumGateway(aiBrain, oFactory)
    elseif EntityCategoryContains(M28UnitInfo.refCategoryMobileLandFactory, oFactory.UnitId) then
        sBPIDToBuild = GetBlueprintToBuildForMobileLandFactory(aiBrain, oFactory)
    elseif EntityCategoryContains(M28UnitInfo.refCategoryMobileAircraftFactory, oFactory.UnitId) or (EntityCategoryContains(categories.EXTERNALFACTORYUNIT, oFactory.UnitId) and oFactory.Parent.UnitId and EntityCategoryContains(M28UnitInfo.refCategoryCarrier, oFactory.Parent.UnitId)) then
        sBPIDToBuild = GetBlueprintToBuildForAircraftCarrier(aiBrain, oFactory)
    elseif EntityCategoryContains(M28UnitInfo.refCategorySpecialFactory, oFactory.UnitId) then
        sBPIDToBuild = GetBlueprintToBuildForExperimentalFactoryBuilding(aiBrain, oFactory)
    elseif oFactory.Parent.UnitId and EntityCategoryContains(categories.EXTERNALFACTORYUNIT, oFactory.UnitId) and EntityCategoryContains(M28UnitInfo.refCategoryBattleship * categories.EXPERIMENTAL, oFactory.Parent.UnitId) then
        sBPIDToBuild = GetBlueprintToBuildForTempest(aiBrain, oFactory)
    else
        M28Utilities.ErrorHandler('Need to add code - unexpected factory type, unitID='..(oFactory.UnitId or 'nil')..'; ParentID (if external factory unit)='..(oFactory.Parent.UnitId or 'nil'))
    end
    return sBPIDToBuild, bEnhancement
end
function IsFactoryReadyToBuild(oFactory)
    local sFunctionRef = 'IsFactoryReadyToBuild'
    local bDebugMessages = false if M28Profiler.bGlobalDebugOverride == true then   bDebugMessages = true end
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerStart)
    if bDebugMessages == true then LOG(sFunctionRef..': Start of code for oFactory='..oFactory.UnitId..M28UnitInfo.GetUnitLifetimeCount(oFactory)..'; Fraction complete='..oFactory:GetFractionComplete()..'; Work progress='..oFactory:GetWorkProgress()..'; Factory unit state='..M28UnitInfo.GetUnitState(oFactory)..'; Is table of factory command queue empty='..tostring(M28Utilities.IsTableEmpty(oFactory:GetCommandQueue()))..'; Time='..GetGameTimeSeconds()) end
    if oFactory:GetFractionComplete() == 1 and oFactory:GetWorkProgress() == 0 and not (oFactory:IsUnitState('Building')) and not (oFactory:IsUnitState('Upgrading')) and not (oFactory:IsUnitState('Busy')) and
            (oFactory:IsUnitState('Guarding') or M28Utilities.IsTableEmpty(oFactory:GetCommandQueue())) then
        --Campaign - wait until cutscene over

        if M28Map.bIsCampaignMap and ScenarioInfo.OpEnded and GetGameTimeSeconds() <= 120 then
            M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
            return false
        end


        --Issue in campaign where factories were being given a guard order by another script, meaning their command queue wasnt empty - have updated so this will be ignored
        --Add further check that we havent built something at a nearby factory and have recently stalled
        local aiBrain = oFactory:GetAIBrain()

        if aiBrain.HostileCampaignAI and tonumber(ScenarioInfo.Options.CmpAIDelay) > GetGameTimeSeconds() then
            M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
            WaitSeconds(tonumber(ScenarioInfo.Options.CmpAIDelay) - GetGameTimeSeconds())
            M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerStart)
        end

        if bDebugMessages == true then LOG(sFunctionRef..': About to get factory plateau, position='..repru(oFactory:GetPosition())..'; Factory='..oFactory.UnitId..M28UnitInfo.GetUnitLifetimeCount(oFactory)..'; Time='..GetGameTimeSeconds()) end
        local iPlateauOrZero, iLandOrWaterZone
        if oFactory:GetPosition()[1] == 0 and oFactory:GetPosition()[3] == 0 then
            --Had strange scenario where a t1 land factory returned a position of 0,0,0 on a map where this was outside the playable area; assuming this might happen on death or a unit being transferred for a split second
            M28Utilities.ErrorHandler('Factory position is 0, likely error if this triggers multiple times', false, true)
            M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
            return false
        else
            iPlateauOrZero, iLandOrWaterZone = M28Map.GetClosestPlateauOrZeroAndZoneToPosition(oFactory:GetPosition())
        end
        local tLZOrWZTeamData
        local iTeam = aiBrain.M28Team
        if GetGameTimeSeconds() > 10 or (M28Air.tbFullAirTeamCycleRun[iTeam] and M28Air.tbFullAirSubteamCycleRun[aiBrain.M28AirSubteam]) then
            if (iLandOrWaterZone or 0) > 0 then
                if iPlateauOrZero == 0 then
                    tLZOrWZTeamData = M28Map.tPondDetails[M28Map.tiPondByWaterZone[iLandOrWaterZone]][M28Map.subrefPondWaterZones][iLandOrWaterZone][M28Map.subrefWZTeamData][iTeam]
                else
                    tLZOrWZTeamData = M28Map.tAllPlateaus[iPlateauOrZero][M28Map.subrefPlateauLandZones][iLandOrWaterZone][M28Map.subrefLZTeamData][iTeam]
                end
            end
            if GetGameTimeSeconds() - (tLZOrWZTeamData[M28Map.refiTimeLastBuiltAtFactory] or -100) >= 0.09 then
                --i.e. dont start production in more than 1 factory per zone per tick, so e.g. air facs are less likely to all build asfs at the same time and cause a power stall
                M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
                return true
                --backup for scenarios where dont want to wait - if high mass and energy and AIx
            elseif aiBrain.CheatEnabled and tonumber(ScenarioInfo.Options.CheatMult or 1.5) >= 2 and M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.5 and M28Team.tTeamData[iTeam][M28Team.subrefiGrossEnergyWhenStalled] > (M28Team.tTeamData[iTeam][M28Team.subrefiGrossEnergyWhenStalled] or 0) * 1.25 and GetGameTimeSeconds() - (M28Team.tTeamData[iTeam][M28Team.refiTimeOfLastEnergyStall] or -100) >= 15 then
                M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
                return true
            end
        end
    end
    if bDebugMessages == true then LOG(sFunctionRef..': Factory is not ready to build') end
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
    return false
end

function SetFactoryRallyPoint(oFactory)
    --Search to the left of the factory as the first choice; if not in buildable area search to the right; then up; then down
    local sFunctionRef = 'SetFactoryRallyPoint'
    local bDebugMessages = false if M28Profiler.bGlobalDebugOverride == true then   bDebugMessages = true end
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerStart)
    local tiAngles = {270, 0, 90, 180}
    local oFactoryBP = oFactory:GetBlueprint()
    local tiFactorySize = {oFactoryBP.Physics.SkirtSizeX, oFactoryBP.Physics.SkirtSizeZ, oFactoryBP.Physics.SkirtSizeX, oFactoryBP.Physics.SkirtSizeZ}
    local tPotentialRally
    local tPreferredRally
    local bDontCheckPlayableArea = not(M28Map.bIsCampaignMap)
    local iBestRallyValue = -100
    local iCurRallyValue
    if bDebugMessages == true then LOG(sFunctionRef..': Near start for factory '..oFactory.UnitId..M28UnitInfo.GetUnitLifetimeCount(oFactory)..' at time '..GetGameTimeSeconds()..'; tiFactoryRadius='..repru(tiFactorySize)..'; Factory position='..repru(oFactory:GetPosition())) end
    for iEntry, iCurAngle in tiAngles do
        for iDistAdjust = 4,2, -2 do
            tPotentialRally = M28Utilities.MoveInDirection(oFactory:GetPosition(), iCurAngle, tiFactorySize[iEntry] * 0.6 + iDistAdjust, true, false, false)
            if bDontCheckPlayableArea or M28Conditions.IsLocationInPlayableArea(tPotentialRally) then
                iCurRallyValue = 4 - iEntry --Prefer them in the angle indicated
                local tNearbyUnits = GetUnitsInRect(tPotentialRally[1] - 1, tPotentialRally[3] - 1, tPotentialRally[1] + 1, tPotentialRally[3] + 1)
                if M28Utilities.IsTableEmpty(tNearbyUnits) == false then
                    iCurRallyValue = iCurRallyValue - 0.25
                    local tNearbyStructures = EntityCategoryFilterDown(M28UnitInfo.refCategoryStructure, tNearbyUnits)
                    if M28Utilities.IsTableEmpty(tNearbyStructures) == false then
                        iCurRallyValue = iCurRallyValue - 4
                    end
                end
                if iDistAdjust > 3 and iDistAdjust <= 7 then iCurRallyValue = iCurRallyValue + 2 end
                if bDebugMessages == true then LOG(sFunctionRef..': tPotentialRally='..repru(tPotentialRally)..'; iDistAdjust='..iDistAdjust..'; iCurAngle='..iCurAngle..'; iCurRallyValue='..iCurRallyValue..'; iBestRallyValue='..iBestRallyValue) end
                if iCurRallyValue > iBestRallyValue then
                    iBestRallyValue = iCurRallyValue
                    tPreferredRally = tPotentialRally
                end
            end
        end
    end
    if not(tPreferredRally) then tPreferredRally = oFactory:GetPosition() end
    oFactory[reftFactoryRallyPoint] = {tPreferredRally[1], tPreferredRally[2], tPreferredRally[3]}
    if M28UnitInfo.bDontConsiderCombinedArmy or oFactory.M28Active then
        if not(oFactory:IsUnitState('Building')) then IssueClearFactoryCommands({oFactory}) end
        IssueFactoryRallyPoint({oFactory}, oFactory[reftFactoryRallyPoint])
    end
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
end

function MovePotentialBlockingUnitsFromFactory(oFactory)
    local sFunctionRef = 'MovePotentialBlockingUnitsFromFactory'
    local bDebugMessages = false if M28Profiler.bGlobalDebugOverride == true then   bDebugMessages = true end
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerStart)
    local aiBrain = oFactory:GetAIBrain()

    local rRect = M28Utilities.GetRectAroundLocation(oFactory:GetPosition(), M28UnitInfo.GetBuildingSize(oFactory.UnitId) * 0.5 - 0.2)
    local tUnitsInRect = GetUnitsInRect(rRect)
    if bDebugMessages == true then LOG(sFunctionRef..': Factory doesnt seem to have been trying to build something for a long time for factory '..oFactory.UnitId..M28UnitInfo.GetUnitLifetimeCount(oFactory)..' owned by brain '..oFactory:GetAIBrain().Nickname..'; so will check for units nearby that arent attached, are complete, and are blocking it. Is tUnitsInRect empty='..tostring(M28Utilities.IsTableEmpty(tUnitsInRect))..'; Team='..aiBrain.M28Team..'; Time='..GetGameTimeSeconds()) end
    if M28Utilities.IsTableEmpty(tUnitsInRect) == false then
        local tMobileLandInRect = EntityCategoryFilterDown(M28UnitInfo.refCategoryMobileLand, tUnitsInRect)
        if bDebugMessages == true then LOG(sFunctionRef..': Is table of mobile land empty='..tostring(M28Utilities.IsTableEmpty(tMobileLandInRect))) end
        if M28Utilities.IsTableEmpty(tMobileLandInRect) == false then
            for iUnit, oUnit in tMobileLandInRect do
                if bDebugMessages == true then LOG(sFunctionRef..': Considering potential blocking unit '..oUnit.UnitId..M28UnitInfo.GetUnitLifetimeCount(oUnit)..'; Fraction complete='..oUnit:GetFractionComplete()..'; Unit state='..tostring(M28UnitInfo.GetUnitState(oUnit))..'; Unit team='..oUnit:GetAIBrain().M28Team..'; Time last tried unblocking move order='..GetGameTimeSeconds() - (oUnit[refiTimeOfLastFacBlockOrder] or -100)) end
                if oUnit:GetFractionComplete() == 1 and oUnit:GetAIBrain().M28AI and oUnit:GetAIBrain().M28Team == aiBrain.M28Team and not(oUnit:IsUnitState('Upgrading')) then
                    --Move the unit unless we've recently given such an order
                    if GetGameTimeSeconds() - (oUnit[refiTimeOfLastFacBlockOrder] or -100) > 10 then

                        if bDebugMessages == true then LOG(sFunctionRef..': Will try and move potential blocking unit '..oUnit.UnitId..M28UnitInfo.GetUnitLifetimeCount(oUnit)) end
                        M28Orders.IssueTrackedMove(oUnit, oFactory[reftFactoryRallyPoint], 0, false, 'FacBlock', true)
                        M28Micro.TrackTemporaryUnitMicro(oUnit, 2)
                        oUnit[refiTimeOfLastFacBlockOrder] = GetGameTimeSeconds()
                    end
                end
            end
        end
    end
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
end

function DelayedCheckIfFactoryBuildingAndRetry(oFactory)
    local sFunctionRef = 'DelayedCheckIfFactoryBuildingAndRetry'
    local bDebugMessages = false if M28Profiler.bGlobalDebugOverride == true then   bDebugMessages = true end
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerStart)
    if not(oFactory[refbActiveDelayedCheck]) then
        oFactory[refbActiveDelayedCheck] = true
        local iBuildCount = (oFactory[refiTotalBuildCount] or 0)
        local iWaitCount = 0
        M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
        WaitSeconds(1)
        M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerStart)
        iWaitCount = iWaitCount + 1
        --Check if factory has been stuck
        while M28UnitInfo.IsUnitValid(oFactory) and oFactory[refiTotalBuildCount] == iBuildCount and oFactory:GetWorkProgress() == 0 and not(oFactory:IsUnitState('Upgrading')) and not(oFactory:IsUnitState('Building')) do
            if bDebugMessages == true then LOG(sFunctionRef..': Time='..GetGameTimeSeconds()..'; oFactory='..oFactory.UnitId..M28UnitInfo.GetUnitLifetimeCount(oFactory)..'; iWaitCount='..iWaitCount..'; oFactory[refiFirstTimeOfLastOrder]='..(oFactory[refiFirstTimeOfLastOrder] or 'nil')) end
            if iWaitCount >= 5 then
                if oFactory[refiFirstTimeOfLastOrder] and GetGameTimeSeconds() - (oFactory[refiFirstTimeOfLastOrder] or 0) >= 5 then
                    if bDebugMessages == true then LOG(sFunctionRef..': Will try and get a new order for the factory and clear blocking units') end
                    if not(EntityCategoryContains(categories.EXTERNALFACTORYUNIT + categories.MOBILE, oFactory.UnitId)) then
                        MovePotentialBlockingUnitsFromFactory(oFactory)
                    end
                    DecideAndBuildUnitForFactory(oFactory:GetAIBrain(), oFactory, true, false)
                    --T3 naval facs - more likely to be unable ot build due to blocking buildings
                    if EntityCategoryContains(M28UnitInfo.refCategoryNavalFactory * categories.TECH3, oFactory.UnitId) then
                        local oBP = oFactory:GetBlueprint()
                        local iFactoryRadiusX = oBP.SizeX * 0.5
                        local iFactoryRadiusZ = oBP.SizeZ * 0.5
                        local iEstShipWidth = 3.3
                        local iEstShipLength = 12.8
                        local tLocation = oFactory:GetPosition()
                        local rBuildArea = Rect(tLocation[1] - iFactoryRadiusX - iEstShipWidth + 0.5, tLocation[3] - iFactoryRadiusZ - iEstShipLength * 0.5 + 0.5, tLocation[1] + - iFactoryRadiusX, tLocation[3] + iFactoryRadiusZ + iEstShipLength * 0.5 - 0.5)
                        local tUnitsInBuildArea = GetUnitsInRect(rBuildArea)
                        if bDebugMessages == true then LOG(sFunctionRef..': Potential blocking buildings for oFactory='..oFactory.UnitId..M28UnitInfo.GetUnitLifetimeCount(oFactory)..'; Is tUnitsInBuildArea empty='..tostring(M28Utilities.IsTableEmpty(tUnitsInBuildArea))..'; rBuildArea='..repru(rBuildArea)..'; Factory position='..repru(oFactory:GetPosition())..'; Time='..GetGameTimeSeconds()) end
                        if M28Utilities.IsTableEmpty(tUnitsInBuildArea) == false then
                            local tBlockingBuildings = EntityCategoryFilterDown(M28UnitInfo.refCategoryStructure - M28UnitInfo.refCategoryNavalFactory, tUnitsInBuildArea)
                            if bDebugMessages == true then LOG(sFunctionRef..': Is tBlockingBuildings empty='..tostring(M28Utilities.IsTableEmpty(tBlockingBuildings))) end
                            if M28Utilities.IsTableEmpty(tBlockingBuildings) == false then
                                if bDebugMessages == true then M28Utilities.DrawRectangle(rBuildArea) end
                                for iBuilding, oBuilding in tBlockingBuildings do
                                    if oBuilding:GetAIBrain().M28AI then
                                        if bDebugMessages == true then LOG(sFunctionRef..'; Will self destruct oBuilding='..oBuilding.UnitId..M28UnitInfo.GetUnitLifetimeCount(oBuilding)) end
                                        M28Orders.IssueTrackedKillUnit(oBuilding)
                                    end
                                end
                            end
                        end
                    end
                end
                break
            end
            M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
            WaitSeconds(1)
            M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerStart)
            iWaitCount = iWaitCount + 1
        end
        oFactory[refbActiveDelayedCheck] = false
    end
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
end

function DecideAndBuildUnitForFactory(aiBrain, oFactory, bDontWait, bConsiderDestroyingForMass)
    --If factory is idle then gets it to build something; if its not idle then keeps checking for up to 20 seconds, but will abort if the factory appears to be building something
    local sFunctionRef = 'DecideAndBuildUnitForFactory'
    local bDebugMessages = false if M28Profiler.bGlobalDebugOverride == true then   bDebugMessages = true end
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerStart)



    if not (oFactory['M28BuilderCheckActive']) then
        oFactory['M28BuilderCheckActive'] = true
        local iTicksWaited = 0
        local bDontCheckCutsceneStatus = true
        if M28Map.bIsCampaignMap and GetGameTimeSeconds() <= 120 then bDontCheckCutsceneStatus = false end
        local bClearFactoryWhenReadyToBuild = false
        if aiBrain.HostileCampaignAI and tonumber(ScenarioInfo.Options.CmpAIDelay) > GetGameTimeSeconds() then
            bClearFactoryWhenReadyToBuild = true
            M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
            WaitSeconds(tonumber(ScenarioInfo.Options.CmpAIDelay) - GetGameTimeSeconds())
            M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerStart)
        end
        if M28UnitInfo.IsUnitValid(oFactory) then

            local bProceed = bDontWait
            if not (bProceed) then
                bProceed = IsFactoryReadyToBuild(oFactory)
            end

            local iWorkProgressStart = (oFactory:GetWorkProgress() or 0)
            local iTicksToWait = 1
            local iPausedTicksWaited = 0

            while not (bProceed) do
                M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
                WaitTicks(iTicksToWait)
                M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerStart)
                if bDontCheckCutsceneStatus or not(ScenarioInfo.OpEnded) then
                    if oFactory[M28UnitInfo.refbPaused] then iPausedTicksWaited = iPausedTicksWaited + 1
                    else
                        iTicksWaited = iTicksWaited + iTicksToWait
                    end
                end
                if M28UnitInfo.IsUnitValid(oFactory) == false then
                    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
                    return nil
                end
                bProceed = IsFactoryReadyToBuild(oFactory)
                if oFactory:GetWorkProgress() > iWorkProgressStart then
                    if bDebugMessages == true then
                        LOG(sFunctionRef .. ': Factory work progress is going up so will abort as it presumably already has an order')
                    end
                    break
                end
                --(naval factories can take longer for larger units to move away, e.g. aircraft carriers)
                if iTicksWaited >= 200 and (iTicksWaited >= 400 or not(EntityCategoryContains(M28UnitInfo.refCategoryNavalFactory, oFactory.UnitId))) then
                    --Only display warning if dealing with a conventional factory (since most of the time other factories will want to be building)
                    if not(oFactory:GetAIBrain()[M28Overseer.refbCloseToUnitCap]) then
                        M28Utilities.ErrorHandler('oFactory has waited more than 200 ticks and still isnt showing as ready to build, oFactory=' .. oFactory.UnitId .. M28UnitInfo.GetUnitLifetimeCount(oFactory) .. '; brain nickname=' .. oFactory:GetAIBrain().Nickname .. '; Work progress=' .. oFactory:GetWorkProgress() .. '; Factory fraction complete=' .. oFactory:GetFractionComplete() .. '; Factory status=' .. M28UnitInfo.GetUnitState(oFactory) .. '; Is command queue empty=' .. tostring(M28Utilities.IsTableEmpty(oFactory:GetCommandQueue())) .. '; iWorkProgressStart=' .. (iWorkProgressStart or 'nil'), true)
                        if bDebugMessages == true then
                            local oFacBrain = oFactory:GetAIBrain()
                            LOG(sFunctionRef..': refiOurHighestAirFactoryTech='..oFacBrain[M28Economy.refiOurHighestAirFactoryTech]..'; Our highest land fac tech='..oFacBrain[M28Economy.refiOurHighestLandFactoryTech]..'; refiOurHighestNavalFactoryTech='..oFacBrain[M28Economy.refiOurHighestNavalFactoryTech])
                        end
                    end
                    break
                elseif iTicksWaited >= 40 then
                    iTicksToWait = math.min(iTicksToWait + 1, 10)
                    if iTicksWaited >= 50 and oFactory:GetWorkProgress() == 0 and not(oFactory:IsUnitState('Upgrading')) and not(oFactory[M28UnitInfo.refbPaused]) then
                        if bDebugMessages == true then LOG(sFunctionRef..': Have a facotry stuck at 0 work progress, factory order blueprint='..(oFactory[M28Orders.reftiLastOrders][oFactory[M28Orders.refiOrderCount]][M28Orders.subrefsOrderBlueprint] or 'nil')..'; oFactory[refiFirstTimeOfLastOrder]='..(oFactory[refiFirstTimeOfLastOrder] or 'nil')) end
                        if oFactory[M28Orders.reftiLastOrders][oFactory[M28Orders.refiOrderCount]][M28Orders.subrefsOrderBlueprint] and ((oFactory[refiFirstTimeOfLastOrder] and GetGameTimeSeconds() - oFactory[refiFirstTimeOfLastOrder] >= 5) or (M28Utilities.IsTableEmpty(oFactory:GetCommandQueue()) == false)) then
                            --Naval facs can take longer for units to clear'; v74 - tried adjusting to allow naval facs to wait >200 ticks
                            if iTicksWaited <= 200 or not(EntityCategoryContains(M28UnitInfo.refCategoryNavalFactory, oFactory.UnitId)) or (oFactory[refiFirstTimeOfLastOrder] and GetGameTimeSeconds() - oFactory[refiFirstTimeOfLastOrder] >= 20) then
                                if bDebugMessages == true then LOG(sFunctionRef..': Factory '..oFactory.UnitId..M28UnitInfo.GetUnitLifetimeCount(oFactory)..' has been waiting a while and isnt ready, will see if issue is a blocking unit') end
                                MovePotentialBlockingUnitsFromFactory(oFactory)
                            end
                        end
                    end
                elseif iPausedTicksWaited >= 600 then
                    M28Utilities.ErrorHandler('oFactory has waited more than 600 ticks where it has been flagged as being paused, oFactory=' .. oFactory.UnitId .. M28UnitInfo.GetUnitLifetimeCount(oFactory) .. '; brain nickname=' .. oFactory:GetAIBrain().Nickname .. '; Work progress=' .. oFactory:GetWorkProgress() .. '; Factory fraction complete=' .. oFactory:GetFractionComplete() .. '; Factory status=' .. M28UnitInfo.GetUnitState(oFactory) .. '; Is command queue empty=' .. tostring(M28Utilities.IsTableEmpty(oFactory:GetCommandQueue())) .. '; iWorkProgressStart=' .. (iWorkProgressStart or 'nil'), true)
                end
            end
            if bProceed then
                if bClearFactoryWhenReadyToBuild and not(oFactory:IsUnitState('Upgrading')) then M28Orders.IssueTrackedClearCommands(oFactory) end
                bDontCheckCutsceneStatus = false
                --Set factory rally point if havent already
                if M28Utilities.IsTableEmpty(oFactory[reftFactoryRallyPoint]) then
                    SetFactoryRallyPoint(oFactory)
                end
                local sBPToBuild, bEnhancement = DetermineWhatToBuild(aiBrain, oFactory)
                if bDebugMessages == true then
                    LOG(sFunctionRef .. ': oFactory=' .. oFactory.UnitId .. M28UnitInfo.GetUnitLifetimeCount(oFactory) .. '; sBPToBuild=' .. (sBPToBuild or 'nil') .. '; Does factory have an empty command queue=' .. tostring(M28Utilities.IsTableEmpty(oFactory:GetCommandQueue())) .. '; Factory work progress=' .. oFactory:GetWorkProgress() .. '; Factory unit state=' .. M28UnitInfo.GetUnitState(oFactory))
                end
                if sBPToBuild then
                    if oFactory[refbPausedToStopDefaultAI] then M28UnitInfo.PauseOrUnpauseMassUsage(oFactory, false) end
                    --Is this an upgrade or a unit to build?
                    if bEnhancement then
                        M28Orders.IssueTrackedEnhancement(oFactory, sBPToBuild, false, 'FacEnh')
                    elseif EntityCategoryContains(M28UnitInfo.refCategoryFactory, sBPToBuild) then
                        M28Economy.UpgradeUnit(oFactory, true)
                    else
                        --Do we already have this order? If so then want to start tracking how long we have had this order for, and consider redundancies after a while in case a unit is blocking us
                        if bDebugMessages == true then LOG(sFunctionRef..': oFactory[refiFirstTimeOfLastOrder]='..(oFactory[refiFirstTimeOfLastOrder] or 'nil')..'; Time from now='..(GetGameTimeSeconds() - (oFactory[refiFirstTimeOfLastOrder] or GetGameTimeSeconds()))..'; Is factory paused='..tostring(oFactory[M28UnitInfo.refbPaused])) end
                        if oFactory[refiFirstTimeOfLastOrder] and not(oFactory[M28UnitInfo.refbPaused]) and oFactory[M28Orders.reftiLastOrders][oFactory[M28Orders.refiOrderCount]][M28Orders.subrefsOrderBlueprint] == sBPToBuild then
                            if GetGameTimeSeconds() - (oFactory[refiFirstTimeOfLastOrder] or -100) >= 5 then --If changing the time from 5s need to also change it in the delayedcheck function
                                --Redundancy with code here - would expect this to be called via DelayedCheckifFactoryBuildingAndRetry
                                MovePotentialBlockingUnitsFromFactory(oFactory)
                            end
                        else
                            oFactory[refiFirstTimeOfLastOrder] = GetGameTimeSeconds()
                            if bDebugMessages == true then LOG(sFunctionRef..': Setting refiFirstTimeOfLastOrder='..oFactory[refiFirstTimeOfLastOrder]) end
                            ForkThread(DelayedCheckIfFactoryBuildingAndRetry, oFactory)
                        end
                        if bDebugMessages == true then LOG(sFunctionRef..': About to send a tracked factory build, sBPToBuild='..sBPToBuild..'; bDontWait='..tostring(bDontWait or false)..'; Factory work progress='..oFactory:GetWorkProgress()..'; Factory last orders='..repru(oFactory[M28Orders.reftiLastOrders])) end
                        --Campaign - clear orders if work progress is 0 to protect against issues where campaign AI script tells the factory to build something it cant due to unit restrictions
                        if M28Map.bIsCampaignMap and oFactory:GetWorkProgress() == 0 then M28Orders.IssueTrackedClearCommands(oFactory) end
                        M28Orders.IssueTrackedFactoryBuild(oFactory, sBPToBuild, bDontWait)
                    end
                else
                    oFactory[refiTimeSinceLastFailedToGetOrder] = GetGameTimeSeconds()
                    --Clear any assisting engineers
                    if bDebugMessages == true then LOG(sFunctionRef..': We dont have anything to build, will wait 10 ticks and try again.  In the meantime will clear all assisting engineers. Is table of assisting units empty='..tostring(M28Utilities.IsTableEmpty(oFactory[M28UnitInfo.reftoUnitsAssistingThis]))) end
                    if M28Utilities.IsTableEmpty(oFactory[M28UnitInfo.reftoUnitsAssistingThis]) == false then
                        local tUnitsToClear = {}
                        for iUnit, oUnit in oFactory[M28UnitInfo.reftoUnitsAssistingThis] do
                            if M28UnitInfo.IsUnitValid(oUnit) then
                                table.insert(tUnitsToClear, oUnit)
                            end
                        end
                        if bDebugMessages == true then LOG(sFunctionRef..': Is tUnitsToClear empty='..tostring(M28Utilities.IsTableEmpty(tUnitsToClear))) end
                        if M28Utilities.IsTableEmpty(tUnitsToClear) == false then
                            for iUnit, oUnit in tUnitsToClear do
                                M28Orders.IssueTrackedClearCommands(oUnit)
                            end
                        end
                        oFactory[M28UnitInfo.reftoUnitsAssistingThis] = {}
                    end
                    --Pause the factory if in campaign and are a campaign AI
                    if M28Map.bIsCampaignMap and aiBrain.CampaignAI then
                        --Pause the factory to stop the AI giving it something to build
                        M28UnitInfo.PauseOrUnpauseMassUsage(oFactory, true, nil, 1)
                        oFactory[refbPausedToStopDefaultAI] = true
                    end

                    local iTicksToWait = math.max(10, M28Land.iTicksPerLandCycle - 1)
                    if EntityCategoryContains(M28UnitInfo.refCategoryQuantumGateway, oFactory.UnitId) then iTicksToWait = iTicksToWait * 5 end

                    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
                    WaitTicks(iTicksToWait)
                    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerStart)
                    if M28UnitInfo.IsUnitValid(oFactory) then
                        local bSelfDestructIfLowMass = false
                        local iExistingT3Factories = 0
                        --Adjust flag for destroying for mass if dealing with a land factory, and we dont have much mass stored, and we have multiple in this zone, and are a core base
                        local iPlateauOrZero, iLandOrWaterZone = M28Map.GetClosestPlateauOrZeroAndZoneToPosition(oFactory:GetPosition())
                        local oBrain = oFactory:GetAIBrain()
                        local iTeam = oBrain.M28Team
                        local tLZOrWZTeamData
                        if iPlateauOrZero > 0 then
                            tLZOrWZTeamData = M28Map.tAllPlateaus[iPlateauOrZero][M28Map.subrefPlateauLandZones][iLandOrWaterZone][M28Map.subrefLZTeamData][iTeam]
                        elseif iLandOrWaterZone then
                            tLZOrWZTeamData = M28Map.tPondDetails[M28Map.tiPondByWaterZone[iLandOrWaterZone]][M28Map.subrefPondWaterZones][iLandOrWaterZone][M28Map.subrefWZTeamData][iTeam]
                        end
                        if tLZOrWZTeamData then
                            local tLZOrWZTeamData = M28Map.tAllPlateaus[iPlateauOrZero][M28Map.subrefPlateauLandZones][iLandOrWaterZone][M28Map.subrefLZTeamData][iTeam]
                            local iFactoryType = M28UnitInfo.GetFactoryType(oFactory)

                            --When factory completes something, oFactory[refiFirstTimeOfLastOrder] should get set to nil (unless it has already started construction)
                            if not(bConsiderDestroyingForMass) and not(oFactory[refiFirstTimeOfLastOrder]) and oBrain:GetEconomyStoredRatio('MASS') <= 0.01 and not(oBrain[M28Overseer.refbPrioritiseLowTech]) and
                                    ((tLZOrWZTeamData[M28Map.subrefLZbCoreBase] and iFactoryType == refiFactoryTypeLand and oBrain[M28Overseer.refbPrioritiseDefence] or oBrain[M28Overseer.refbPrioritiseHighTech] or oBrain[M28Overseer.refbPrioritiseLowTech] or oBrain[M28Overseer.refbPrioritiseNavy] or oBrain[M28Overseer.refbPrioritiseAir] or not(oBrain[M28Map.refbCanPathToEnemyBaseWithLand]) or M28Conditions.GetNumberOfConstructedUnitsMeetingCategoryInZone(tLZOrWZTeamData, M28UnitInfo.refCategoryLandFactory) >= 4) or
                                            (iFactoryType == refiFactoryTypeNaval and not(oFactory[refbPrimaryFactoryForIslandOrPond]) and M28UnitInfo.GetUnitTechLevel(oFactory) < aiBrain[M28Economy.refiOurHighestNavalFactoryTech] and M28Conditions.GetNumberOfConstructedUnitsMeetingCategoryInZone(tLZOrWZTeamData, M28UnitInfo.refCategoryNavalFactory) > 1)) then
                                bConsiderDestroyingForMass = true
                                if bDebugMessages == true then LOG(sFunctionRef..': Will consider destroying for mass afterall') end
                            end
                            if bDebugMessages == true then
                                LOG(sFunctionRef .. ': Considering at time ' .. GetGameTimeSeconds() .. ' whether to ctrlk factory tech level ' .. M28UnitInfo.GetUnitTechLevel(oFactory) .. ' when bHaveLowMass=' .. tostring(M28Conditions.HaveLowMass(aiBrain)) .. ' and highest tech=' .. M28Team.tTeamData[oFactory:GetAIBrain().M28Team][M28Team.subrefiHighestFriendlyFactoryTech] .. '; factory=' .. oFactory.UnitId .. M28UnitInfo.GetUnitLifetimeCount(oFactory) .. '; bConsiderDestroyingForMass=' .. tostring(bConsiderDestroyingForMass or false)..'; oFactory[refiFirstTimeOfLastOrder]='..(oFactory[refiFirstTimeOfLastOrder] or 'nil'))
                            end
                            if bConsiderDestroyingForMass and M28Team.tTeamData[oFactory:GetAIBrain().M28Team][M28Team.subrefiHighestFriendlyFactoryTech] >= 2 and not(oFactory[refbPrimaryFactoryForIslandOrPond]) then
                                local iFactoryTechLevel = M28UnitInfo.GetUnitTechLevel(oFactory)
                                if (not(M28Utilities.bFAFActive) or iFactoryTechLevel == 1 or not(EntityCategoryContains(M28UnitInfo.refCategoryLandHQ, oFactory.UnitId))) and M28Conditions.HaveLowMass(aiBrain) then
                                    if iFactoryType == refiFactoryTypeLand and iFactoryTechLevel < oBrain[M28Economy.refiOurHighestLandFactoryTech] then
                                        local iExistingFactoriesOfHigherTech = 0
                                        local iSearchCategory
                                        if iFactoryTechLevel == 1 then iSearchCategory = M28UnitInfo.refCategoryLandFactory - categories.TECH1
                                        else iSearchCategory = M28UnitInfo.refCategoryLandFactory * categories.TECH3
                                        end
                                        local tExistingFactories = EntityCategoryFilterDown(iSearchCategory, tLZOrWZTeamData[M28Map.subreftoLZOrWZAlliedUnits])
                                        if M28Utilities.IsTableEmpty(tExistingFactories) == false then
                                            iExistingFactoriesOfHigherTech = table.getn(tExistingFactories)
                                        end

                                        if iExistingFactoriesOfHigherTech >= 2 then
                                            bSelfDestructIfLowMass = true
                                        elseif iExistingFactoriesOfHigherTech == 1 then
                                            --Still self destruct if we dont want to prioritise land, or cant navigate by land
                                            if oBrain[M28Overseer.refbPrioritiseDefence] or oBrain[M28Overseer.refbPrioritiseHighTech] or oBrain[M28Overseer.refbPrioritiseLowTech] or oBrain[M28Overseer.refbPrioritiseNavy] or oBrain[M28Overseer.refbPrioritiseAir] or not(oBrain[M28Map.refbCanPathToEnemyBaseWithLand]) then
                                                bSelfDestructIfLowMass = true
                                            end
                                        end
                                        if bDebugMessages == true then
                                            LOG(sFunctionRef .. ': iExistingFactoriesOfHigherTech='..iExistingFactoriesOfHigherTech..'; bSelfDestructIfLowMass='..tostring(bSelfDestructIfLowMass))
                                        end

                                    elseif iFactoryType == refiFactoryTypeAir then
                                        --Consider ctrlking t1 air facs if we have t3 air
                                        if iFactoryTechLevel == 1 and oBrain[M28Economy.refiOurHighestAirFactoryTech] >= 3 then
                                            local tExistingT3Factories = EntityCategoryFilterDown(M28UnitInfo.refCategoryAirFactory * categories.TECH3, tLZOrWZTeamData[M28Map.subreftoLZOrWZAlliedUnits])
                                            if bDebugMessages == true then
                                                LOG(sFunctionRef .. ': Is table of existing T3 air factories empty=' .. tostring(M28Utilities.IsTableEmpty(tExistingT3Factories)) .. ' Brain cur T3 factories=' .. oBrain:GetCurrentUnits(M28UnitInfo.refCategoryAirFactory * categories.TECH3))
                                            end
                                            iExistingT3Factories = table.getn(tExistingT3Factories)
                                            if M28Utilities.IsTableEmpty(tExistingT3Factories) == false and iExistingT3Factories >= 2 and oBrain:GetCurrentUnits(M28UnitInfo.refCategoryAirHQ * categories.TECH3) > 0 then
                                                bSelfDestructIfLowMass = true
                                            end
                                        end
                                    end
                                end
                            end
                        end
                        if bDebugMessages == true then
                            LOG(sFunctionRef .. ': Finished considering if want to ctrlk, bSelfDestructIfLowMass=' .. tostring(bSelfDestructIfLowMass))
                        end
                        if not (bSelfDestructIfLowMass)then
                            ForkThread(DecideAndBuildUnitForFactory, aiBrain, oFactory, false)
                        else
                            sBPToBuild = nil
                            if iExistingT3Factories <= 3 then
                                sBPToBuild, bEnhancement = DetermineWhatToBuild(aiBrain, oFactory)
                            end
                            if bDebugMessages == true then
                                LOG(sFunctionRef .. ': Do we have something to build after checking before ctrlK? sBPToBuild=' .. (sBPToBuild or 'nil'))
                            end
                            if sBPToBuild then
                                ForkThread(DecideAndBuildUnitForFactory, aiBrain, oFactory, false)
                            else
                                --CtrlK for mass
                                if (not(oFactory[M28UnitInfo.refbCampaignTriggerAdded]) or not(M28Map.bIsCampaignMap)) and EntityCategoryContains(M28UnitInfo.refCategoryFactory - categories.EXPERIMENTAL, oFactory.UnitId)  then --entity category contains is a redundancy
                                    if bDebugMessages == true then
                                        LOG(sFunctionRef .. ': Will ctrlK factory ' .. oFactory.UnitId .. M28UnitInfo.GetUnitLifetimeCount(oFactory) .. ' for mass/reclaim')
                                    end
                                    M28Orders.IssueTrackedKillUnit(oFactory)
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    oFactory['M28BuilderCheckActive'] = false
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
end

function SetPriorityPreferredUnitsByCategory(aiBrain)
    --If have multiple units that can build for a particular category, this will specify what to build
    --special cases where want to prioritise one unit over another where multiple of same type satisfy the category
    --NOTE: This gets ignored if we have coded in special cases where we want to pick the fastest or slowest unit
    --Set to less than -100 if want to not build at all even if it is the only unit of that category
    aiBrain[reftBlueprintPriorityOverride] = {}
    --T1

    --NOTE: Turned off prioritisation for the main combat tank, so that we build t1 arti as well as tanks
    --aiBrain[reftBlueprintPriorityOverride]['ual0201'] = 1 --Aurora (instead of LAB)
    --aiBrain[reftBlueprintPriorityOverride]['url0107'] = 1 --Mantis (instead of LAB)
    --aiBrain[reftBlueprintPriorityOverride]['uel0201'] = 1 --Striker (instead of mechmarine)
    --aiBrain[reftBlueprintPriorityOverride]['xsl0201'] = 1 --Thaam (instead of combat scout)

    --Units to disable regardless of prioriotisation settings
    aiBrain[reftBlueprintPriorityOverride]['ssl0403'] = -1000 --experimental reconstruction bot
    aiBrain[reftBlueprintPriorityOverride]['seb2404'] = -1000 --experimental drop pod artillery

    if not(ScenarioInfo.Options.M28PrioritiseBPs == 2) then
        --v89 - moved the LAB logic to when a unit is built so we can build a couple of LABs first before always building tanks
        if not(aiBrain[M28Map.refbCanPathToEnemyBaseWithLand]) then
            aiBrain[reftBlueprintPriorityOverride]['ual0106'] = -1 --LAB (so prioritise aurora instead)
            aiBrain[reftBlueprintPriorityOverride]['url0106'] = -1 --LAB (so prioritise mantis instead)
            aiBrain[reftBlueprintPriorityOverride]['uel0106'] = -1 --Mechmarine (so prioritise striker instead)
        end
        aiBrain[reftBlueprintPriorityOverride]['xsl0101'] = -1 --Combat scout (so prioritise thaam instead)

        --T2
        aiBrain[reftBlueprintPriorityOverride]['uel0202'] = 1 --Pillar (instead of mongoose or riptide)
        aiBrain[reftBlueprintPriorityOverride]['xsl0202'] = 1 --Ilshavoh (instead of hover tank)
        aiBrain[reftBlueprintPriorityOverride]['url0202'] = 1 --Rhino (instead of hover tank)
        aiBrain[reftBlueprintPriorityOverride]['ual0202'] = 1 --Obsidian (instead of blaze)
        --T3
        aiBrain[reftBlueprintPriorityOverride]['uel0303'] = 1 --Titan (instead of Percy)
        aiBrain[reftBlueprintPriorityOverride]['ual0303'] = 1 --Harby (instead of sniper bot)
        --aiBrain[reftBlueprintPriorityOverride]['ual0304'] = 1 --Mobile t3 arti instead of shield disrupter
        aiBrain[reftBlueprintPriorityOverride]['url0303'] = 1 --Loyalist (instead of Brick)
        --aiBrain[reftBlueprintPriorityOverride]['xrl0305'] = 1 --Brick
        aiBrain[reftBlueprintPriorityOverride]['xsl0303'] = 1 --Siege tank (instead of sniper bot)
        aiBrain[reftBlueprintPriorityOverride]['xsl0301'] = 1 --Seraphim basic SACU (instead of preset)

        --Engineers
        aiBrain[reftBlueprintPriorityOverride]['uel0208'] = 1 --T2 Engi (instead of sparky)
        aiBrain[reftBlueprintPriorityOverride]['xrl0302'] = -1000 --fire beetle (so build wagners instead if going for fast units)
        aiBrain[reftBlueprintPriorityOverride]['srs0219'] = -1 --Engineer ship (can get built and used as naval scouts instead of frigate)


        --LOUD and QUIET - Eliash (Aeon shorter range DF experimental that has a shield); also include experimental mobile arti
        aiBrain[reftBlueprintPriorityOverride]['brot3ncm'] = 1
        if categories.brot3ncm then aiBrain[reftBlueprintPriorityOverride]['sal0401'] = 1 end

        aiBrain[reftBlueprintPriorityOverride]['sel0324'] = -1000 --mobile omni (that also has AA so gets misused as an AA unit when

        --AZ Orig LOUD unit mod suggestions (non-QUIET), and other LOUD adjustments
        if M28Utilities.bLoudModActive then
            aiBrain[reftBlueprintPriorityOverride]['xsl0201'] = 1 --Thaams are stronger than protector bots per QUIET discord
            --aiBrain[reftBlueprintPriorityOverride]['brpt1exm1'] = 1 --Looks like a T1.5 type unit - better range than thaam although a bit slower; probably longer to build though; for QUIET will adjust prioritisation separately for this based on lifetime count

            --Seraphim T2:
            aiBrain[reftBlueprintPriorityOverride]['bsl0206'] = 1
            aiBrain[reftBlueprintPriorityOverride]['wsl0202'] = 1
            aiBrain[reftBlueprintPriorityOverride]['brpt2btbot'] = 1
            --UEF T2
            aiBrain[reftBlueprintPriorityOverride]['bel0211'] = 1
            --Cybran T2:
            aiBrain[reftBlueprintPriorityOverride]['brmt2medm'] = 1
            aiBrain[reftBlueprintPriorityOverride]['brmt2ht'] = 1
            --Aeon T2:
            aiBrain[reftBlueprintPriorityOverride]['brot2asb'] = 1

            --Seraphim T3:
            aiBrain[reftBlueprintPriorityOverride]['wsl0308'] = 1
            aiBrain[reftBlueprintPriorityOverride]['brpt3bot'] = 1
            aiBrain[reftBlueprintPriorityOverride]['bsl0306'] = 1
            aiBrain[reftBlueprintPriorityOverride]['bsl0310'] = 1
            --UEF T3:
            aiBrain[reftBlueprintPriorityOverride]['xel0307'] = 1
            aiBrain[reftBlueprintPriorityOverride]['bel0307'] = 1
            aiBrain[reftBlueprintPriorityOverride]['brnt3abb'] = 1
            aiBrain[reftBlueprintPriorityOverride]['brnt3bt'] = 1
            aiBrain[reftBlueprintPriorityOverride]['wel0305'] = 1
            --Cybran T3:
            aiBrain[reftBlueprintPriorityOverride]['brl0307'] = 1
            aiBrain[reftBlueprintPriorityOverride]['srl0311'] = -1 --Az changed mind, apparently they miss a lot
            aiBrain[reftBlueprintPriorityOverride]['brmt3bm2'] = 1
            --aiBrain[reftBlueprintPriorityOverride]['brmt3bt'] (good tank if you cant afford Bricks/etc but you want something better then loyalist)
            --Aeon T3:
            aiBrain[reftBlueprintPriorityOverride]['bal0310'] = 1
            --SAL0311 or brot3bt (Amphibious) (Navy Maps) (Can be built on land but honestly just build harbs with the BAL0310) --further disc - Az noted sal0311 has more range and health than harbs so worth mixing in
            aiBrain[reftBlueprintPriorityOverride]['sal0311'] = 1
            aiBrain[reftBlueprintPriorityOverride]['brot3hm'] = 1

            --T1 skirmisher bots
            aiBrain[reftBlueprintPriorityOverride]['brot1exm1'] = 1
            aiBrain[reftBlueprintPriorityOverride]['brmt1exm1'] = 1
            aiBrain[reftBlueprintPriorityOverride]['uel0108'] = 1
            aiBrain[reftBlueprintPriorityOverride]['brpt1exm1'] = 1

            aiBrain[reftBlueprintPriorityOverride]['ual0204'] = 2 --Aeon T2 sniperbot (very good so will build wherever it's an option)
            --LOUD - sniperbots at t3+ and T1 are weak
            aiBrain[reftBlueprintPriorityOverride]['bal0110'] = -1000 --t1 sniperbot - cant kite so very weak as gets overrun, tries retreating, ends up dying doing nothing
            --Disable T3 sniperbots since in LOUD and QUIET they are terrible
            aiBrain[reftBlueprintPriorityOverride]['wrl0305'] = -1000
            aiBrain[reftBlueprintPriorityOverride]['xal0305'] = -1000
            aiBrain[reftBlueprintPriorityOverride]['xsl0305'] = -1000

            aiBrain[reftBlueprintPriorityOverride]['urs0303'] = -1
            aiBrain[reftBlueprintPriorityOverride]['uas0303'] = -1
            aiBrain[reftBlueprintPriorityOverride]['xss0303'] = -1

            --Prioritise ASFs as penetration fighters dont seem to fire consistently in LOUD
            aiBrain[reftBlueprintPriorityOverride]['uea0303'] = 1
            aiBrain[reftBlueprintPriorityOverride]['ura0303'] = 1
            aiBrain[reftBlueprintPriorityOverride]['uaa0303'] = 1
            aiBrain[reftBlueprintPriorityOverride]['xsa0303'] = 1

        else --QUIET Active:
            --Az chosen unit mod prioritisations - QUIET
            --Seraphim T1:
            --aiBrain[reftBlueprintPriorityOverride]['bsl0106'] = -1 --protector bot - not as good as thaams
            aiBrain[reftBlueprintPriorityOverride]['xsl0201'] = 1 --Thaams are stronger than protector bots per QUIET discord
            aiBrain[reftBlueprintPriorityOverride]['brpt1exm1'] = 1 --Looks like a T1.5 type unit - better range than thaam although a bit slower; however takes much longer to build
            --Aeon T1:
            aiBrain[reftBlueprintPriorityOverride]['ual0108'] = 1
            aiBrain[reftBlueprintPriorityOverride]['brot1bt'] = 1
            --Seraphim T2:
            aiBrain[reftBlueprintPriorityOverride]['bsl0206'] = 1
            aiBrain[reftBlueprintPriorityOverride]['wsl0202'] = 1
            --aiBrain[reftBlueprintPriorityOverride]['brpt2btbot'] = 1
            --UEF T2
            aiBrain[reftBlueprintPriorityOverride]['bel0211'] = 1
            aiBrain[reftBlueprintPriorityOverride]['brnt2mt'] = 1
            --aiBrain[reftBlueprintPriorityOverride]['wel0304'] = 1
            --Cybran T2:
            aiBrain[reftBlueprintPriorityOverride]['brmt2ht'] = 1
            --aiBrain[reftBlueprintPriorityOverride]['brmt2medm'] = 1
            --Aeon T2:
            --aiBrain[reftBlueprintPriorityOverride]['brot2asb'] = 1

            --Seraphim T3:
            aiBrain[reftBlueprintPriorityOverride]['bsl0306'] = 1
            aiBrain[reftBlueprintPriorityOverride]['wsl0308'] = 1
            aiBrain[reftBlueprintPriorityOverride]['ssl0311'] = 1
            -- aiBrain[reftBlueprintPriorityOverride]['brpt3bot'] = 1
            -- aiBrain[reftBlueprintPriorityOverride]['bsl0310'] = 1
            -- UEF T3:
            aiBrain[reftBlueprintPriorityOverride]['brnt3bt'] = 1
            -- aiBrain[reftBlueprintPriorityOverride]['bel0307'] = 1
            -- aiBrain[reftBlueprintPriorityOverride]['wel0305'] = 1
            --Cybran T3:
            aiBrain[reftBlueprintPriorityOverride]['brmt3bt'] = 1
            -- aiBrain[reftBlueprintPriorityOverride]['brl0307'] = 1
            -- aiBrain[reftBlueprintPriorityOverride]['srl0311'] = -1
            -- aiBrain[reftBlueprintPriorityOverride]['brmt3bm2'] = 1
            --Aeon T3:
            -- aiBrain[reftBlueprintPriorityOverride]['bal0310'] = 1
            -- aiBrain[reftBlueprintPriorityOverride]['sal0311'] = 1
            -- aiBrain[reftBlueprintPriorityOverride]['brot3hm'] = 1

            --T1 skirmisher bots
            -- aiBrain[reftBlueprintPriorityOverride]['brot1exm1'] = 1
            -- aiBrain[reftBlueprintPriorityOverride]['brmt1exm1'] = 1
            -- aiBrain[reftBlueprintPriorityOverride]['uel0108'] = 1
            -- aiBrain[reftBlueprintPriorityOverride]['brpt1exm1'] = 1

            aiBrain[reftBlueprintPriorityOverride]['ual0204'] = 1 --Aeon T2 sniperbot
            aiBrain[reftBlueprintPriorityOverride]['xel0307'] = -1000 --UEF T3 Juggernant
            aiBrain[reftBlueprintPriorityOverride]['ssl0403'] = -1000 --experimental reconstruction bot
            aiBrain[reftBlueprintPriorityOverride]['ualx401'] = -1000 --experimental mobile smd

            aiBrain[reftBlueprintPriorityOverride]['bal0110'] = -1000 --t1 sniperbot - cant kite so very weak as gets overrun, tries retreating, ends up dying doing nothing

            --Hoplites and gattling meant to have been fixed/buffed in QUIET so they are able to kite
            aiBrain[reftBlueprintPriorityOverride]['drl0204'] = 1
            aiBrain[reftBlueprintPriorityOverride]['del0204'] = 1

            aiBrain[reftBlueprintPriorityOverride]['urs0303'] = -1
            aiBrain[reftBlueprintPriorityOverride]['uas0303'] = -1
            aiBrain[reftBlueprintPriorityOverride]['xss0303'] = -1

            --Prioritise penetration fighters in QUIET (v200 - disabled on understanding pen fighters have same physics as asfs such that M28 should be ok to build both interchangeably)
            --[[aiBrain[reftBlueprintPriorityOverride]['sra0313'] = 1 --Cybran pen fighter
            aiBrain[reftBlueprintPriorityOverride]['saa0313'] = 1 --Aeon pen fighter
            aiBrain[reftBlueprintPriorityOverride]['sea0313'] = 1 --UEF pen fighter
            aiBrain[reftBlueprintPriorityOverride]['ssa0313'] = 1 --Seraphim pen fighter--]]

            aiBrain[reftBlueprintPriorityOverride]['srl0311'] = 1 --T3 cybran mml?
        end
    end
end

function IdleFactoryMonitor(aiBrain)
    --Cycles through every factory owned by aiBrain, max of 1 factory per tick, to check if it is idle
    local bDebugMessages = false if M28Profiler.bGlobalDebugOverride == true then   bDebugMessages = true end
    local sFunctionRef = 'IdleFactoryMonitor'
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerStart)

    while not (aiBrain.M28IsDefeated) do
        local tOurFactories = aiBrain:GetListOfUnits(M28UnitInfo.refCategoryFactory + M28UnitInfo.refCategoryQuantumGateway + M28UnitInfo.refCategoryMobileLandFactory + M28UnitInfo.refCategorySpecialFactory + M28UnitInfo.refCategoryMobileAircraftFactory, false, true)

        local iTeam
        if M28Utilities.IsTableEmpty(tOurFactories) == false then
            for iFactory, oFactory in tOurFactories do
                if M28UnitInfo.IsUnitValid(oFactory) and oFactory:GetFractionComplete() == 1 then
                    if bDebugMessages == true then LOG(sFunctionRef..': Considering factory'..oFactory.UnitId..M28UnitInfo.GetUnitLifetimeCount(oFactory)..' at time '..GetGameTimeSeconds()..'; Is factory ready to build='..tostring(IsFactoryReadyToBuild(oFactory))..'; oFactory[M28UnitInfo.refbPaused]='..tostring(oFactory[M28UnitInfo.refbPaused] or false)..'; oFactory:IsPaused()='..tostring(oFactory:IsPaused())..'; Time since last order='..(GetGameTimeSeconds() - (oFactory[refiTimeSinceLastOrderCheck] or 0))) end
                    if IsFactoryReadyToBuild(oFactory) and GetGameTimeSeconds() - (oFactory[refiTimeSinceLastOrderCheck] or 0) >= 5 then
                        if bDebugMessages == true then LOG(sFunctionRef..'; more than 5s since we have checked for an order, will consider self destruct') end
                        oFactory[refiTimeSinceLastOrderCheck] = GetGameTimeSeconds()
                        ForkThread(DecideAndBuildUnitForFactory, aiBrain, oFactory, nil, true)
                        --Redundancy for paused factories (in theory shouldnt be needed)
                    elseif oFactory[M28UnitInfo.refbPaused] or oFactory:IsPaused() then
                        iTeam = oFactory:GetAIBrain().M28Team
                        if bDebugMessages == true then LOG(sFunctionRef..': M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingEnergy]='..tostring(M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingEnergy] or false)..'; M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingMass]='..tostring(M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingMass] or false)..'; M28Team.tTeamData[M28Team.subrefiTeamNetMass]='..(M28Team.tTeamData[M28Team.subrefiTeamNetMass] or 'nil')..'; M28Team.tTeamData[M28Team.subrefiTeamNetEnergy]='..(M28Team.tTeamData[M28Team.subrefiTeamNetEnergy] or 'nil')) end
                        if not(M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingEnergy]) and not(M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingMass]) and (M28Team.tTeamData[iTeam][M28Team.subrefiTeamNetMass] > 0 or M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.4) and M28Team.tTeamData[iTeam][M28Team.subrefiTeamNetEnergy] > 0 then
                            M28UnitInfo.PauseOrUnpauseMassUsage(oFactory, false, iTeam)
                            if bDebugMessages == true then LOG(sFunctionRef..': Unpause override for factory '..oFactory.UnitId..M28UnitInfo.GetUnitLifetimeCount(oFactory)) end
                        end
                    elseif oFactory[refiFirstTimeOfLastOrder] and GetGameTimeSeconds() - oFactory[refiFirstTimeOfLastOrder] >= 15 and oFactory:GetWorkProgress() == 0 and GetGameTimeSeconds() - (oFactory[refiTimeSinceLastOrderCheck] or 0) >= 5 and M28UnitInfo.GetUnitState(oFactory) == '' then
                        if bDebugMessages == true then LOG(sFunctionRef..': Have a factory that hasnt been given an order to build for some time now, will call DecideAndBuildUnitForFactory for the factory, and consider self destructing if no order') end
                        oFactory[refiTimeSinceLastOrderCheck] = GetGameTimeSeconds()
                        ForkThread(DecideAndBuildUnitForFactory, aiBrain, oFactory, nil, true)
                    end
                end
                M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
                WaitTicks(1)
                M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerStart)
            end
        end
        M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
        WaitTicks(1)
        M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerStart)
    end
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
end

function GetBlueprintToBuildForAirFactory(aiBrain, oFactory)
    local sFunctionRef = 'GetBlueprintToBuildForAirFactory'
    local bDebugMessages = false if M28Profiler.bGlobalDebugOverride == true then   bDebugMessages = true end
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerStart)

    local iCategoryToBuild
    local iTeam = aiBrain.M28Team
    local iPlateau, iLandZone = M28Map.GetPlateauAndLandZoneReferenceFromPosition(oFactory:GetPosition(), true, oFactory)
    local tLZData = M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iLandZone]
    local tLZTeamData = tLZData[M28Map.subrefLZTeamData][iTeam]
    local iFactoryTechLevel = M28UnitInfo.GetUnitTechLevel(oFactory)
    local iAirSubteam = aiBrain.M28AirSubteam
    local bHaveLowMass = M28Conditions.TeamHasLowMass(iTeam)
    local bHaveLowPower = M28Conditions.HaveLowPower(iTeam)
    local bSaveMassDueToEnemyFirebaseOrOurExperimental
    if M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.subreftTeamEngineersBuildingExperimentals]) == false and bHaveLowMass then
        bSaveMassDueToEnemyFirebaseOrOurExperimental = true
    else
        bSaveMassDueToEnemyFirebaseOrOurExperimental = M28Conditions.WantToEcoDueToEnemyFirebase(iTeam, tLZTeamData, iPlateau)
    end



    if bDebugMessages == true then
        LOG(sFunctionRef .. ': Near start of code, time=' .. GetGameTimeSeconds() .. '; oFactory=' .. oFactory.UnitId .. M28UnitInfo.GetUnitLifetimeCount(oFactory) .. '; Checking if we have the highest tech land factory in the current land zone, iFactoryTechLevel=' .. iFactoryTechLevel .. '; Highest friendly factory tech=' .. M28Team.tTeamData[iTeam][M28Team.subrefiHighestFriendlyFactoryTech] .. '; Allied ground threat=' .. (M28Team.tTeamData[iTeam][M28Team.subrefiAlliedMAAThreat] or 'nil') .. '; M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat]=' .. (M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] or 'nil') .. '; M28Team.tTeamData[iTeam][M28Team.refiEnemyAirAAThreat]=' .. (M28Team.tTeamData[iTeam][M28Team.refiEnemyAirAAThreat] or 'nil') .. '; M28Team.tTeamData[iTeam][M28Team.refiEnemyTorpBombersThreat]=' .. (M28Team.tTeamData[iTeam][M28Team.refiEnemyTorpBombersThreat] or 'nil') .. '; M28Team.tTeamData[iTeam][M28Team.refiEnemyAirOtherThreat]=' .. (M28Team.tTeamData[iTeam][M28Team.refiEnemyAirOtherThreat] or 'nil') .. '; Is factory paused=' .. tostring(oFactory:IsPaused()) .. '; IsPaused value=' .. tostring(oFactory[M28UnitInfo.refbPaused]) .. '; Does LZ factory is in need BP=' .. tostring(tLZTeamData[M28Map.subrefTbWantBP]) .. '; Core LZ=' .. tostring(tLZTeamData[M28Map.subrefLZbCoreBase] or false) .. '; Core expansion=' .. tostring(tLZTeamData[M28Map.subrefLZCoreExpansion] or false) .. '; Time since a factory in this LZ last built something=' .. GetGameTimeSeconds() - (tLZTeamData[M28Map.refiTimeLastBuiltAtFactory] or -100) .. '; bHaveLowMass=' .. tostring(bHaveLowMass) .. '; bHaveLowPower=' .. tostring(bHaveLowPower)..'; brain='..oFactory:GetAIBrain().Nickname..'; Net E (brain)='..aiBrain[M28Economy.refiNetEnergyBaseIncome]..'; GrossE='..aiBrain[M28Economy.refiGrossEnergyBaseIncome]..'; E % stored='..aiBrain:GetEconomyStoredRatio('ENERGY'))
    end


    iCategoryToBuild = M28UnitInfo.refCategoryEngineer --Placeholder
    local sBPIDToBuild
    local iCurrentConditionToTry = 0

    function ConsiderUpgrading()
        if not(M28Conditions.CheckIfNeedMoreEngineersOrSnipeUnitsBeforeUpgrading(oFactory)) then
            sBPIDToBuild = M28UnitInfo.GetUnitUpgradeBlueprint(oFactory, true)
            if sBPIDToBuild then M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd) end
            return sBPIDToBuild
        end
    end

    --subfunctions to mean we can do away with the 'current condition == 1, == 2.....==999 type approach making it much easier to add to
    function ConsiderBuildingCategory(iCategoryToBuild)
        --GetBlueprintThatCanBuildOfCategory(aiBrain, iCategoryCondition, oFactory, bGetSlowest, bGetFastest, bGetCheapest, iOptionalCategoryThatMustBeAbleToBuild, bIgnoreTechDifferences)
        sBPIDToBuild = GetBlueprintThatCanBuildOfCategory(aiBrain, iCategoryToBuild, oFactory, nil,             nil,        nil,        nil,                                    false)

        if bDebugMessages == true then
            LOG(sFunctionRef .. ': Time=' .. GetGameTimeSeconds() .. ' Factory=' .. oFactory.UnitId .. M28UnitInfo.GetUnitLifetimeCount(oFactory) .. '; LZ=' .. iLandZone .. '; iCurrentConditionToTry=' .. iCurrentConditionToTry .. '; sBPIDToBuild before adjusting for override=' .. (sBPIDToBuild or 'nil'))
        end
        if sBPIDToBuild then
            sBPIDToBuild = AdjustBlueprintForOverrides(aiBrain, oFactory, sBPIDToBuild, tLZTeamData, iFactoryTechLevel)
        end
        if sBPIDToBuild then
            if bDebugMessages == true then LOG(sFunctionRef..': Blueprint still valid after considering overrides') end
            M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd) --Assumes we will end code if we get to this point
            return sBPIDToBuild
        elseif bDebugMessages == true then LOG(sFunctionRef..': No valid BP after override')
        end
    end

    --If we have nearby enemy groundAA then dont try building anything unless we have lots of mass (or it is a campaign map and early game)
    if tLZTeamData[M28Map.subrefiThreatEnemyGroundAA] > 0 and tLZTeamData[M28Map.subrefiThreatEnemyGroundAA] > iFactoryTechLevel * iFactoryTechLevel * 50 and (bHaveLowMass or bHaveLowPower or M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] <= 0.7) and (GetGameTimeSeconds() >= 300 or not(M28Map.bIsCampaignMap)) then
        --Consider building an engineer
        if bDebugMessages == true then LOG(sFunctionRef..'Nearby enemy groundAA threat so no point building from air fac unless have lots of resources to spare, will consider getting engineers if not low on mass and no enemy combat threat') end
        if not(bHaveLowMass) and tLZTeamData[M28Map.subrefTbWantBP] and tLZTeamData[M28Map.subrefTThreatEnemyCombatTotal] <= 10 and M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.25 then
            if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then return sBPIDToBuild end
        end
        if bDebugMessages == true then LOG(sFunctionRef..': Will just not build anything') end
        M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
        return nil
    end

    --Unit counts
    local iBrainAirScouts --nil if havent got the value yet

    local iNormalBomberCategoryToBuild, iGunshipCategoryUnlessBombersBetter, iBackupAirToGroundCategory, bAirToGroundIsIneffective = GetBomberAndGunshipOrBomberPreferredCategoryForPrimaryAirToGround(iTeam, iFactoryTechLevel, iAirSubteam, aiBrain)

    --MAIN BUILDER LOGIC:
    --Early bomber build order
    if bDebugMessages == true then LOG(sFunctionRef..': First bomber logic check, iFactoryTechLevel='..iFactoryTechLevel..'; aiBrain[M28Overseer.refbFirstBomber]='..tostring(aiBrain[M28Overseer.refbFirstBomber] or false)..'; Factory LC='..M28UnitInfo.GetUnitLifetimeCount(oFactory)..'; Bomber LC='..M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryBomber)) end
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if iFactoryTechLevel == 1 and aiBrain[M28Overseer.refbFirstBomber] and M28UnitInfo.GetUnitLifetimeCount(oFactory) == 1 and M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryBomber) == 0 then
        if ConsiderBuildingCategory(M28UnitInfo.refCategoryBomber) then return sBPIDToBuild end
    end

    --Engineers for start of game (e.g. relevant for if gone first bomber)
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if iFactoryTechLevel == 1 and M28UnitInfo.GetUnitLifetimeCount(oFactory) == 1 and M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryEngineer) < 7 and tLZTeamData[M28Map.subrefTbWantBP] then
        if bDebugMessages == true then LOG(sFunctionRef..': Will try and get early engi') end
        if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then return sBPIDToBuild end
    end


    --Extreme unit cap scenario - avoid building more air and just abort altogether - if we dont have low mass and are at -1 or worse unit cap, then suggests we may not be able to build any more units
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if aiBrain[M28Overseer.refbCloseToUnitCap] and iFactoryTechLevel >= 3 and not(bHaveLowMass) and not(bHaveLowPower) and M28Team.tTeamData[aiBrain.M28Team][M28Team.refiLowestUnitCapAdjustmentLevel] <= -1 and aiBrain[M28Overseer.refiExpectedRemainingCap] < 20 then
        if bDebugMessages == true then LOG(sFunctionRef..': Close to unit cap with high mass stored so wont build anything from air fac') end
        M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
        return nil
    end

    iCurrentConditionToTry = iCurrentConditionToTry + 1
    --Special priority flag to build engineer
    if oFactory[refbWantNextUnitToBeEngineer] then
        oFactory[refbWantNextUnitToBeEngineer] = false
        if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then return sBPIDToBuild end
    end
    --Low power - only consider building engineers (if have lots of mass) unless enemies already attacking
    if bDebugMessages == true then
        LOG(sFunctionRef .. ': If low power then will only consider building engineers or emergency AirAA, bHaveLowPower=' .. tostring(bHaveLowPower))
    end
    if bHaveLowPower then
        M28Team.tTeamData[iTeam][M28Team.refiEnergyWhenAirFactoryLastUnableToBuildAir] = M28Team.tTeamData[iTeam][M28Team.subrefiTeamGrossEnergy]

        --Emergency gunship builder if have no gunships and nearby enemies, even if low power
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageEnergyPercentStored] >= 0.7 and (iFactoryTechLevel >= 2 or M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subrefTEnemyUnits]) == false or (aiBrain[M28Economy.refiGrossEnergyBaseIncome] >= 30 and M28Team.tTeamData[iTeam][M28Team.refiEnemyAirAAThreat] == 0 and M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryBomber + M28UnitInfo.refCategoryGunship) <= 3)) and tLZTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ] then
            local iOurGunshipThreat = 0
            local iOurBomberThreat = 0
            local tiSubteamsConsidered = {}
            if M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.subreftoFriendlyActiveM28Brains]) == false then
                for iBrain, oBrain in M28Team.tTeamData[iTeam][M28Team.subreftoFriendlyActiveM28Brains] do
                    if not (tiSubteamsConsidered[oBrain.M28AirSubteam]) then
                        tiSubteamsConsidered[oBrain.M28AirSubteam] = true
                        iOurGunshipThreat = iOurGunshipThreat + (M28Team.tAirSubteamData[oBrain.M28AirSubteam][M28Team.subrefiOurGunshipThreat] or 0)
                        iOurBomberThreat = iOurBomberThreat + (M28Team.tAirSubteamData[oBrain.M28AirSubteam][M28Team.subrefiOurBomberThreat] or 0)
                    end
                end
            end
            if bDebugMessages == true then LOG(sFunctionRef..': Emergency gunship builder for enemies in this zone, iOurGunshipThreat='..(iOurGunshipThreat or 'nil')..'; M28Team.tAirSubteamData[iTeam][M28Team.subrefiOurAirAAThreat]='..(M28Team.tTeamData[iTeam][M28Team.refiEnemyAirAAThreat] or 'nil')) end
            if iOurGunshipThreat == 0 or (iOurGunshipThreat < 600 and (iOurGunshipThreat < 200 * iFactoryTechLevel or iOurGunshipThreat < M28Team.tAirSubteamData[iTeam][M28Team.subrefiOurAirAAThreat]) and (M28Team.tTeamData[iTeam][M28Team.refiEnemyAirAAThreat] == 0 or (tLZTeamData[M28Map.subrefTThreatEnemyCombatTotal] > math.min(500, (tLZTeamData[M28Map.subrefLZTThreatAllyCombatTotal] or 0) * 0.5) and (tLZTeamData[M28Map.refiEnemyAirAAThreat] or 0) < 20 and ((tLZTeamData[M28Map.subrefiThreatEnemyGroundAA] or 0) == 0 or tLZTeamData[M28Map.subrefiThreatEnemyGroundAA] < iFactoryTechLevel * iFactoryTechLevel * 50)))) then
                if bDebugMessages == true then LOG(sFunctionRef..': Have no or almost no gunship threat and enemy lacks airaa so will try and build some, iOurGunshipThreat='..iOurGunshipThreat) end
                if ConsiderBuildingCategory(M28UnitInfo.refCategoryGunship) then return sBPIDToBuild end
                if iOurBomberThreat == 0 or (iOurBomberThreat <= 250 and M28Team.tTeamData[iTeam][M28Team.refiEnemyAirAAThreat] == 0) then
                    if ConsiderBuildingCategory(iNormalBomberCategoryToBuild) then return sBPIDToBuild end
                end
            end
        end

        --Emergency AirAA if enemy air to ground threat overall and we haven't built many inties, or is air to gorund threat in this zone, subject to if we are power stalling
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageEnergyPercentStored] >= 0.95 and M28Team.tTeamData[iTeam][M28Team.subrefiTeamNetEnergy] > 0 and not(M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingEnergy]) then
            if tLZTeamData[M28Map.refiEnemyAirToGroundThreat] > 0 or (M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] > 0 and aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryAirAA) <= 2) then
                if ConsiderBuildingCategory(M28UnitInfo.refCategoryAirAA) then return sBPIDToBuild end
            end
        end

        --Snipe target if not stalling power
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if bDebugMessages == true then LOG(sFunctionRef..': Considering if we have any active snipe targets, is table of active snipe targets empty='..tostring(M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.toActiveSnipeTargets]))..'; Is table of bomber snipe targets empty='..tostring(M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.toBomberSnipeTargets]))..'; Are we stalling E='..tostring(M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingEnergy])) end
        if M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.toActiveSnipeTargets]) == false and not(M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingEnergy]) then
            local oACUToSnipe = M28Conditions.GetNearbyACUForAirFacBomberSnipe(oFactory, iTeam)
            if oACUToSnipe and (not(M28Team.tAirSubteamData[iAirSubteam][M28Team.refbNoAvailableTorpsForEnemies]) or iFactoryTechLevel == 1) then
                if M28Utilities.bLoudModActive and iFactoryTechLevel >= 3 and ConsiderBuildingCategory(M28UnitInfo.refCategoryGunship) then return sBPIDToBuild
                elseif iFactoryTechLevel == 2 and EntityCategoryContains(categories.UEF, oFactory.UnitId) and ConsiderBuildingCategory(iNormalBomberCategoryToBuild * categories.TECH1) then
                    if bDebugMessages == true then LOG(sFunctionRef..': Low power will build T1 UEF bombers due to ACU snipe target, oACUToSnipe='..oACUToSnipe.UnitId..M28UnitInfo.GetUnitLifetimeCount(oACUToSnipe)) end
                    return sBPIDToBuild
                elseif iFactoryTechLevel == 2 and EntityCategoryContains(categories.AEON, oFactory.UnitId) and M28Utilities.bFAFActive and ConsiderBuildingCategory(iGunshipCategoryUnlessBombersBetter) then
                    if bDebugMessages == true then LOG(sFunctionRef..': Low power Aeon T2 air fac so will get spectres for snipe due to their high alpha damage') end
                    return sBPIDToBuild
                elseif ConsiderBuildingCategory(iNormalBomberCategoryToBuild) then
                    if bDebugMessages == true then LOG(sFunctionRef..': Low power sniper, will build bombers due to ACU snipe target, oACUToSnipe='..oACUToSnipe.UnitId..M28UnitInfo.GetUnitLifetimeCount(oACUToSnipe)) end
                    return sBPIDToBuild
                end
            end
            --T2 Cybran and Sera bomber snipes if have built at least 1 unit from this factory
        elseif M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.toBomberSnipeTargets]) == false and iFactoryTechLevel >= 2 and not(M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingEnergy]) and EntityCategoryContains(categories.CYBRAN + categories.SERAPHIM, oFactory.UnitId) then
            if bDebugMessages == true then LOG(sFunctionRef..': Will build bomber for low power special bomber snipe target') end
            if ConsiderBuildingCategory(iNormalBomberCategoryToBuild) then return sBPIDToBuild end
        end

        --High priority transport if a large map and we ought to have enough
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if bDebugMessages == true then LOG(sFunctionRef..': High priority transport builder even if have low power, Team net energy='..M28Team.tTeamData[iTeam][M28Team.subrefiTeamNetEnergy]..'; Factoyr b uild count='..oFactory[refiTotalBuildCount]..'; Brain % energy stored='..aiBrain:GetEconomyStoredRatio('ENERGY')..'; Brain gross energy='..aiBrain[M28Economy.refiGrossEnergyBaseIncome]) end
        if iFactoryTechLevel == 1 and (M28Team.tTeamData[iTeam][M28Team.subrefiTeamNetEnergy] >= 10 * (0.5 + 0.5 * M28Team.tTeamData[iTeam][M28Team.subrefiActiveM28BrainCount]) * aiBrain[M28Economy.refiBrainBuildRateMultiplier] or (M28Team.tTeamData[iTeam][M28Team.subrefiTeamNetEnergy] >= 6 and aiBrain:GetEconomyStored('ENERGY') >= 2000)) and aiBrain:GetEconomyStoredRatio('ENERGY') >= 0.15 and aiBrain[M28Economy.refiGrossEnergyBaseIncome] >= 22 then
            if bDebugMessages == true then LOG(sFunctionRef..': Is island shortlist empty='..tostring(M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.reftTransportIslandDropShortlist]))) end
            if (M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.reftTransportIslandDropShortlist]) == false or M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.reftTransportFarAwaySameIslandPlateauLandZoneDropShortlist]) == false or M28Team.tTeamData[iTeam][M28Team.refbEnemyBaseInCombatDropShortlist]) and aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryTransport) == 0 and ((M28Team.tTeamData[iTeam][M28Team.refbEnemyBaseInCombatDropShortlist] and M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryTransport) >= 1) or M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryTransport) == 0) then
                local iAlreadyBuilding = M28Conditions.GetNumberOfUnitsMeetingCategoryUnderConstructionInLandOrWaterZone(tLZTeamData, M28UnitInfo.refCategoryTransport, false)
                if iAlreadyBuilding == 0 then

                    M28Team.tAirSubteamData[aiBrain.M28AirSubteam][M28Team.refiTimeLastTriedBuildingTransport] = GetGameTimeSeconds()
                    if bDebugMessages == true then LOG(sFunctionRef..': Will try and build a transport as a high priority, iCurrentConditionToTry='..iCurrentConditionToTry) end
                    if ConsiderBuildingCategory(M28UnitInfo.refCategoryTransport * categories.TECH1) then
                        return sBPIDToBuild
                    end
                end
            end
        end

        --1-off air scout to help bomber find engineers if we have just built a bomber
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if bDebugMessages == true then LOG(sFunctionRef..': High priority low power first air scout to support engi hunter check, iFactoryTechLevel='..iFactoryTechLevel..'; Time of last engi hunter order='..GetGameTimeSeconds() - (M28Team.tAirSubteamData[iAirSubteam][M28Team.reftiTimeOfLastEngiHunterBomberOrder] or 0)..'; Lifetime air scout='..M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryAirScout)..'; Number of bombers we own='..aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryBomber)..'; Enemies in this or adj zone='..tostring(tLZTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ])..'; Factory[refbJustBuiltFirstT1Bomber]='..tostring(oFactory[refbJustBuiltFirstT1Bomber] or false)..'; Air scouts under construction in team='..M28Conditions.GetNumberOfUnderConstructionUnitsOfCategoryInOtherZones(tLZTeamData, iTeam, M28UnitInfo.refCategoryAirScout)..'; Mass%='..aiBrain:GetEconomyStoredRatio('MASS')) end
        if iFactoryTechLevel == 1 and not(tLZTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ]) and oFactory[refbJustBuiltFirstT1Bomber] and (bHaveLowMass or aiBrain:GetEconomyStoredRatio('MASS') <= 0.65) and M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryAirScout) == 0 and M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryBomber) > 0 and aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryBomber) > 0 and M28Conditions.GetNumberOfUnderConstructionUnitsOfCategoryInOtherZones(tLZTeamData, iTeam, M28UnitInfo.refCategoryAirScout) == 0 then
            if bDebugMessages == true then LOG(sFunctionRef..': Will try and get an air scout') end
            if ConsiderBuildingCategory(M28UnitInfo.refCategoryAirScout) then return sBPIDToBuild end
        end

        --T2 air fac upgrade if in safe zone
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if bDebugMessages == true then LOG(sFunctionRef..': Low power t2 or t3 upgrade if in safe zone, tLZTeamData[M28Map.refbBaseInSafePosition]='..tostring(tLZTeamData[M28Map.refbBaseInSafePosition] or false)..'; Enemies in this zone='..tostring(tLZTeamData[M28Map.subrefbDangerousEnemiesInThisLZ] or false)..'; Zone wants t1 spam='..tostring(M28Conditions.ZoneWantsT1Spam(tLZTeamData, iTeam) or false)..'; Brain gross energy income='..aiBrain[M28Economy.refiGrossEnergyBaseIncome]..'; Energy stored='..aiBrain:GetEconomyStored('ENERGY')..'; Team gross energy='..M28Team.tTeamData[iTeam][M28Team.subrefiTeamGrossEnergy]) end
        if iFactoryTechLevel < 3 and not(aiBrain[M28Overseer.refbPrioritiseLand]) and not(aiBrain[M28Overseer.refbPrioritiseNavy]) and tLZTeamData[M28Map.refbBaseInSafePosition] and not(tLZTeamData[M28Map.subrefbDangerousEnemiesInThisLZ]) and not(M28Conditions.ZoneWantsT1Spam(tLZTeamData, iTeam)) and aiBrain:GetEconomyStored('ENERGY') >= 4950 and (aiBrain[M28Economy.refiGrossEnergyBaseIncome] >= 50 or (aiBrain[M28Economy.refiGrossEnergyBaseIncome] >= 44 and aiBrain:GetEconomyStored('ENERGY') >= 5000 and M28Team.tTeamData[iTeam][M28Team.subrefiTeamGrossEnergy] >= 36*M28Team.tTeamData[iTeam][M28Team.subrefiActiveM28BrainCount])) then
            local bActiveHQUpgrade = false
            if M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subreftoActiveUpgrades]) == false then
                local tUpgradingAir
                if iFactoryTechLevel == 1 then tUpgradingAir = EntityCategoryFilterDown(M28UnitInfo.refCategoryAirFactory, tLZTeamData[M28Map.subreftoActiveUpgrades])
                else tUpgradingAir = EntityCategoryFilterDown(M28UnitInfo.refCategoryAirFactory - categories.TECH1, tLZTeamData[M28Map.subreftoActiveUpgrades])
                end
                if M28Utilities.IsTableEmpty(tUpgradingAir) == false then
                    for iUpgrading, oUpgrading in tUpgradingAir do
                        if M28UnitInfo.GetUnitTechLevel(oUpgrading) >= iFactoryTechLevel then
                            bActiveHQUpgrade = true
                            break
                        end
                    end
                end
            end
            if bDebugMessages == true then LOG(sFunctionRef..': Low power bActiveHQUpgrade='..tostring(bActiveHQUpgrade)) end
            if not(bActiveHQUpgrade) then
                --Do we have eco to support an upgrade?
                if bDebugMessages == true then LOG(sFunctionRef..': Low power Energy stored='..aiBrain:GetEconomyStored('ENERGY')..'; % E stored='..aiBrain:GetEconomyStoredRatio('ENERGY')..'; Team net energy='..M28Team.tTeamData[iTeam][M28Team.subrefiTeamNetEnergy]..'; brain gross energy='..aiBrain[M28Economy.refiGrossEnergyBaseIncome]..'; bHaveLowMass='..tostring(bHaveLowMass)..'; Mass gross brain inc='..aiBrain[M28Economy.refiGrossMassBaseIncome]) end
                if iFactoryTechLevel == 1 then
                    if (M28Team.tTeamData[iTeam][M28Team.subrefiTeamNetEnergy] >= 8*aiBrain[M28Economy.refiBrainResourceMultiplier] or (aiBrain[M28Overseer.refbPrioritiseAir] and aiBrain[M28Economy.refiNetEnergyBaseIncome] >= 4*aiBrain[M28Economy.refiBrainResourceMultiplier])) and not(aiBrain[M28Overseer.refbPrioritiseLowTech]) and aiBrain[M28Economy.refiGrossEnergyBaseIncome] >= 40*aiBrain[M28Economy.refiBrainResourceMultiplier] and (not(bHaveLowMass) or aiBrain[M28Economy.refiGrossMassBaseIncome] >= 2*aiBrain[M28Economy.refiBrainResourceMultiplier]) then
                        --Do we have a decent number of engis in this zone already?
                        local bWantMoreEngisInstead = false
                        if tLZTeamData[M28Map.subrefTbWantBP] and not(bHaveLowMass) and aiBrain:GetEconomyStoredRatio('MASS') >= 0.2 then
                            bWantMoreEngisInstead = true
                            if bDebugMessages == true then LOG(sFunctionRef..': Engis in zone='..GetEngiCountInZone()) end
                            if GetEngiCountInZone() >= 8 then
                                bWantMoreEngisInstead = false
                            end
                        end
                        if bWantMoreEngisInstead then
                            if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then
                                return sBPIDToBuild
                            end
                        else
                            if bDebugMessages == true then LOG(sFunctionRef..': Want to get priority upgrade to T2 air for safe zone') end
                            if ConsiderUpgrading() then return sBPIDToBuild end
                        end
                    end
                else --T2 to T3 air
                    if aiBrain:GetEconomyStoredRatio('ENERGY') >= 0.99 and (M28Team.tTeamData[iTeam][M28Team.subrefiTeamNetEnergy] >= 25*aiBrain[M28Economy.refiBrainResourceMultiplier] or (aiBrain[M28Overseer.refbPrioritiseAir] and aiBrain[M28Economy.refiNetEnergyBaseIncome] >= 15*aiBrain[M28Economy.refiBrainResourceMultiplier])) and aiBrain[M28Economy.refiGrossEnergyBaseIncome] >= 95*aiBrain[M28Economy.refiBrainResourceMultiplier] and (not(bHaveLowMass) or aiBrain[M28Economy.refiGrossMassBaseIncome] >= 5*aiBrain[M28Economy.refiBrainResourceMultiplier]) then
                        if bDebugMessages == true then LOG(sFunctionRef..': Want to get low power priority upgrade to T3 air for safe zone') end
                        if ConsiderUpgrading() then return sBPIDToBuild end
                        if bDebugMessages == true then LOG(sFunctionRef..': Want more engis before we go to t3 air') end
                        if oFactory[refbWantMoreEngineersBeforeUpgrading] then ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) end
                    end
                end
            end
        end

        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if bDebugMessages == true then
            LOG(sFunctionRef .. ': AIr fac low power engi builder: bHaveLowMass=' .. tostring(bHaveLowMass) .. '; M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored]=' .. M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] .. '; subrefTbWantBP=' .. tostring(tLZTeamData[M28Map.subrefTbWantBP] or false))
        end
        if not (bHaveLowMass) and tLZTeamData[M28Map.subrefTbWantBP] then
            if M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.4 or (M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.25 and iFactoryTechLevel >= M28Team.tTeamData[iTeam][M28Team.subrefiHighestFriendlyFactoryTech]) then
                if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then
                    return sBPIDToBuild
                end
            end
        end

        --1-off bomber to hunt engineers (low power version)
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if bDebugMessages == true then LOG(sFunctionRef..': 1 bomber high prioerty builder, Lifetime build count='..M28Conditions.GetAirSubteamLifetimeBuildCount(iAirSubteam, M28UnitInfo.refCategoryBomber)) end
        if iFactoryTechLevel == 1 and M28Map.iMapSize > 256 and not(M28Team.tAirSubteamData[iAirSubteam][M28Team.refbDontBuildEngiHunterEngineers]) and (M28Team.tTeamData[iTeam][M28Team.refiEnemyAirAAThreat] or 0) == 0 and M28Conditions.GetAirSubteamLifetimeBuildCount(iAirSubteam, M28UnitInfo.refCategoryBomber) == 0 and aiBrain[M28Economy.refiGrossEnergyBaseIncome] >= 24 then
            if bDebugMessages == true then LOG(sFunctionRef..': Will get high priority bomber to hunt engis') end
            if ConsiderBuildingCategory(iNormalBomberCategoryToBuild) then return sBPIDToBuild end
        end

        --AirAA for T1-T2 when probably have enough and enemy has air to gorund threat
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if iFactoryTechLevel <= 2 and aiBrain[M28Economy.refiNetEnergyBaseIncome] >= 3 and aiBrain:GetEconomyStoredRatio('ENERGY') >= 0.5 and M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] > 0 and aiBrain[M28Economy.refiGrossEnergyBaseIncome] >= 100 then
            if bDebugMessages == true then LOG(sFunctionRef..': Consideirng whether to get inties due to enemy air to ground threat, refbNoAirAAForCoreEnemies='..tostring(M28Team.tAirSubteamData[iAirSubteam][M28Team.refbNoAirAAForCoreEnemies])) end
            if M28Team.tAirSubteamData[iAirSubteam][M28Team.refbNoAirAAForCoreEnemies] and not(M28Team.tAirSubteamData[iAirSubteam][M28Team.refbHaveAirControl]) then
                if ConsiderBuildingCategory(M28UnitInfo.refCategoryAirAA) then return sBPIDToBuild end
            end
        end

        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if bDebugMessages == true then
            LOG(sFunctionRef .. ': Another air fac engi builder - iFactoryTechLevel=' .. iFactoryTechLevel .. '; Highest friendly tech=' .. M28Team.tTeamData[iTeam][M28Team.subrefiHighestFriendlyFactoryTech] .. '; Mass stored=' .. M28Team.tTeamData[iTeam][M28Team.subrefiTeamMassStored])
        end
        if tLZTeamData[M28Map.subrefTbWantBP] and iFactoryTechLevel >= M28Team.tTeamData[iTeam][M28Team.subrefiHighestFriendlyFactoryTech] then
            --Do we have fewer than 5 engineers of this tech level in this zone and we have some mass stored? if so then build another engineer (also build another engineer if we have fewer than 3 engineers even with low mass)
            local iEngisOfTechInZone = 0
            local iBPWanted = tLZTeamData[M28Map.subrefTBuildPowerByTechWanted][1] + tLZTeamData[M28Map.subrefTBuildPowerByTechWanted][2] + tLZTeamData[M28Map.subrefTBuildPowerByTechWanted][3]
            local tEngisOfTechInZone = EntityCategoryFilterDown(M28UnitInfo.refCategoryEngineer * M28UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel), tLZTeamData[M28Map.subreftoLZOrWZAlliedUnits])
            if M28Utilities.IsTableEmpty(tEngisOfTechInZone) == false then
                iEngisOfTechInZone = table.getn(tEngisOfTechInZone)
            end
            local iMinEngisWanted = math.max(5, math.min(15, aiBrain[M28Economy.refiGrossMassBaseIncome] / (1.5 * aiBrain[M28Economy.refiOurHighestFactoryTechLevel])))
            if bDebugMessages == true then LOG(sFunctionRef..': Considering if want to reduce min engis wanted, tLZTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ]='..tostring(tLZTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ])..'; bHaveLowMass='..tostring(bHaveLowMass)..'; iFactoryTechLevel='..iFactoryTechLevel) end
            if tLZTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ] and bHaveLowMass then
                iMinEngisWanted = iMinEngisWanted - 1
                if M28Team.tTeamData[iTeam][M28Team.subrefiOurGunshipThreat] <= 3000 and iFactoryTechLevel >= 3 and M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryGunship * categories.TECH3) == 0 then
                    if bDebugMessages == true then LOG(sFunctionRef..': Nearby enemy threats and we dont have amny gunships and are at t3 so will try building ag unship first') end
                    iMinEngisWanted = -iMinEngisWanted - 1
                end
            end
            if bDebugMessages == true then LOG(sFunctionRef..': iMinEngisWanted='..iMinEngisWanted..'; iEngisOfTechInZone='..iEngisOfTechInZone..'; subrefiTeamAverageMassPercentStored='..M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored]..'; iBPWanted='..iBPWanted..'; iFactoryTechLevel='..iFactoryTechLevel..'; M28Team.tTeamData[iTeam][M28Team.refbDefendAgainstArti]='..tostring(M28Team.tTeamData[iTeam][M28Team.refbDefendAgainstArti])..'; Nmber of T3 engis being built in zone='..M28Conditions.GetNumberOfUnitsCurrentlyBeingBuiltOfCategoryInZone(tLZTeamData, M28UnitInfo.refCategoryEngineer * categories.TECH3)) end
            if iEngisOfTechInZone < 3 or (iEngisOfTechInZone < iMinEngisWanted and M28Team.tTeamData[iTeam][M28Team.subrefiTeamMassStored] > 0) or (iEngisOfTechInZone < iMinEngisWanted + 5 and (M28Team.tTeamData[iTeam][M28Team.subrefiTeamMassStored] > 1000 or iBPWanted >= 100) and (M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.05 or M28Conditions.GetNumberOfUnitsCurrentlyBeingBuiltOfCategoryInZone(tLZTeamData, M28UnitInfo.refCategoryEngineer * categories.TECH3) == 0))
                    or (iEngisOfTechInZone < 50 and iBPWanted / 10 > iEngisOfTechInZone and iFactoryTechLevel >= 3 and (M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] > 0.06 or iEngisOfTechInZone < math.max(6, iMinEngisWanted)) and (M28Team.tTeamData[iTeam][M28Team.refbDefendAgainstArti] or M28Conditions.GetNumberOfUnitsCurrentlyBeingBuiltOfCategoryInZone(tLZTeamData, M28UnitInfo.refCategoryEngineer * categories.TECH3) <= math.min(2, iBPWanted * 0.2 / M28Engineer.tiBPByTech[3]))) then
                if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then
                    return sBPIDToBuild
                end
            end
        end

        --Priority engineers as we are being prevented from upgrading
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if oFactory[refbWantMoreEngineersBeforeUpgrading] and not(bHaveLowMass) and not(tLZTeamData[M28Map.subrefbDangerousEnemiesInThisLZ]) and M28Conditions.CheckIfNeedMoreEngineersOrSnipeUnitsBeforeUpgrading(oFactory) then
            if bDebugMessages == true then LOG(sFunctionRef..': Cant upgrade due to lack of engineers so want more engis') end
            if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then return sBPIDToBuild end
        end


        --Multiple mex upgrades so want more engineers (air fac low power), if only to assist the upgrade (and also so once upgraded we have enough build power)
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if M28Conditions.WantMoreEngineersToAssistMexUpgradeAsPriority(tLZTeamData, iTeam) then
            if bDebugMessages == true then LOG(sFunctionRef..': Have multiple upgrading mexes so want another engi') end
            if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then return sBPIDToBuild end
        end

        --Torp bomber if LC is <=2 and enemy has torp threat
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if M28Team.tAirSubteamData[iAirSubteam][M28Team.refbNoAvailableTorpsForEnemies] and M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurTorpBomberThreat] < 400 and M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryTorpBomber) < 2 then
            if bDebugMessages == true then LOG(sFunctionRef..': Wnat a torp bomber') end
            if ConsiderBuildingCategory(M28UnitInfo.refCategoryTorpBomber) then return sBPIDToBuild end
        end

        --Approaching enemy experimental - build gunships or bombers even if have low power, provided we have more than a base level
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if aiBrain[M28Economy.refiGrossEnergyBaseIncome] >= 250 and M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.reftEnemyLandExperimentals]) == false and aiBrain[M28Map.refbCanPathToEnemyBaseWithAmphibious] then
            local iClosestLandExp = 650 --Ignore land exp further away than this
            local oClosestLandExp, iCurDist
            for iUnit, oUnit in M28Team.tTeamData[iTeam][M28Team.reftEnemyLandExperimentals] do
                if M28UnitInfo.IsUnitValid(oUnit) then
                    iCurDist = M28Utilities.GetDistanceBetweenPositions(oUnit:GetPosition(), tLZTeamData[M28Map.reftClosestFriendlyBase])
                    if iCurDist < iClosestLandExp then
                        iClosestLandExp = iCurDist
                        oClosestLandExp = oUnit
                    end
                end
            end
            if bDebugMessages == true then LOG(sFunctionRef..': Low power air fac builer - considering getting gunship, bomber or torp bomber in response to approaching land experimental threat, oClosestLandExp='..(oClosestLandExp.UnitId or 'nil')..(M28UnitInfo.GetUnitLifetimeCount(oClosestLandExp) or 'nil')..'; iClosestLandExp='..iClosestLandExp) end
            if oClosestLandExp then
                --If relatively far away and at t1 then upgrade
                if iFactoryTechLevel == 1 and iClosestLandExp >= 250 and ConsiderUpgrading() then return sBPIDToBuild
                elseif M28UnitInfo.IsUnitUnderwater(oClosestLandExp) then
                    --Only respond if it's a bit closer
                    if iClosestLandExp <= math.min(400, M28Utilities.GetDistanceBetweenPositions(tLZTeamData[M28Map.reftClosestFriendlyBase], tLZTeamData[M28Map.reftClosestEnemyBase]) * 0.4) then
                        if iClosestLandExp <= 200 then
                            --Get gunships/bombers even though it's underwater at the moment
                            if bDebugMessages == true then LOG(sFunctionRef..': enemy has nearby exp so will go and get gunship or bomber') end
                            if ConsiderBuildingCategory(iGunshipCategoryUnlessBombersBetter - M28UnitInfo.refCategoryBomber * categories.TECH3) then return sBPIDToBuild end
                            if ConsiderBuildingCategory(iNormalBomberCategoryToBuild - categories.TECH3) then return sBPIDToBuild end
                            if ConsiderBuildingCategory(iBackupAirToGroundCategory) then return sBPIDToBuild end
                        else
                            --Get torp bombers unless we have lots already
                            if M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurTorpBomberThreat] <= 4500 then
                                if ConsiderBuildingCategory(M28UnitInfo.refCategoryTorpBomber) then return sBPIDToBuild end
                            end
                        end
                    end
                else
                    if iClosestLandExp <= 500 or not(M28Team.tAirSubteamData[iAirSubteam][M28Team.refbFarBehindOnAir]) then
                        if bDebugMessages == true then LOG(sFunctionRef..': enemy has approaching exp so will go and get gunship or bomber') end
                        if ConsiderBuildingCategory(iGunshipCategoryUnlessBombersBetter) then return sBPIDToBuild end
                        if ConsiderBuildingCategory(M28UnitInfo.refCategoryBomber) then return sBPIDToBuild end
                        if ConsiderBuildingCategory(iBackupAirToGroundCategory) then return sBPIDToBuild end
                    end
                end
            end
        end

        --Spy planes if major intel deficit
        if not(iBrainAirScouts) then iBrainAirScouts = aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryAirScout) end
        if iBrainAirScouts < 6 and iFactoryTechLevel == 3 and M28Team.tTeamData[iTeam][M28Team.subrefiLongestOverdueScoutingTarget] >= 600 and M28Team.tTeamData[iTeam][M28Team.refiConstructedExperimentalCount] > 0 and not(M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingEnergy]) and M28Conditions.GetNumberOfUnitsCurrentlyBeingBuiltOfCategoryInZone(tLZTeamData, M28UnitInfo.refCategoryAirScout * categories.TECH3) == 0 and M28Conditions.GetFactoryLifetimeCount(oFactory, M28UnitInfo.refCategoryAirScout) <= math.floor((oFactory[refiTotalBuildCount] or 0) * 0.1) and iBrainAirScouts <= 2 then
            if bDebugMessages == true then LOG(sFunctionRef..': Overdue scouting target so will build spy planes despite low energy') end
            if ConsiderBuildingCategory(M28UnitInfo.refCategoryAirScout) then return sBPIDToBuild end
        end

        --Enhancements (LOUD)
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        local sEnhancementWanted = ConsiderFactoryEnhancement(oFactory, tLZTeamData)
        if sEnhancementWanted then return sEnhancementWanted, true end

        --Upgrade t1 fac to t2 if have t3 mexes in the zone and not stalling power
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if iFactoryTechLevel == 1 and tLZTeamData[M28Map.subrefMexCountByTech][3] > 0 and aiBrain[M28Economy.refiGrossEnergyBaseIncome] >= 400 and ConsiderUpgrading() then return sBPIDToBuild end


        if bDebugMessages == true then LOG(sFunctionRef..': end of low power builders') end
    else
        --Emergency air defence
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if bDebugMessages == true then
            LOG(sFunctionRef .. ': Emergency AA defence, tLZTeamData[M28Map.refiEnemyAirToGroundThreat]=' .. tLZTeamData[M28Map.refiEnemyAirToGroundThreat] .. '; tLZTeamData[M28Map.refiEnemyAirAAThreat]=' .. tLZTeamData[M28Map.refiEnemyAirAAThreat])
        end
        if tLZTeamData[M28Map.refiEnemyAirToGroundThreat] > 0 or tLZTeamData[M28Map.refiEnemyAirAAThreat] > 0 then
            if ConsiderBuildingCategory(M28UnitInfo.refCategoryAirAA) then return sBPIDToBuild end
        end

        --Emergency combat units
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if tLZTeamData[M28Map.subrefTThreatEnemyCombatTotal] > math.min(500, (tLZTeamData[M28Map.subrefLZTThreatAllyCombatTotal] or 0) * 0.5) and (tLZTeamData[M28Map.refiEnemyAirAAThreat] or 0) < 20 and ((tLZTeamData[M28Map.subrefiThreatEnemyGroundAA] or 0) == 0 or tLZTeamData[M28Map.subrefiThreatEnemyGroundAA] < iFactoryTechLevel * iFactoryTechLevel * 50) then
            if bDebugMessages == true then LOG(sFunctionRef..': Enemy has combat units in this zone so will get a combat unit') end
            if ConsiderBuildingCategory(iGunshipCategoryUnlessBombersBetter - M28UnitInfo.refCategoryBomber * categories.TECH3) then return sBPIDToBuild end
            if ConsiderBuildingCategory(iNormalBomberCategoryToBuild - categories.TECH3) then return sBPIDToBuild end
            if ConsiderBuildingCategory(iBackupAirToGroundCategory) then return sBPIDToBuild end
        end

        --Initial engineers
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if bDebugMessages == true then
            LOG(sFunctionRef .. ': Considering high priority engineers, iFactoryTechLevel=' .. iFactoryTechLevel .. '; Team highest factory tech level=' .. M28Team.tTeamData[iTeam][M28Team.subrefiHighestFriendlyFactoryTech] .. '; Lifetime build count=' .. M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryEngineer * M28UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel)) .. '; Current units=' .. aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryEngineer * M28UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel)))
        end
        if iFactoryTechLevel >= M28Team.tTeamData[iTeam][M28Team.subrefiHighestFriendlyFactoryTech] and tLZTeamData[M28Map.subrefLZbCoreBase] then
            if M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryEngineer * M28UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel)) <= 4 or aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryEngineer * M28UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel)) <= 2 then
                if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then return sBPIDToBuild end
            end
        end

        --Spy plane/air scout if not power stalling and havent built any, and are at T2+, and dont have omni; also get if we have units wanting priority scout and we have no spy planes currently
        iCurrentConditionToTry = iCurrentConditionToTry + 1

        if bDebugMessages == true then LOG(sFunctionRef..': Low power air scout builder, stored energy ratio='..aiBrain:GetEconomyStoredRatio('ENERGY')..'; Cur air scouts='..aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryAirScout)..'; this factory lifetime count='..M28Conditions.GetFactoryLifetimeCount(oFactory, M28UnitInfo.refCategoryAirScout)..'; Radar coverage='..(tLZTeamData[M28Map.refiRadarCoverage] or 'nil')..'; factory total build count='..(oFactory[refiTotalBuildCount] or 0)..'; Is table of units wanting priority air scout empty='..tostring(M28Utilities.IsTableEmpty(M28Team.tAirSubteamData[aiBrain.M28AirSubteam][M28Team.reftPriorityUnitsWantingAirScout]))) end
        if iFactoryTechLevel >= 2 and aiBrain:GetEconomyStoredRatio('ENERGY') >= 0.99 and (not(M28Team.tTeamData[iTeam][M28Team.subrefbTeamHasOmniVision]) or (M28Team.tTeamData[iTeam][M28Team.subrefiLongestOverdueScoutingTarget] >= 900 and M28Team.tTeamData[iTeam][M28Team.refiConstructedExperimentalCount] > 0)) then
            if not(iBrainAirScouts) then iBrainAirScouts = aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryAirScout) end

            if bDebugMessages == true then LOG(sFunctionRef..': iBrainAirScouts='..iBrainAirScouts..'; iFactoryTechLevel='..iFactoryTechLevel) end
            if iBrainAirScouts < 6 and ((((iBrainAirScouts == 0 and tLZTeamData[M28Map.refiRadarCoverage] or 0) <= math.min(300, math.max(200, M28UnitInfo.iT3RadarSize - 50)) or (iBrainAirScouts <= 3 and (iFactoryTechLevel == 3 or iBrainAirScouts == 0) and M28Team.tTeamData[iTeam][M28Team.subrefiLongestOverdueScoutingTarget] >= 360 and (M28Team.tTeamData[iTeam][M28Team.refiConstructedExperimentalCount] > 0 or M28Team.tTeamData[iTeam][M28Team.subrefiLongestOverdueScoutingTarget] >= 900) and M28Conditions.GetNumberOfUnitsCurrentlyBeingBuiltOfCategoryInZone(tLZTeamData, M28UnitInfo.refCategoryAirScout * categories.TECH3) == 0)) and M28Conditions.GetFactoryLifetimeCount(oFactory, M28UnitInfo.refCategoryAirScout) <= math.floor((oFactory[refiTotalBuildCount] or 0) * 0.1))
                    or (iFactoryTechLevel >= 3 and M28Utilities.IsTableEmpty(M28Team.tAirSubteamData[aiBrain.M28AirSubteam][M28Team.reftPriorityUnitsWantingAirScout]) == false and iBrainAirScouts < math.min(2, table.getn(M28Team.tAirSubteamData[aiBrain.M28AirSubteam][M28Team.reftPriorityUnitsWantingAirScout])))) then
                if ConsiderBuildingCategory(M28UnitInfo.refCategoryAirScout) then return sBPIDToBuild end
            end
        end

        --Air scout if we have a t1 bomber engi hunter active and havent built any air scouts before
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if bDebugMessages == true then LOG(sFunctionRef..': High priority first air scout to support engi hunter check, iFactoryTechLevel='..iFactoryTechLevel..'; Time of last engi hunter order='..GetGameTimeSeconds() - (M28Team.tAirSubteamData[iAirSubteam][M28Team.reftiTimeOfLastEngiHunterBomberOrder] or 0)..'; Lifetime air scout='..M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryAirScout)..'; Number of bombers we own='..aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryBomber)..'; Enemies in this or adj zone='..tostring(tLZTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ])..'; Factory[refbJustBuiltFirstT1Bomber]='..tostring(oFactory[refbJustBuiltFirstT1Bomber] or false)) end
        if iFactoryTechLevel < 3 and not(tLZTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ]) and (oFactory[refbJustBuiltFirstT1Bomber] or GetGameTimeSeconds() - (M28Team.tAirSubteamData[iAirSubteam][M28Team.reftiTimeOfLastEngiHunterBomberOrder] or 0) <= 3) and M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryAirScout) == 0 and M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryBomber) > 0 then
            if bDebugMessages == true then LOG(sFunctionRef..': Will try and get an air scout') end
            if ConsiderBuildingCategory(M28UnitInfo.refCategoryAirScout) then return sBPIDToBuild end
        end

        --Enemy ground threat and enemy lacks AirAA and we havent built many gunships or bombers
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if M28Team.tTeamData[iTeam][M28Team.refiEnemyAirAAThreat] == 0 and tLZTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ] and aiBrain[M28Economy.refiGrossEnergyBaseIncome] >= 30 and M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurGunshipThreat] <= 5000 then
            local iBomberAndGunshipLC = M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryBomber + M28UnitInfo.refCategoryGunship)
            if bDebugMessages == true then LOG(sFunctionRef..': iBomberAndGunshipLC='..iBomberAndGunshipLC..'; tLZTeamData[M28Map.subrefbDangerousEnemiesInThisLZ]='..tostring(tLZTeamData[M28Map.subrefbDangerousEnemiesInThisLZ] or false)..'; OurAirAAThreat='..M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurAirAAThreat]..'; EnemyAirAA='..M28Team.tTeamData[iTeam][M28Team.refiEnemyAirAAThreat]..'; AirAA LC='..M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryAirAA)) end
            if iBomberAndGunshipLC <= 6 and (iBomberAndGunshipLC < 2 or tLZTeamData[M28Map.subrefbDangerousEnemiesInThisLZ] or (M28Conditions.TeamHasAirControl(iTeam) and M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurAirAAThreat] > 150) or M28Map.iMapSize > 512 or (iFactoryTechLevel < 3 and M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurAirAAThreat] > math.max(150, M28Team.tTeamData[iTeam][M28Team.refiEnemyAirAAThreat]) and M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryAirAA) > iBomberAndGunshipLC * 2)) then
                if bDebugMessages == true then LOG(sFunctionRef..': Enemy lacks AirAA and we havent built many bombers or gunships') end
                if ConsiderBuildingCategory(M28UnitInfo.refCategoryGunship) then return sBPIDToBuild end
                if ConsiderBuildingCategory(iNormalBomberCategoryToBuild) then return sBPIDToBuild end
            end
        end

        --Overflowing mass (and dont have low power since are here)
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if not (bHaveLowMass) and tLZTeamData[M28Map.subrefTbWantBP] and M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.7 then
            if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then
                return sBPIDToBuild
            end
        end

        --Nearby enemy air to ground threat
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if M28Utilities.IsTableEmpty(tLZData[M28Map.subrefLZAdjacentLandZones]) == false then
            for iEntry, iAdjLZ in tLZData[M28Map.subrefLZAdjacentLandZones] do
                local tAdjLZTeamData = M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iAdjLZ][M28Map.subrefLZTeamData][iTeam]
                if tAdjLZTeamData[M28Map.refiEnemyAirToGroundThreat] > 0 then
                    if bDebugMessages == true then
                        LOG(sFunctionRef .. ': Have adjacent land zone with air to ground threat=' .. tAdjLZTeamData[M28Map.refiEnemyAirToGroundThreat] .. '; will get airaa')
                    end
                    if ConsiderBuildingCategory(M28UnitInfo.refCategoryAirAA) then
                        return sBPIDToBuild
                    end
                    break
                end
            end
        end

        --Snipe target
        if bDebugMessages == true then LOG(sFunctionRef..': Considering if we have any active snipe targets for non low power builder, is table of active snipe targets empty='..tostring(M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.toActiveSnipeTargets]))..'; Is table of bomber snipe targets empty='..tostring(M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.toBomberSnipeTargets]))..'; Are we stalling E='..tostring(M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingEnergy])..'; iTeam='..iTeam) end
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.toActiveSnipeTargets]) == false then
            local oACUToSnipe = M28Conditions.GetNearbyACUForAirFacBomberSnipe(oFactory, iTeam)
            if oACUToSnipe and (not(M28Team.tAirSubteamData[iAirSubteam][M28Team.refbNoAvailableTorpsForEnemies]) or iFactoryTechLevel == 1) then
                if M28Utilities.bLoudModActive and iFactoryTechLevel >= 3 and ConsiderBuildingCategory(M28UnitInfo.refCategoryGunship) then return sBPIDToBuild
                elseif iFactoryTechLevel == 2 and EntityCategoryContains(categories.UEF, oFactory.UnitId) and ConsiderBuildingCategory(iNormalBomberCategoryToBuild * categories.TECH1) then
                    if bDebugMessages == true then LOG(sFunctionRef..': Will build T1 UEF bombers due to ACU snipe target, oACUToSnipe='..oACUToSnipe.UnitId..M28UnitInfo.GetUnitLifetimeCount(oACUToSnipe)) end
                    return sBPIDToBuild
                elseif iFactoryTechLevel == 2 and EntityCategoryContains(categories.AEON, oFactory.UnitId) and M28Utilities.bFAFActive and ConsiderBuildingCategory(iGunshipCategoryUnlessBombersBetter) then
                    if bDebugMessages == true then LOG(sFunctionRef..': Aeon T2 air fac so will get spectres for snipe due to their high alpha damage') end
                    return sBPIDToBuild
                elseif ConsiderBuildingCategory(iNormalBomberCategoryToBuild) then
                    if bDebugMessages == true then LOG(sFunctionRef..': Sniper, will build bombers due to ACU snipe target, oACUToSnipe='..oACUToSnipe.UnitId..M28UnitInfo.GetUnitLifetimeCount(oACUToSnipe)) end
                    return sBPIDToBuild
                end
            end
            --T2 Cybran and Sera bomber snipes
        elseif M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.toBomberSnipeTargets]) == false and iFactoryTechLevel >= 2 and EntityCategoryContains(categories.CYBRAN + categories.SERAPHIM, oFactory.UnitId) then
            if bDebugMessages == true then LOG(sFunctionRef..': Will build bomber for special bomber snipe target') end
            --Try building T2 bombers only
            if ConsiderBuildingCategory(iNormalBomberCategoryToBuild * categories.TECH2) then return sBPIDToBuild end
            if ConsiderBuildingCategory(iNormalBomberCategoryToBuild) then return sBPIDToBuild end
        end

        --Priority engineers as we are being prevented from upgrading
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if oFactory[refbWantMoreEngineersBeforeUpgrading] and not(bHaveLowMass) and not(tLZTeamData[M28Map.subrefbDangerousEnemiesInThisLZ]) and M28Conditions.CheckIfNeedMoreEngineersOrSnipeUnitsBeforeUpgrading(oFactory) then
            if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then return sBPIDToBuild end
        end

        --Multiple mex upgrades so want more engineers (air fac have power), if only to assist the upgrade (and also so once upgraded we have enough build power)
            --Also get more engineers if have lots of mass and not many engineers being built
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if M28Conditions.WantMoreEngineersToAssistMexUpgradeAsPriority(tLZTeamData, iTeam) then
            if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then return sBPIDToBuild end
        elseif not(bHaveLowMass) and M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.3 and tLZTeamData[M28Map.subrefTbWantBP] then
            local iEngineersUnderConstruction = M28Conditions.GetNumberOfUnitsMeetingCategoryUnderConstructionInLandOrWaterZone(tLZTeamData, M28UnitInfo.refCategoryEngineer)
            local iFactoriesInZone = M28Conditions.GetNumberOfConstructedUnitsMeetingCategoryInZone(tLZTeamData, M28UnitInfo.refCategoryFactory)
            if bDebugMessages == true then LOG(sFunctionRef..': Higher priority engi builder, iEngineersUnderConstruction='..iEngineersUnderConstruction..'; iFactoriesInZone='..iFactoriesInZone) end
            if iEngineersUnderConstruction < iFactoriesInZone * 0.5 and (M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.45 or M28Team.tTeamData[iTeam][M28Team.subrefiTeamNetMass] > 0) then
                --Check we have at least 2 air facs (or not many facs)
                if iFactoriesInZone <= 2 or iEngineersUnderConstruction < iFactoriesInZone * 0.25 or iEngineersUnderConstruction < M28Conditions.GetNumberOfConstructedUnitsMeetingCategoryInZone(tLZTeamData, M28UnitInfo.refCategoryAirFactory) - 1 then
                    if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then return sBPIDToBuild end
                end
            end
        end

        --Upgrade to T2 if at T1 air and have a certain level of mass and energy, and either cant path to enemy by land or it will take a while or we have good gross mass and energy income
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if bDebugMessages == true then LOG(sFunctionRef..': Considering whether to upgrade T1 air fac to T2, iFactoryTechLevel='..iFactoryTechLevel..'; aiBrain[M28Economy.refiGrossEnergyBaseIncome]='..aiBrain[M28Economy.refiGrossEnergyBaseIncome]..'; aiBrain[M28Economy.refiGrossMassBaseIncome]='..aiBrain[M28Economy.refiGrossMassBaseIncome]) end
        if iFactoryTechLevel == 1 and M28Team.tTeamData[iTeam][M28Team.subrefiHighestFriendlyAirFactoryTech] <= 1 and aiBrain[M28Economy.refiGrossEnergyBaseIncome] >= 32 and aiBrain[M28Economy.refiGrossMassBaseIncome] >= 2 and (not (M28Team.DoesBrainHaveActiveHQUpgradesOfCategory(aiBrain, M28UnitInfo.refCategoryLandFactory + M28UnitInfo.refCategoryAirFactory)) or (aiBrain[M28Economy.refiGrossEnergyBaseIncome] >= 100 and aiBrain[M28Economy.refiGrossMassBaseIncome] >= 7 and not(M28Team.DoesBrainHaveActiveHQUpgradesOfCategory(aiBrain, M28UnitInfo.refCategoryAirFactory)))) and ((aiBrain[M28Economy.refiGrossEnergyBaseIncome] >= 10 and aiBrain[M28Economy.refiGrossEnergyBaseIncome] >= 7 and aiBrain[M28Economy.refiOurHighestLandFactoryTech] >= 2) or (aiBrain[M28Economy.refiGrossEnergyBaseIncome] >= 45 and not (bHaveLowMass)) or not (aiBrain[M28Map.refbCanPathToEnemyBaseWithLand]) or M28Utilities.GetTravelDistanceBetweenPositions(oFactory:GetPosition(), tLZTeamData[M28Map.reftClosestEnemyBase], M28Map.refPathingTypeLand) >= 375) then
            --Only upgrade if not in t1 spam mode, and either have a t2 mex or high gross mass
            if bDebugMessages == true then LOG(sFunctionRef..': Considering further conditions, M28Team.tTeamData[iTeam][M28Team.refbFocusOnT1Spam]='..tostring(M28Team.tTeamData[iTeam][M28Team.refbFocusOnT1Spam])..'; tLZTeamData[M28Map.subrefMexCountByTech]='..repru(tLZTeamData[M28Map.subrefMexCountByTech])..'; M28Conditions.ZoneWantsT1Spam(tLZTeamData, iTeam)='..tostring(M28Conditions.ZoneWantsT1Spam(tLZTeamData, iTeam) or false)) end
            if not(M28Conditions.ZoneWantsT1Spam(tLZTeamData, iTeam)) and not(aiBrain[M28Overseer.refbPrioritiseLowTech]) and not(aiBrain[M28Overseer.refbPrioritiseLand]) and (not(aiBrain[M28Overseer.refbPrioritiseNavy]) or aiBrain[M28Economy.refiOurHighestNavalFactoryTech] == 0) and (tLZTeamData[M28Map.subrefMexCountByTech][2] + tLZTeamData[M28Map.subrefMexCountByTech][3] > 0 or aiBrain[M28Economy.refiGrossMassBaseIncome] >= 5 or aiBrain[M28Economy.refiOurHighestLandFactoryTech] > 1 or aiBrain[M28Economy.refiOurHighestAirFactoryTech] > 1 or oFactory[refiTotalBuildCount] >= 25 or ((aiBrain[M28Overseer.refbPrioritiseAir] or aiBrain[M28Overseer.refbPrioritiseHighTech]) and oFactory[refiTotalBuildCount] >= 5)) then

                if ConsiderUpgrading() then
                    return sBPIDToBuild
                end
            end
        end

        --Torp bomber if LC is <=2 and enemy has torp threat
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if M28Team.tAirSubteamData[iAirSubteam][M28Team.refbNoAvailableTorpsForEnemies] and M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurTorpBomberThreat] < 400 and M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryTorpBomber) < 2 then
            if ConsiderBuildingCategory(M28UnitInfo.refCategoryTorpBomber) then return sBPIDToBuild end
        end

        --Nearby enemy ground (gunship & bombers)
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if bDebugMessages == true then
            LOG(sFunctionRef .. ': Will get gunship if have enemy ground threat in this LZ, tLZTeamData[M28Map.subrefTThreatEnemyCombatTotal]=' .. tLZTeamData[M28Map.subrefTThreatEnemyCombatTotal])
        end
        if tLZTeamData[M28Map.subrefTThreatEnemyCombatTotal] > 0 then
            if bDebugMessages == true then LOG(sFunctionRef..': Nearby enemy threat so will try and build gunship') end
            if ConsiderBuildingCategory(iGunshipCategoryUnlessBombersBetter) then return sBPIDToBuild end
            if ConsiderBuildingCategory(iBackupAirToGroundCategory) then return sBPIDToBuild end
        end

        --Enhancements (LOUD)
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        local sEnhancementWanted = ConsiderFactoryEnhancement(oFactory, tLZTeamData)
        if sEnhancementWanted then return sEnhancementWanted, true end

        --Near unit cap - dont build anything at air fac if low mass and not highest tech level
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if aiBrain[M28Overseer.refbCloseToUnitCap] and iFactoryTechLevel < math.min(3, M28Team.tTeamData[iTeam][M28Team.subrefiHighestFriendlyAirFactoryTech]) then
            --Try and get an upgrade if dont have low mass
            if bDebugMessages == true then LOG(sFunctionRef..': Close to unit cap and factory isnt highest tech level so will only build if dont have low mass, bHaveLowMass='..tostring(bHaveLowMass)) end
            if not(bHaveLowMass) and (iFactoryTechLevel < aiBrain[M28Economy.refiOurHighestAirFactoryTech] or (iFactoryTechLevel < 3 and M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.subreftTeamUpgradingHQs]))) then
                if not(M28Conditions.ZoneWantsT1Spam(tLZTeamData, iTeam)) and (not(aiBrain[M28Overseer.refbPrioritiseLowTech] or aiBrain[M28Overseer.refbPrioritiseLand]) or (aiBrain:GetEconomyStoredRatio('MASS') >= 0.5 and not(bHaveLowPower))) and (tLZTeamData[M28Map.subrefMexCountByTech][2] + tLZTeamData[M28Map.subrefMexCountByTech][3] > 0 or aiBrain[M28Economy.refiGrossMassBaseIncome] >= 5 or aiBrain[M28Economy.refiOurHighestLandFactoryTech] > 1 or aiBrain[M28Economy.refiOurHighestAirFactoryTech] > 1 or oFactory[refiTotalBuildCount] >= 25) then
                    if ConsiderUpgrading() then return sBPIDToBuild end
                end
            end

            --Get AirAA if we arent at T3 yet and lack air control
            iCurrentConditionToTry = iCurrentConditionToTry + 1
            if bDebugMessages == true then LOG(sFunctionRef..': Considering if want inties if we have T1 air fac and arent at T3 yet, M28Team.tTeamData[iTeam][M28Team.subrefiHighestFriendlyAirFactoryTech]='..M28Team.tTeamData[iTeam][M28Team.subrefiHighestFriendlyAirFactoryTech]..'; M28Team.tAirSubteamData[iAirSubteam][M28Team.refbHaveAirControl]='..tostring(M28Team.tAirSubteamData[iAirSubteam][M28Team.refbHaveAirControl] or false)) end
            if iFactoryTechLevel == 1 and M28Team.tTeamData[iTeam][M28Team.subrefiHighestFriendlyAirFactoryTech] <= 2 and not(M28Team.tAirSubteamData[iAirSubteam][M28Team.refbOnlyGetASFs]) and not(EntityCategoryContains(categories.AEON, oFactory.UnitId)) then
                if not(M28Team.tAirSubteamData[iAirSubteam][M28Team.refbHaveAirControl]) and ((M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] or 0) > 0 or (M28Team.tTeamData[iTeam][M28Team.refiEnemyTorpBombersThreat] or 0) > 0 or (M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurAirAAThreat] < 1000 and aiBrain:GetCurrentUnits(M28UnitInfo.refCategorySubmarine) * 180 > M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurAirAAThreat])) then
                    if ConsiderBuildingCategory(M28UnitInfo.refCategoryAirAA) then return sBPIDToBuild end
                end
            end
        else
            --Adjacent LZs - gunship (enemy ground) subject to gunship ratio, or AirAA (enemy air)
            iCurrentConditionToTry = iCurrentConditionToTry + 1
            if M28Map.iMapSize > 512 and not(M28Team.tAirSubteamData[iAirSubteam][M28Team.refbHaveAirControl]) and M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurAirAAThreat] < 5 * (M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurGunshipThreat] + M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurBomberThreat])
                    and (iFactoryTechLevel >= 3 or M28Team.tTeamData[iTeam][M28Team.subrefiHighestEnemyAirTech] < 3) and ConsiderBuildingCategory(M28UnitInfo.refCategoryAirAA) then
                if bDebugMessages == true then LOG(sFunctionRef..': We dont have air control so want to prioritise asfs over bombers/gunships until we have most of our mass invested in airaa') end
                return sBPIDToBuild
            elseif M28Utilities.IsTableEmpty(tLZData[M28Map.subrefLZAdjacentLandZones]) == false then
                for iEntry, iAdjLZ in tLZData[M28Map.subrefLZAdjacentLandZones] do
                    local tAdjLZTeamData = M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iAdjLZ][M28Map.subrefLZTeamData][iTeam]
                    if bDebugMessages == true then LOG(sFunctionRef .. ': Considering adjacent land zone ' .. iAdjLZ .. '; Is table of enemy air untis empty=' .. tostring(M28Utilities.IsTableEmpty(tAdjLZTeamData[M28Map.reftLZEnemyAirUnits])) .. '; tAdjLZTeamData[M28Map.subrefTThreatEnemyCombatTotal]=' .. tAdjLZTeamData[M28Map.subrefTThreatEnemyCombatTotal]..'; Mod dist%='..tAdjLZTeamData[M28Map.refiModDistancePercent]..'; Have air control='..tostring(M28Conditions.TeamHasAirControl(iTeam))) end
                    if M28Utilities.IsTableEmpty(tAdjLZTeamData[M28Map.reftLZEnemyAirUnits]) == false and not (M28Team.tAirSubteamData[iAirSubteam][M28Team.refbHaveAirControl]) then
                        if iFactoryTechLevel >= 3 or not(M28Team.tAirSubteamData[iAirSubteam][M28Team.refbOnlyGetASFs]) then
                            if ConsiderBuildingCategory(M28UnitInfo.refCategoryAirAA) then return sBPIDToBuild end
                            break
                        end
                    end
                    if tAdjLZTeamData[M28Map.refiModDistancePercent] >= 0.40 and M28Map.iMapSize <= 512 and tLZTeamData[M28Map.refiModDistancePercent] <= 0.25 and (tAdjLZTeamData[M28Map.refiModDistancePercent] >= 0.45 or M28Map.iMapSize <= 256) and (not(M28Conditions.TeamHasAirControl(iTeam)) or M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurAirAAThreat] < 200) and M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurAirAAThreat] < M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurGunshipThreat] + M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurBomberThreat] then
                        if bDebugMessages == true then LOG(sFunctionRef..': Dealing with middle of map or closer to enemy base and we dont have lots of AirAA relative to gunships, so will abort') end
                        break
                    end --e.g. some 5km maps the enemy ACU being closer to enemy base than ours can trigger an emergency type response!
                    if tAdjLZTeamData[M28Map.subrefTThreatEnemyCombatTotal] > 0 and (tAdjLZTeamData[M28Map.subrefTThreatEnemyCombatTotal] > 10 or (not(tLZTeamData[M28Map.refbBaseInSafePosition]) and (M28Map.iMapSize > 512 or M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurAirAAThreat] * 0.5 > math.min(2000, M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurGunshipThreat] + M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurBomberThreat])))) then
                        if bDebugMessages == true then LOG(sFunctionRef..': Adjacent zone has enemy threat so will try and build gunship unless we lack air control and have more mass in air to ground than airaa, tAdjLZTeamData[M28Map.subrefTThreatEnemyCombatTotal]='..tAdjLZTeamData[M28Map.subrefTThreatEnemyCombatTotal]..'; Our AirAA='..M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurAirAAThreat]..'; Our gunship='..M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurGunshipThreat]..'; Our bomber='..M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurBomberThreat]) end
                        if (tAdjLZTeamData[M28Map.subrefLZThreatAllyGroundAA] or 0) <= 1500 and not(M28Team.tAirSubteamData[iAirSubteam][M28Team.refbHaveAirControl]) and M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurAirAAThreat] < M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurGunshipThreat] + M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurBomberThreat] and M28Team.tTeamData[iTeam][M28Team.refiEnemyAirAAThreat] >= 200 then
                            if bDebugMessages == true then LOG(sFunctionRef..': Will try getting more AirAA so enemy cant just kill our gunships') end
                            if ConsiderBuildingCategory(M28UnitInfo.refCategoryAirAA) then return sBPIDToBuild end
                        end
                        if ConsiderBuildingCategory(iGunshipCategoryUnlessBombersBetter) then return sBPIDToBuild end
                        if ConsiderBuildingCategory(iBackupAirToGroundCategory) then return sBPIDToBuild end
                    end
                end
            end

            --early-game Transport (high priority)
            if bDebugMessages == true then LOG(sFunctionRef..': Considering whether we want transport, is transport island droplist empty='..tostring(M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.reftTransportIslandDropShortlist]))..'; Is same plateau drop list empty='..tostring(M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.reftTransportFarAwaySameIslandPlateauLandZoneDropShortlist]))) end
            iCurrentConditionToTry = iCurrentConditionToTry + 1
            if (M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.reftTransportIslandDropShortlist]) == false or M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.reftTransportFarAwaySameIslandPlateauLandZoneDropShortlist]) == false or M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.reftiHighTechEngiDropPlateauAndZones]) == false) then
                if M28Utilities.IsTableEmpty(tLZTeamData[M28Map.reftoTransportsWaitingForUnits]) == false and iFactoryTechLevel <= 2 then
                    if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then return sBPIDToBuild end
                else
                    local iCurTransports = 0
                    for iBrain, oBrain in M28Team.tAirSubteamData[iAirSubteam][M28Team.subreftoFriendlyM28Brains] do
                        iCurTransports = iCurTransports + oBrain:GetCurrentUnits(M28UnitInfo.refCategoryTransport)
                    end

                    local iDifIslandDropLocations = 0
                    local iSameIslandDropLocations = 0
                    if M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.reftTransportIslandDropShortlist]) == false then iDifIslandDropLocations = table.getn(M28Team.tTeamData[iTeam][M28Team.reftTransportIslandDropShortlist]) end
                    if M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.reftTransportFarAwaySameIslandPlateauLandZoneDropShortlist]) == false then iSameIslandDropLocations = table.getn(M28Team.tTeamData[iTeam][M28Team.reftTransportFarAwaySameIslandPlateauLandZoneDropShortlist]) end
                    local iTransportsWanted = 1
                    if M28Team.tTeamData[iTeam][M28Team.refbEnemyBaseInCombatDropShortlist] and M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.reftTransportCombatPlateauLandZoneDropShortlist]) == false and table.getn(M28Team.tTeamData[iTeam][M28Team.reftTransportCombatPlateauLandZoneDropShortlist]) > 1 then
                        iTransportsWanted = 2
                    elseif iDifIslandDropLocations + iSameIslandDropLocations >= 3 and M28Map.iMapSize >= 750 then --i.e. 20k (1024) or larger most of the time
                        iTransportsWanted = math.max(1, iDifIslandDropLocations / 2 + math.min(2, iSameIslandDropLocations / 8))
                        if iTransportsWanted == 1 and (iDifIslandDropLocations + iSameIslandDropLocations) >= 6 and M28Team.tTeamData[iTeam][M28Team.subrefiActiveM28BrainCount] >= 2 then
                            iTransportsWanted = 2
                        end
                    end

                    if bDebugMessages == true then LOG(sFunctionRef..': iCurTransports='..iCurTransports..'; iDifIslandDropLocations='..iDifIslandDropLocations..'; iSameIslandDropLocations='..iSameIslandDropLocations..'; iTransportsWanted='..iTransportsWanted) end

                    if iCurTransports < iTransportsWanted and ((iFactoryTechLevel <= 2 and M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryTransport) <= iTransportsWanted + 1) or (M28Team.tAirSubteamData[iAirSubteam][M28Team.refbHaveAirControl] and GetGameTimeSeconds() - (M28Team.tAirSubteamData[aiBrain.M28AirSubteam][M28Team.refiTimeLastTriedBuildingTransport] or -100) >= 180) or (GetGameTimeSeconds() - (M28Team.tAirSubteamData[aiBrain.M28AirSubteam][M28Team.refiTimeLastTriedBuildingTransport] or -100) >= 300) or (iCurTransports == 0 and M28Team.tTeamData[iTeam][M28Team.refbEnemyBaseInCombatDropShortlist] and M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryTransport) <= 5)) then
                        local iAlreadyBuilding = M28Conditions.GetNumberOfUnitsMeetingCategoryUnderConstructionInLandOrWaterZone(tLZTeamData, M28UnitInfo.refCategoryTransport, false)
                        if bDebugMessages == true then LOG(sFunctionRef..': iAlreadyBuilding='..iAlreadyBuilding) end
                        if iAlreadyBuilding == 0 then
                            if bDebugMessages == true then LOG(sFunctionRef..': Will try and build a transport as a relatively high priority, iCurrentConditionToTry='..iCurrentConditionToTry) end
                            local iCategoryWanted = M28UnitInfo.refCategoryTransport - categories.TECH3 - categories.EXPERIMENTAL
                            if iFactoryTechLevel == 2 and ((oFactory[refiTotalBuildCount] or 0) < 10 or M28Team.tAirSubteamData[iAirSubteam][M28Team.refbNoAvailableTorpsForEnemies]) then
                                iCategoryWanted =  M28UnitInfo.refCategoryTransport * categories.TECH1
                            end
                            M28Team.tAirSubteamData[aiBrain.M28AirSubteam][M28Team.refiTimeLastTriedBuildingTransport] = GetGameTimeSeconds()
                            if ConsiderBuildingCategory(iCategoryWanted) then return sBPIDToBuild end
                        end
                    end
                end
            end

            --1-off bomber to hunt engineers (dont have low power)
            iCurrentConditionToTry = iCurrentConditionToTry + 1
            if bDebugMessages == true then LOG(sFunctionRef..': 1 bomber high prioerty builder, Lifetime build count='..M28Conditions.GetAirSubteamLifetimeBuildCount(iAirSubteam, M28UnitInfo.refCategoryBomber)) end
            if iFactoryTechLevel == 1 and M28Map.iMapSize > 256 and not(M28Team.tAirSubteamData[iAirSubteam][M28Team.refbDontBuildEngiHunterEngineers]) and (M28Team.tTeamData[iTeam][M28Team.refiEnemyAirAAThreat] or 0) == 0 and M28Conditions.GetAirSubteamLifetimeBuildCount(iAirSubteam, M28UnitInfo.refCategoryBomber) <= math.max(0, math.min(1, M28Team.tTeamData[iTeam][M28Team.subrefiActiveM28BrainCount] * 0.5)) then
                if bDebugMessages == true then LOG(sFunctionRef..': Getting engi hunting bomber') end
                if ConsiderBuildingCategory(iNormalBomberCategoryToBuild) then return sBPIDToBuild end
            end

            --Determine the AirAA category to produce
            local iAirAASearchCategory
            if iFactoryTechLevel == 3 then
                iAirAASearchCategory = M28UnitInfo.refCategoryAirAA
                if bDebugMessages == true then LOG(sFunctionRef..': Will get any airaa unit for airaa category') end
            elseif iFactoryTechLevel < 3 and not(M28Team.tAirSubteamData[iAirSubteam][M28Team.refbOnlyGetASFs]) then
                iAirAASearchCategory = M28UnitInfo.refCategoryAirAA
                if bDebugMessages == true then LOG(sFunctionRef..': Not prioritising asfs so will get any airaa unit for airaa category') end
            else
                iAirAASearchCategory = M28UnitInfo.refCategoryAirAA * categories.TECH3
                if bDebugMessages == true then LOG(sFunctionRef..': Will only get T3 airaa units from air facs') end
            end
            local iAirAACountOfSearchCategory = aiBrain:GetCurrentUnits(iAirAASearchCategory)

            --Priority asf for campaign missions
            iCurrentConditionToTry = iCurrentConditionToTry + 1
            if bDebugMessages == true then LOG(sFunctionRef..': Priority asf for campaign maps, iFactoryTechLevel='..iFactoryTechLevel..'; iAirAACountOfSearchCategory='..iAirAACountOfSearchCategory..'; M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat]='..M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat]..'; M28Team.tAirSubteamData[aiBrain.M28AirSubteam][M28Team.subrefiOurAirAAThreat]='..M28Team.tAirSubteamData[aiBrain.M28AirSubteam][M28Team.subrefiOurAirAAThreat]) end
            if M28Map.bIsCampaignMap and iAirAACountOfSearchCategory <= 100 and (M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.reftoEnemyExperimentalAirObjectives]) == false or M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] >= 10000) and M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurAirAAThreat] < math.min(20000, M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] * 0.5) then
                if bDebugMessages == true then LOG(sFunctionRef..': Campaign specific logic - will get base level of air threat hten get asfs as a high priority') end
                --If we dont have T3 yet then upgrade factory
                if iFactoryTechLevel <= 2 then
                    if iFactoryTechLevel <= aiBrain[M28Economy.refiOurHighestAirFactoryTech] and (not(bHaveLowMass) or oFactory[refiTotalBuildCount] >= 15 or (aiBrain[M28Economy.refiGrossMassBaseIncome] >= 10 and not(M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingMass]))) then
                        if ConsiderUpgrading() then return sBPIDToBuild end
                    end
                else
                    --Base level of gunship and torp bomber threat before considering to get asf, assuming we have a base level of asf
                    if M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurAirAAThreat] <= 1000 then
                        if ConsiderBuildingCategory(iAirAASearchCategory) then return sBPIDToBuild end
                    end

                    --Gunships
                    if M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurGunshipThreat] <= 600 then
                        if ConsiderBuildingCategory(M28UnitInfo.refCategoryGunship) then return sBPIDToBuild end
                    end

                    --Torp bomber if need them
                    if M28Team.tAirSubteamData[iAirSubteam][M28Team.refbNoAvailableTorpsForEnemies] and M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurTorpBomberThreat] <= 2500 then
                        if ConsiderBuildingCategory(M28UnitInfo.refCategoryTorpBomber) then return sBPIDToBuild end
                    end

                    if ConsiderBuildingCategory(M28UnitInfo.refCategoryAirAA * categories.TECH3) then return sBPIDToBuild end
                end
            end

            --Priority AirAA if need to support ahwassa or exp gunship/czar
            iCurrentConditionToTry = iCurrentConditionToTry + 1
            if iFactoryTechLevel == 3 then
                if bDebugMessages == true then LOG(sFunctionRef..': Priority AirAA for experimental bomber or other exp air, our bomber threat='..M28Team.tTeamData[iTeam][M28Team.subrefiOurBomberThreat]..'; Our AirAA threat='..M28Team.tTeamData[iTeam][M28Team.subrefiOurAirAAThreat]..'; Our gunship threat='..M28Team.tTeamData[iTeam][M28Team.subrefiOurGunshipThreat]..'; Our AirAA threat='..M28Team.tTeamData[iTeam][M28Team.subrefiOurAirAAThreat]..'; Have air control='..tostring(M28Team.tAirSubteamData[iAirSubteam][M28Team.refbHaveAirControl])) end
                if M28Team.tTeamData[iTeam][M28Team.subrefiOurBomberThreat] >= math.max(10000, M28Team.tTeamData[iTeam][M28Team.subrefiOurAirAAThreat] * 1.25) or (not(M28Team.tAirSubteamData[iAirSubteam][M28Team.refbHaveAirControl]) and M28Team.tTeamData[iTeam][M28Team.subrefiOurGunshipThreat] + M28Team.tTeamData[iTeam][M28Team.subrefiOurBomberThreat] >= math.max(22500, math.min(40000, M28Team.tTeamData[iTeam][M28Team.subrefiOurAirAAThreat] * 1.3))) then
                    if ConsiderBuildingCategory(M28UnitInfo.refCategoryAirAA * categories.TECH3) then return sBPIDToBuild end
                elseif M28Team.tTeamData[iTeam][M28Team.subrefiOurAirAAThreat] <= 30000 and (not(M28Team.tAirSubteamData[iAirSubteam][M28Team.refbHaveAirControl]) or M28Team.tTeamData[iTeam][M28Team.subrefiOurAirAAThreat] <= 10000) then
                    --Are we building an ahwassa, czar or soulripper that is 25%+ constructed?
                    local tAirExpInZone = EntityCategoryFilterDown(M28UnitInfo.refCategoryAirToGround * categories.EXPERIMENTAL, tLZTeamData[M28Map.subreftoLZOrWZAlliedUnits])
                    if bDebugMessages == true then LOG(sFunctionRef..': Considering if we want to get AirAA to support under construction experimental air, Is table of ahwassa/exp air in zone empty='..tostring(M28Utilities.IsTableEmpty(tAirExpInZone))) end
                    if M28Utilities.IsTableEmpty(tAirExpInZone) == false then
                        if M28Team.tTeamData[iTeam][M28Team.subrefiOurAirAAThreat] <= 5000 or (M28Team.tAirSubteamData[iAirSubteam][M28Team.refbFarBehindOnAir] and M28Team.tTeamData[iTeam][M28Team.subrefiOurAirAAThreat] <= 15000) then
                            if ConsiderBuildingCategory(M28UnitInfo.refCategoryAirAA * categories.TECH3) then return sBPIDToBuild end
                        else
                            local bPartwayDone = false
                            for iUnit, oUnit in tAirExpInZone do
                                if M28UnitInfo.IsUnitValid(oUnit) and oUnit:GetFractionComplete() >= 0.4 then
                                    bPartwayDone = true
                                    break
                                end
                            end
                            if bPartwayDone then
                                if ConsiderBuildingCategory(M28UnitInfo.refCategoryAirAA * categories.TECH3) then return sBPIDToBuild end
                            end
                        end
                    end

                    if bDebugMessages == true then LOG(sFunctionRef..': Number of 30%+ completion experimentals under construction in other zones='..M28Conditions.GetNumberOfUnderConstructionUnitsOfCategoryInOtherZones(tLZTeamData, iTeam, M28UnitInfo.refCategoryAirToGround * categories.EXPERIMENTAL)) end
                    if M28Conditions.GetNumberOfUnderConstructionUnitsOfCategoryInOtherZones(tLZTeamData, iTeam, M28UnitInfo.refCategoryAirToGround * categories.EXPERIMENTAL, 0.3) > 0 then
                        if ConsiderBuildingCategory(M28UnitInfo.refCategoryAirAA * categories.TECH3) then return sBPIDToBuild end
                    end
                end
            end


            --General production - depends on if we have highest tech level, or if we dont have t3 air yet
            if bDebugMessages == true then
                LOG(sFunctionRef .. ': Deciding next decisions based on how high a tech level we are, iFactoryTechLevel=' .. iFactoryTechLevel .. '; Highest air factory tech=' .. M28Team.tTeamData[iTeam][M28Team.subrefiHighestFriendlyAirFactoryTech]..'; tLZTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ]='..tostring(tLZTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ])..'; refbNoAvailableTorpsForEnemies='..tostring(M28Team.tAirSubteamData[iAirSubteam][M28Team.refbNoAvailableTorpsForEnemies]))
            end
            if iFactoryTechLevel < math.min(3, M28Team.tTeamData[iTeam][M28Team.subrefiHighestFriendlyAirFactoryTech]) and (iFactoryTechLevel == 1 or (not(M28Team.tAirSubteamData[iAirSubteam][M28Team.refbNoAvailableTorpsForEnemies]) and not(tLZTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ]))) then
                --We dont want to build units in most cases as T3 versions are available
                if bDebugMessages == true then LOG(sFunctionRef..': Below highest tech level so will hold off building in most cases, bHaveLowMass='..tostring(bHaveLowMass)..'; M28Team.tTeamData[iTeam][M28Team.subrefiTeamMassStored]='..M28Team.tTeamData[iTeam][M28Team.subrefiTeamMassStored]..'; Factory lifetime count all categories='..M28Conditions.GetFactoryLifetimeCount(oFactory, nil, true)) end
                if (not(bHaveLowMass) or (iFactoryTechLevel == 1 and M28Team.tTeamData[iTeam][M28Team.subrefiTeamMassStored] >= 100 and M28Team.tAirSubteamData[iAirSubteam][M28Team.refbNoAvailableTorpsForEnemies]) or (M28Team.tTeamData[iTeam][M28Team.subrefiTeamMassStored] >= 200 * iFactoryTechLevel * iFactoryTechLevel and M28Conditions.GetFactoryLifetimeCount(oFactory, nil, true) >= 25))
                        and (not(aiBrain[M28Overseer.refbPrioritiseLand] or aiBrain[M28Overseer.refbPrioritiseLowTech]) or (aiBrain:GetEconomyStoredRatio('MASS') >= 0.3 and not(bHaveLowPower)))
                then
                    --Consider upgrading if dont have active upgrade in this LZ
                    --Upgrade factory if this LZ is lagging behind tech wise
                    iCurrentConditionToTry = iCurrentConditionToTry + 1
                    if bDebugMessages == true then
                        LOG(sFunctionRef .. ': is table of active upgrades for this LZ empty=' .. tostring(M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subreftoActiveUpgrades])))
                    end
                    local bUpgradingAirFactory = false
                    if M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subreftoActiveUpgrades]) == false then
                        for iUnit, oUnit in tLZTeamData[M28Map.subreftoActiveUpgrades] do
                            if EntityCategoryContains(M28UnitInfo.refCategoryAirFactory, oUnit.UnitId) and M28UnitInfo.GetUnitTechLevel(oUnit) >= iFactoryTechLevel then
                                if bDebugMessages == true then
                                    LOG(sFunctionRef .. ': Have an active land factory upgrade=' .. oUnit.UnitId .. M28UnitInfo.GetUnitLifetimeCount(oUnit.UnitId) .. '; Is unit valid=' .. tostring(M28UnitInfo.IsUnitValid(oUnit)) .. '; Fraction complete=' .. oUnit:GetFractionComplete() .. '; Work progress=' .. oUnit:GetWorkProgress())
                                end
                                bUpgradingAirFactory = true
                                break
                            end
                        end
                    end
                    if bDebugMessages == true then LOG(sFunctionRef..': bUpgradingAirFactory already='..tostring(bUpgradingAirFactory)) end
                    if not (bUpgradingAirFactory) then
                        if not(M28Conditions.ZoneWantsT1Spam(tLZTeamData, iTeam)) and (tLZTeamData[M28Map.subrefMexCountByTech][2] + tLZTeamData[M28Map.subrefMexCountByTech][3] > 0 or aiBrain[M28Economy.refiGrossMassBaseIncome] >= 5 or aiBrain[M28Economy.refiOurHighestLandFactoryTech] > 1 or aiBrain[M28Economy.refiOurHighestAirFactoryTech] > 1 or oFactory[refiTotalBuildCount] >= 25) then
                            if ConsiderUpgrading() then
                                return sBPIDToBuild
                            end
                        end
                    end

                    --Build engis if are very high mass
                    iCurrentConditionToTry = iCurrentConditionToTry + 1
                    if bDebugMessages == true then
                        LOG(sFunctionRef .. ': Should we build engis due to high mass? bHaveLowMass=' .. tostring(bHaveLowMass) .. '; Highest % stored=' .. M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored])
                    end
                    if tLZTeamData[M28Map.subrefTbWantBP] and not (bHaveLowMass) and M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.5 then
                        if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then
                            return sBPIDToBuild
                        end
                    end

                    --Bomber if high mass and fewer than 100
                    iCurrentConditionToTry = iCurrentConditionToTry + 1
                    if bDebugMessages == true then LOG(sFunctionRef..': Considering whether to get bombers alt, bHaveLowMass='..tostring(bHaveLowMass)..'; M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored]='..M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored]..'; Current bombers='..aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryBomber)) end
                    if not(bHaveLowMass) and M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.7 and aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryBomber) <= 100 then
                        if bDebugMessages == true then LOG(sFunctionRef..': Want to get more bombers') end
                        if ConsiderBuildingCategory(iNormalBomberCategoryToBuild) then return sBPIDToBuild end
                    end
                end

                --Emergency bomber production if have approaching experimental
                iCurrentConditionToTry = iCurrentConditionToTry + 1
                if bDebugMessages == true then LOG(sFunctionRef..': Checking if have approaching experimental, iCurGunships='..aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryGunship)..'; Is table of enemy land exp empty='..tostring( M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.reftEnemyLandExperimentals]))..'; Can path to base with amphibious='..tostring(aiBrain[M28Map.refbCanPathToEnemyBaseWithAmphibious])) end
                if M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.reftEnemyLandExperimentals]) == false and aiBrain[M28Map.refbCanPathToEnemyBaseWithAmphibious] and (M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurBomberThreat] or 0) + (M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurGunshipThreat] or 0) <= 15000 then
                    local iClosestLandExp = 350 --Ignore land exp further away than this
                    local oClosestLandExp, iCurDist
                    for iUnit, oUnit in M28Team.tTeamData[iTeam][M28Team.reftEnemyLandExperimentals] do
                        if M28UnitInfo.IsUnitValid(oUnit) then
                            iCurDist = M28Utilities.GetDistanceBetweenPositions(oUnit:GetPosition(), tLZTeamData[M28Map.reftClosestFriendlyBase])
                            if iCurDist < iClosestLandExp then
                                iClosestLandExp = iCurDist
                                oClosestLandExp = oUnit
                            end
                        end
                    end
                    if bDebugMessages == true then LOG(sFunctionRef..': Low tech level air fac considering getting  bomber or torp bomber in response to approaching land experimental threat, oClosestLandExp='..(oClosestLandExp.UnitId or 'nil')..(M28UnitInfo.GetUnitLifetimeCount(oClosestLandExp) or 'nil')..'; iClosestLandExp='..iClosestLandExp) end
                    if oClosestLandExp then
                        if iFactoryTechLevel == 1 and iClosestLandExp >= 250 and ConsiderUpgrading() then return sBPIDToBuild
                        elseif M28UnitInfo.IsUnitUnderwater(oClosestLandExp) then
                            --Only respond if it's a bit closer
                            if iClosestLandExp <= math.min(400, M28Utilities.GetDistanceBetweenPositions(tLZTeamData[M28Map.reftClosestFriendlyBase], tLZTeamData[M28Map.reftClosestEnemyBase]) * 0.4) then
                                if iClosestLandExp <= 200 then
                                    --Get gunships/bombers even though it's underwater at the moment
                                    if ConsiderBuildingCategory(iGunshipCategoryUnlessBombersBetter - M28UnitInfo.refCategoryBomber * categories.TECH3) then return sBPIDToBuild end
                                    if ConsiderBuildingCategory(iNormalBomberCategoryToBuild - categories.TECH3) then return sBPIDToBuild end
                                    if ConsiderBuildingCategory(iBackupAirToGroundCategory) then return sBPIDToBuild end
                                else
                                    --Get torp bombers unless we have lots already
                                    if M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurTorpBomberThreat] <= 4500 then
                                        if ConsiderBuildingCategory(M28UnitInfo.refCategoryTorpBomber - categories.TECH3) then return sBPIDToBuild end
                                    end
                                end
                            end
                        else
                            if iClosestLandExp <= 500 or not(M28Team.tAirSubteamData[iAirSubteam][M28Team.refbFarBehindOnAir]) then
                                if ConsiderBuildingCategory(iGunshipCategoryUnlessBombersBetter) then return sBPIDToBuild end
                                if ConsiderBuildingCategory(iNormalBomberCategoryToBuild) then return sBPIDToBuild end
                                if ConsiderBuildingCategory(iBackupAirToGroundCategory) then return sBPIDToBuild end
                            end
                        end
                    end
                end
            else
                --We have suitably high tech level to consider normal air production (and engineer production), or there are nearby threats that we want to build units to try and deal with
                --T2 air upgrade for 'safe' zones if lack any HQ upgrades in this zone and have decent base level of energy
                iCurrentConditionToTry = iCurrentConditionToTry + 1
                if bDebugMessages == true then LOG(sFunctionRef..': Safe zone air fac upgrade, are we in safe position='..tostring(tLZTeamData[M28Map.refbBaseInSafePosition] or false)..'; Enemies in this zone='..tostring(tLZTeamData[M28Map.subrefbDangerousEnemiesInThisLZ] or false)..'; Zone wants t1 spam='..tostring(M28Conditions.ZoneWantsT1Spam(tLZTeamData, iTeam) or false)) end
                if iFactoryTechLevel < 3 and tLZTeamData[M28Map.refbBaseInSafePosition] and not(tLZTeamData[M28Map.subrefbDangerousEnemiesInThisLZ]) and not(M28Conditions.ZoneWantsT1Spam(tLZTeamData, iTeam)) then
                    local bActiveHQUpgrade = false
                    if M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subreftoActiveUpgrades]) == false then
                        local tUpgradingAir
                        if iFactoryTechLevel == 1 then tUpgradingAir = EntityCategoryFilterDown(M28UnitInfo.refCategoryAirFactory, tLZTeamData[M28Map.subreftoActiveUpgrades])
                        else tUpgradingAir = EntityCategoryFilterDown(M28UnitInfo.refCategoryAirFactory - categories.TECH1, tLZTeamData[M28Map.subreftoActiveUpgrades])
                        end
                        if M28Utilities.IsTableEmpty(tUpgradingAir) == false then
                            for iUpgrading, oUpgrading in tUpgradingAir do
                                if M28UnitInfo.GetUnitTechLevel(oUpgrading) >= iFactoryTechLevel then
                                    bActiveHQUpgrade = true
                                    break
                                end
                            end
                        end
                    end
                    if bDebugMessages == true then LOG(sFunctionRef..': bActiveHQUpgrade='..tostring(bActiveHQUpgrade)) end
                    if not(bActiveHQUpgrade) then
                        --Do we have eco to support an upgrade?
                        if bDebugMessages == true then LOG(sFunctionRef..': Energy stored='..aiBrain:GetEconomyStored('ENERGY')..'; % E stored='..aiBrain:GetEconomyStoredRatio('ENERGY')..'; Team net energy='..M28Team.tTeamData[iTeam][M28Team.subrefiTeamNetEnergy]..'; brain gross energy='..aiBrain[M28Economy.refiGrossEnergyBaseIncome]..'; bHaveLowMass='..tostring(bHaveLowMass)..'; Mass gross brain inc='..aiBrain[M28Economy.refiGrossMassBaseIncome]) end
                        if iFactoryTechLevel == 1 then
                            if (aiBrain:GetEconomyStored('ENERGY') >= 4950 and (M28Team.tTeamData[iTeam][M28Team.subrefiTeamNetEnergy] >= 8*aiBrain[M28Economy.refiBrainResourceMultiplier] or (aiBrain[M28Overseer.refbPrioritiseAir] and aiBrain[M28Economy.refiNetEnergyBaseIncome] >= 4*aiBrain[M28Economy.refiBrainResourceMultiplier])) and aiBrain[M28Economy.refiGrossEnergyBaseIncome] >= 40*aiBrain[M28Economy.refiBrainResourceMultiplier] and (not(bHaveLowMass) or aiBrain[M28Economy.refiGrossMassBaseIncome] >= 2*aiBrain[M28Economy.refiBrainResourceMultiplier]))
                                    and (not(aiBrain[M28Overseer.refbPrioritiseLowTech] or aiBrain[M28Overseer.refbPrioritiseLand]) or aiBrain[M28Economy.refiOurHighestFactoryTechLevel] >= 3)
                            then
                                if bDebugMessages == true then LOG(sFunctionRef..': Want to get priority upgrade to T2 air for safe zone') end
                                if ConsiderUpgrading() then return sBPIDToBuild end
                            end
                        else --T2 to T3 air
                            if aiBrain:GetEconomyStoredRatio('ENERGY') >= 0.99 and (M28Team.tTeamData[iTeam][M28Team.subrefiTeamNetEnergy] >= 25*aiBrain[M28Economy.refiBrainResourceMultiplier] or (aiBrain[M28Overseer.refbPrioritiseAir] and aiBrain[M28Economy.refiNetEnergyBaseIncome] >= 15*aiBrain[M28Economy.refiBrainResourceMultiplier])) and aiBrain[M28Economy.refiGrossEnergyBaseIncome] >= 95*aiBrain[M28Economy.refiBrainResourceMultiplier] and (not(bHaveLowMass) or aiBrain[M28Economy.refiGrossMassBaseIncome] >= 5*aiBrain[M28Economy.refiBrainResourceMultiplier]) then
                                if bDebugMessages == true then LOG(sFunctionRef..': Want to get priority upgrade to T3 air for safe zone') end
                                if ConsiderUpgrading() then return sBPIDToBuild end
                                if bDebugMessages == true then LOG(sFunctionRef..': Want some more engis before we go to t3 air') end
                                if oFactory[refbWantMoreEngineersBeforeUpgrading] then ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) end
                            end
                        end
                    end
                end

                iCurrentConditionToTry = iCurrentConditionToTry + 1
                if bDebugMessages == true then
                    LOG(sFunctionRef .. ': Another engi builder - iFactoryTechLevel=' .. iFactoryTechLevel .. '; Highest friendly tech=' .. M28Team.tTeamData[iTeam][M28Team.subrefiHighestFriendlyFactoryTech] .. '; Mass stored=' .. M28Team.tTeamData[iTeam][M28Team.subrefiTeamMassStored])
                end
                if tLZTeamData[M28Map.subrefTbWantBP] then
                    --Do we have fewer than 5 engineers of this tech level in this zone and we have some mass stored? if so then build another engineer (also build another engineer if we have fewer than 3 engineers even with low mass)
                    local iEngisOfTechInZone = 0
                    local iBPWanted = tLZTeamData[M28Map.subrefTBuildPowerByTechWanted][1] + tLZTeamData[M28Map.subrefTBuildPowerByTechWanted][2] + tLZTeamData[M28Map.subrefTBuildPowerByTechWanted][3]
                    local tEngisOfTechInZone = EntityCategoryFilterDown(M28UnitInfo.refCategoryEngineer * M28UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel), tLZTeamData[M28Map.subreftoLZOrWZAlliedUnits])
                    if M28Utilities.IsTableEmpty(tEngisOfTechInZone) == false then
                        iEngisOfTechInZone = table.getn(tEngisOfTechInZone)
                    end
                    local iMinEngisWanted = math.max(5, math.min(20, aiBrain[M28Economy.refiGrossMassBaseIncome] / (1.5 * aiBrain[M28Economy.refiOurHighestFactoryTechLevel])))
                    if bDebugMessages == true then LOG(sFunctionRef..': iMinEngisWanted='..iMinEngisWanted..'; iEngisOfTechInZone='..iEngisOfTechInZone..'; bHaveLowMass='..tostring(bHaveLowMass)..'; Average % stored='..M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored]..'; M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingMass]='..tostring(M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingMass] or false)) end
                    if iEngisOfTechInZone < iMinEngisWanted or (not (bHaveLowMass) and M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.4) and not(M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingMass]) then
                        if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then
                            return sBPIDToBuild
                        end
                    end
                end

                --Adjacent water zone with enemy surface combat threats
                iCurrentConditionToTry = iCurrentConditionToTry + 1
                if M28Team.tAirSubteamData[aiBrain.M28AirSubteam][M28Team.refbNoAvailableTorpsForEnemies] and M28Utilities.IsTableEmpty(tLZData[M28Map.subrefAdjacentWaterZones]) == false and M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subrefbDangerousEnemiesInAdjacentWZ]) then
                    local iAdjWZ
                    for iEntry, tSubtable in tLZData[M28Map.subrefAdjacentWaterZones] do
                        iAdjWZ = tSubtable[M28Map.subrefAWZRef]
                        local tAdjWZTeamData = M28Map.tPondDetails[M28Map.tiPondByWaterZone[iAdjWZ]][M28Map.subrefPondWaterZones][iAdjWZ][M28Map.subrefWZTeamData][iTeam]
                        if bDebugMessages == true then
                            LOG(sFunctionRef .. ': Considering high priority air builder, iAdjWZ=' .. iAdjWZ .. '; tAdjWZTeamData[M28Map.subrefbWZOnlyHoverEnemies]=' .. tostring(tAdjWZTeamData[M28Map.subrefbWZOnlyHoverEnemies] or false) .. '; tAdjWZTeamData[M28Map.subrefWZThreatEnemySurface]=' .. tAdjWZTeamData[M28Map.subrefWZThreatEnemySurface])
                        end
                        if tAdjWZTeamData[M28Map.subrefWZThreatEnemySurface] > 0 then
                            if bDebugMessages == true then LOG(sFunctionRef..': Will try and build torp bombers (if non hover), or gunships, or failing that bombers') end
                            if not(tAdjWZTeamData[M28Map.subrefbWZOnlyHoverEnemies]) then
                                if ConsiderBuildingCategory(M28UnitInfo.refCategoryTorpBomber) then return sBPIDToBuild end
                            end
                            if ConsiderBuildingCategory(iGunshipCategoryUnlessBombersBetter) then return sBPIDToBuild end
                            if ConsiderBuildingCategory(iBackupAirToGroundCategory) then return sBPIDToBuild end
                        end
                    end
                end

                --Air scout if dont have any and havent built many at this factory
                iCurrentConditionToTry = iCurrentConditionToTry + 1
                if not(M28Team.tTeamData[iTeam][M28Team.subrefbTeamHasOmniVision]) then
                    if not(iBrainAirScouts) then iBrainAirScouts = aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryAirScout) end
                    if bDebugMessages == true then LOG(sFunctionRef..': Air scout checker, cur air scouts='..iBrainAirScouts..'; Lifetime air scout count for htis factory='..M28Conditions.GetFactoryLifetimeCount(oFactory, M28UnitInfo.refCategoryAirScout)..'; Total factory count of all units='..oFactory[refiTotalBuildCount]) end
                    if iBrainAirScouts < 6 + (M28Team.tTeamData[iTeam][M28Team.refiFriendlyGameEnderCount] or 0) and ((iBrainAirScouts < (M28Team.tTeamData[iTeam][M28Team.refiFriendlyGameEnderCount] or 0) * 2 or (iBrainAirScouts <= 4 + (M28Team.tTeamData[iTeam][M28Team.refiFriendlyGameEnderCount] or 0) and iFactoryTechLevel == 3 and M28Team.tTeamData[iTeam][M28Team.subrefiLongestOverdueScoutingTarget] >= 360 and (M28Team.tTeamData[iTeam][M28Team.refiConstructedExperimentalCount] > 0 or M28Team.tTeamData[iTeam][M28Team.subrefiLongestOverdueScoutingTarget] >= 900) and M28Conditions.GetNumberOfUnitsCurrentlyBeingBuiltOfCategoryInZone(tLZTeamData, M28UnitInfo.refCategoryAirScout * categories.TECH3) == 0)) and M28Conditions.GetFactoryLifetimeCount(oFactory, M28UnitInfo.refCategoryAirScout) <= math.floor(oFactory[refiTotalBuildCount] * 0.1)) then
                        if ConsiderBuildingCategory(M28UnitInfo.refCategoryAirScout) then return sBPIDToBuild end
                    end
                end

                --AirAA until have a minimum level
                iCurrentConditionToTry = iCurrentConditionToTry + 1
                if bDebugMessages == true then LOG(sFunctionRef .. ': Minimum level of AirAA wanted: Number we have currently=' .. aiBrain:GetCurrentUnits(iAirAASearchCategory)) end
                if iAirAACountOfSearchCategory < 3 then
                    if bDebugMessages == true then LOG(sFunctionRef..': We have fewer than 3 of AirAA search category, iFactoryTechLevel='..iFactoryTechLevel) end
                    if ConsiderBuildingCategory(iAirAASearchCategory) then
                        return sBPIDToBuild
                    end
                end

                --Torpedo bombers if nearby navy
                iCurrentConditionToTry = iCurrentConditionToTry + 1
                if bDebugMessages == true then LOG(sFunctionRef .. ': Torp bomber for nearby enemy navy: iFactoryTechLevel=' .. iFactoryTechLevel .. '; Is table of adjacent WZ empty=' .. tostring(M28Utilities.IsTableEmpty(tLZData[M28Map.subrefAdjacentWaterZones]))) end
                if iFactoryTechLevel >= 2 and M28Utilities.IsTableEmpty(tLZData[M28Map.subrefAdjacentWaterZones]) == false then
                    local iNearbyEnemyNavalThreat = 0
                    local iAdjWZ
                    for iEntry, tSubtable in tLZData[M28Map.subrefAdjacentWaterZones] do
                        iAdjWZ = tSubtable[M28Map.subrefAWZRef]
                        local tAdjWZTeamData = M28Map.tPondDetails[M28Map.tiPondByWaterZone[iAdjWZ]][M28Map.subrefPondWaterZones][iAdjWZ][M28Map.subrefWZTeamData][iTeam]
                        if bDebugMessages == true then
                            LOG(sFunctionRef .. ': Considering iAdjWZ=' .. iAdjWZ .. '; tAdjWZTeamData[M28Map.subrefbWZOnlyHoverEnemies]=' .. tostring(tAdjWZTeamData[M28Map.subrefbWZOnlyHoverEnemies] or false) .. '; tAdjWZTeamData[M28Map.subrefTThreatEnemyCombatTotal]=' .. tAdjWZTeamData[M28Map.subrefTThreatEnemyCombatTotal])
                        end
                        if not (tAdjWZTeamData[M28Map.subrefbWZOnlyHoverEnemies]) then
                            iNearbyEnemyNavalThreat = iNearbyEnemyNavalThreat + tAdjWZTeamData[M28Map.subrefTThreatEnemyCombatTotal]
                        end
                    end
                    if iNearbyEnemyNavalThreat > 25 then
                        --Do we have enough torp bombers? want basic level ourselves, and then more for large threats
                        if bDebugMessages == true then
                            LOG(sFunctionRef .. ': Our torp bomber threat=' .. M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurTorpBomberThreat] .. '; iNearbyEnemyNavalThreat=' .. iNearbyEnemyNavalThreat)
                        end
                        if M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurTorpBomberThreat] < iNearbyEnemyNavalThreat * 1.5 then
                            if ConsiderBuildingCategory(M28UnitInfo.refCategoryTorpBomber) then
                                return sBPIDToBuild
                            end
                        end
                    end
                end

                --AirAA if enemy has T3 air, we dont, and we lack air control and have a weak airaa threat
                iCurrentConditionToTry = iCurrentConditionToTry + 1
                if bDebugMessages == true then LOG(sFunctionRef..': Considering if waht AirAA due to enemy t3 air, iFactoryTechLevel='..iFactoryTechLevel..'; Highest friendly air tech='..M28Team.tTeamData[iTeam][M28Team.subrefiHighestFriendlyAirFactoryTech]..'; Enemy air tech='..M28Team.tTeamData[iTeam][M28Team.subrefiHighestEnemyAirTech]..'; Have air control='..tostring(M28Team.tAirSubteamData[iAirSubteam][M28Team.refbHaveAirControl])..'; Our AirAA threat='..M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurAirAAThreat]) end
                if iFactoryTechLevel < 3 and M28Team.tTeamData[iTeam][M28Team.subrefiHighestFriendlyAirFactoryTech] <= 2 and M28Team.tTeamData[iTeam][M28Team.subrefiHighestEnemyAirTech] >= 3 and (M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurAirAAThreat] <= 2500 or (not(M28Team.tAirSubteamData[iAirSubteam][M28Team.refbHaveAirControl]) and M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurAirAAThreat] <= 4500)) then
                    if bDebugMessages == true then LOG(sFunctionRef..': Wawnt AirAA as enemy has T3 air') end
                    if ConsiderBuildingCategory(M28UnitInfo.refCategoryAirAA) then return sBPIDToBuild end
                end

                --Gunship if dont have at least 3
                iCurrentConditionToTry = iCurrentConditionToTry + 1
                local iCurGunships = aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryGunship)
                if iCurGunships < 2 then
                    if bDebugMessages == true then LOG(sFunctionRef..': Fewer than 2 Gunships so will try and get a Gunships') end
                    if ConsiderBuildingCategory(M28UnitInfo.refCategoryGunship) then return sBPIDToBuild end
                end

                --Bombers if dont have at least 2 and either losses dont exceed kills, or thye're more effective than gunships
                iCurrentConditionToTry = iCurrentConditionToTry + 1
                if ((M28Utilities.bQuietModActive) and M28Team.tTeamData[iTeam][M28Team.refiBomberLosses] <= M28Team.tTeamData[iTeam][M28Team.refiBomberKills]) or (M28Team.tTeamData[iTeam][M28Team.refiBomberLosses] > 0 and M28Team.tTeamData[iTeam][M28Team.refiGunshipLosses] > 0 and M28Team.tTeamData[iTeam][M28Team.refiBomberKills] / M28Team.tTeamData[iTeam][M28Team.refiBomberLosses] > M28Team.tTeamData[iTeam][M28Team.refiGunshipKills] / M28Team.tTeamData[iTeam][M28Team.refiGunshipLosses]) then
                    local iCurBombers = aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryBomber)
                    if iCurBombers < 2 or (iCurBombers < 4 and M28Team.tTeamData[iTeam][M28Team.refiBomberKills] > M28Team.tTeamData[iTeam][M28Team.refiBomberLosses] * 1.25) then
                        if bDebugMessages == true then LOG(sFunctionRef..': iCurBombers='..iCurBombers..'; will try and get a basic number') end
                        if ConsiderBuildingCategory(iNormalBomberCategoryToBuild) then return sBPIDToBuild end
                    end
                end

                --Air scout if dont have any
                iCurrentConditionToTry = iCurrentConditionToTry + 1
                if bDebugMessages == true then LOG(sFunctionRef..': Will get air scouts if dont have any; iCurrentConditionToTry='..iCurrentConditionToTry) end
                if not(iBrainAirScouts) then iBrainAirScouts = aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryAirScout) end
                if (iBrainAirScouts <= 0 + (M28Team.tTeamData[iTeam][M28Team.refiFriendlyGameEnderCount] or 0) or (iBrainAirScouts <= 6 + (M28Team.tTeamData[iTeam][M28Team.refiFriendlyGameEnderCount] or 0) * 2 and iFactoryTechLevel == 3 and M28Team.tTeamData[iTeam][M28Team.subrefiLongestOverdueScoutingTarget] >= 360 and (M28Team.tTeamData[iTeam][M28Team.refiConstructedExperimentalCount] > 0 or M28Team.tTeamData[iTeam][M28Team.subrefiLongestOverdueScoutingTarget] >= 900) and M28Conditions.GetNumberOfUnitsCurrentlyBeingBuiltOfCategoryInZone(tLZTeamData, M28UnitInfo.refCategoryAirScout * categories.TECH3) == 0)) and not(M28Team.tTeamData[iTeam][M28Team.subrefbTeamHasOmniVision]) then
                    if ConsiderBuildingCategory(M28UnitInfo.refCategoryAirScout) then return sBPIDToBuild end
                end

                --Engineers if we need them for our core zone and are at T3 and are defending against arti, and are building <= 2 engineers in this zone
                iCurrentConditionToTry = iCurrentConditionToTry + 1
                if tLZTeamData[M28Map.subrefTbWantBP] and iFactoryTechLevel >= 3 and (M28Team.tTeamData[iTeam][M28Team.refbDefendAgainstArti] or M28Team.tTeamData[iTeam][M28Team.subrefiTeamMassStored] >= 500) then
                    local iCurBPWanted = tLZTeamData[M28Map.subrefTBuildPowerByTechWanted][1] + tLZTeamData[M28Map.subrefTBuildPowerByTechWanted][2] + tLZTeamData[M28Map.subrefTBuildPowerByTechWanted][3]
                    if iCurBPWanted > 30 then
                        local iCurEngineersBeingBuilt = M28Conditions.GetNumberOfUnitsCurrentlyBeingBuiltOfCategoryInZone(tLZTeamData, M28UnitInfo.refCategoryEngineer * categories.TECH3)
                        if bDebugMessages == true then LOG(sFunctionRef..': iCurEngineersBeingBuilt='..iCurEngineersBeingBuilt..'; bHaveLowMass='..tostring(bHaveLowMass)..'; iCurBPWanted='..iCurBPWanted) end
                        if ((iCurEngineersBeingBuilt <= 2 and (iCurEngineersBeingBuilt == 0 or M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.03 or M28Team.tTeamData[iTeam][M28Team.subrefiTeamNetMass] > 0 or M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.reftEnemyLandExperimentals]))) or (not(bHaveLowMass) and (M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.1 or iCurEngineersBeingBuilt <= math.max(2, M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] * 0.02)))) and iCurEngineersBeingBuilt * M28Engineer.tiBPByTech[3] < iCurBPWanted then
                            --If we have <1% mass stored, and aren't defending against arti, and enemy has experimental threat, then dont get more engis
                            if M28Team.tTeamData[iTeam][M28Team.refbDefendAgainstArti] or M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.03 or M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.reftEnemyLandExperimentals] or M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurGunshipThreat] + M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurBomberThreat] > 10000) then
                                if bDebugMessages == true then LOG(sFunctionRef..': Will try building more engineers') end
                                if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then return sBPIDToBuild end
                            end
                        end
                    end
                end

                --Do we lack enough torpedo bombers to target enemy navy?
                if bDebugMessages == true then LOG(sFunctionRef..': About to consider getting torp bombers, iFactoryTechLevel='..iFactoryTechLevel..'; time='..GetGameTimeSeconds()..'; M28Team.tAirSubteamData[iAirSubteam][M28Team.refbNoAvailableTorpsForEnemies]='..tostring(M28Team.tAirSubteamData[iAirSubteam][M28Team.refbNoAvailableTorpsForEnemies] or false)..'; M28Team.tAirSubteamData[iAirSubteam][M28Team.refbTooMuchGroundNavalAAForTorpBombers]='..tostring(M28Team.tAirSubteamData[iAirSubteam][M28Team.refbTooMuchGroundNavalAAForTorpBombers])..'; M28Team.tAirSubteamData[aiBrain.M28AirSubteam][M28Team.refbFarBehindOnAir]='..tostring(M28Team.tAirSubteamData[aiBrain.M28AirSubteam][M28Team.refbFarBehindOnAir])..'; M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurTorpBomberThreat]='..M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurTorpBomberThreat]..'; M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurAirAAThreat]='..M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurAirAAThreat]) end
                iCurrentConditionToTry = iCurrentConditionToTry + 1
                if (M28Team.tAirSubteamData[iAirSubteam][M28Team.refbNoAvailableTorpsForEnemies] or M28Team.tAirSubteamData[iAirSubteam][M28Team.refbTooMuchGroundNavalAAForTorpBombers]) then
                    --Are we far behind on air?
                    if M28Team.tAirSubteamData[aiBrain.M28AirSubteam][M28Team.refbFarBehindOnAir] then
                        if M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurAirAAThreat] > M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurTorpBomberThreat] then
                            if ConsiderBuildingCategory(M28UnitInfo.refCategoryTorpBomber) then return sBPIDToBuild end
                        end
                    else
                        --Not far behind on air so get more torps
                        if bDebugMessages == true then LOG(sFunctionRef..': Not far behind on air so will try and get more torp bombers') end
                        if ConsiderBuildingCategory(M28UnitInfo.refCategoryTorpBomber) then return sBPIDToBuild end
                    end
                end

                iCurrentConditionToTry = iCurrentConditionToTry + 1
                if bDebugMessages == true then LOG(sFunctionRef..': Air fac upgrade if not highest tech level') end
                if iFactoryTechLevel <= 2 and iFactoryTechLevel <= aiBrain[M28Economy.refiOurHighestAirFactoryTech] and (not(bHaveLowMass) or (oFactory[refiTotalBuildCount] >= 15 and not(M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingMass]))) then
                    --Consider upgrading if dont have active air fac upgrade in this LZ
                    if bDebugMessages == true then
                        LOG(sFunctionRef .. ': is table of active upgrades for this LZ empty=' .. tostring(M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subreftoActiveUpgrades])))
                    end
                    local iUpgradingAirFactoriesOfThisTechOrBetter = 0
                    local iNonUpgradingAirFactories
                    if M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subreftoActiveUpgrades]) == false then
                        for iUnit, oUnit in tLZTeamData[M28Map.subreftoActiveUpgrades] do
                            if EntityCategoryContains(M28UnitInfo.refCategoryAirFactory, oUnit.UnitId) and M28UnitInfo.GetUnitTechLevel(oUnit) >= iFactoryTechLevel then
                                iUpgradingAirFactoriesOfThisTechOrBetter = iUpgradingAirFactoriesOfThisTechOrBetter + 1
                            end
                        end
                    end
                    if iUpgradingAirFactoriesOfThisTechOrBetter == 0 or (not(bHaveLowMass) and iUpgradingAirFactoriesOfThisTechOrBetter <= 4 and iUpgradingAirFactoriesOfThisTechOrBetter < M28Conditions.GetNumberOfConstructedUnitsMeetingCategoryInZone(tLZTeamData, M28UnitInfo.refCategoryAirFactory) * 0.7 - 1) then
                        if bDebugMessages == true then LOG(sFunctionRef..': Will consider upgrading if we have T2+ mexes or enough mass income and arent in t1 spam mode') end
                        if not(M28Conditions.ZoneWantsT1Spam(tLZTeamData, iTeam)) and not(aiBrain[M28Overseer.refbPrioritiseLowTech]) and not(aiBrain[M28Overseer.refbPrioritiseLand]) and (tLZTeamData[M28Map.subrefMexCountByTech][2] + tLZTeamData[M28Map.subrefMexCountByTech][3] > 0 or aiBrain[M28Economy.refiGrossMassBaseIncome] >= 5 or aiBrain[M28Economy.refiOurHighestLandFactoryTech] > 1 or aiBrain[M28Economy.refiOurHighestAirFactoryTech] > 1 or oFactory[refiTotalBuildCount] >= 25 or ((aiBrain[M28Overseer.refbPrioritiseAir] or aiBrain[M28Overseer.refbPrioritiseHighTech]) and oFactory[refiTotalBuildCount] >= 5)) then
                            if ConsiderUpgrading() then return sBPIDToBuild end
                        end
                    end
                end

                --Bombers if have nearby enemy navy (and no torp bombers)
                iCurrentConditionToTry = iCurrentConditionToTry + 1
                if M28Team.tAirSubteamData[iAirSubteam][M28Team.refbNoAvailableTorpsForEnemies] and M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurTorpBomberThreat] == 0 and M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurBomberThreat] + M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurTorpBomberThreat] + M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurGunshipThreat] <= 1000 then
                    --Do we have an adjacent water zone that has enemies
                    local bNearbyNavalThreat = false
                    if M28Utilities.IsTableEmpty(tLZData[M28Map.subrefAdjacentWaterZones]) == false then
                        for iEntry, tSubtable in tLZData[M28Map.subrefAdjacentWaterZones] do
                            local iAdjWZ = tSubtable[M28Map.subrefAWZRef]
                            local tAdjWZTeamData = M28Map.tPondDetails[M28Map.tiPondByWaterZone[iAdjWZ]][M28Map.subrefPondWaterZones][iAdjWZ][M28Map.subrefWZTeamData][iTeam]
                            if tAdjWZTeamData[M28Map.subrefWZThreatEnemySurface] > 0 then
                                bNearbyNavalThreat = true
                            end
                        end
                    end
                    if bNearbyNavalThreat then
                        --Get bomber or gunship of any kind (torp bombers in preference to normal bombers)
                        if bDebugMessages == true then LOG(sFunctionRef..': Nearby naval threat, will get torps (or gunships or bombers if torps not an option') end
                        if ConsiderBuildingCategory(M28UnitInfo.refCategoryTorpBomber) then return sBPIDToBuild end
                        if ConsiderBuildingCategory(iGunshipCategoryUnlessBombersBetter) then return sBPIDToBuild end
                        if ConsiderBuildingCategory(iBackupAirToGroundCategory) then return sBPIDToBuild end
                    end
                end

                --AirAA if we are lacking it
                iCurrentConditionToTry = iCurrentConditionToTry + 1
                if M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] > 0 and aiBrain[M28Economy.refiGrossEnergyBaseIncome] >= 100 and M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurAirAAThreat] < math.max(3000, 5 * M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurGunshipThreat]) then
                    if bDebugMessages == true then LOG(sFunctionRef..': Consideirng whether to get airaa due to enemy air to ground threat, refbNoAirAAForCoreEnemies='..tostring(M28Team.tAirSubteamData[iAirSubteam][M28Team.refbNoAirAAForCoreEnemies])) end
                    if M28Team.tAirSubteamData[iAirSubteam][M28Team.refbNoAirAAForCoreEnemies] and not(M28Team.tAirSubteamData[iAirSubteam][M28Team.refbHaveAirControl]) then
                        if ConsiderBuildingCategory(M28UnitInfo.refCategoryAirAA) then return sBPIDToBuild end
                    end
                end

                --AirAA in proportion to gunship+bomber threat (based on if far behind on air or not); if have air control then only get if dont have low mass
                iCurrentConditionToTry = iCurrentConditionToTry + 1
                local iAirAAWanted = M28Team.tTeamData[iTeam][M28Team.subrefiTeamGrossMass] * 100
                if M28Team.tAirSubteamData[iAirSubteam][M28Team.refbFarBehindOnAir] then
                    iAirAAWanted = math.max(iAirAAWanted * 2, M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurGunshipThreat] * 3 + math.max(0, M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurGunshipThreat] - 4000) * 2 + M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurBomberThreat] * 2)
                elseif not (M28Team.tAirSubteamData[iAirSubteam][M28Team.refbHaveAirControl]) then
                    iAirAAWanted = math.max(iAirAAWanted * 1.5, M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurGunshipThreat] * 2 + math.max(0, M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurGunshipThreat] - 4000) * 1.5 + M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurBomberThreat])
                else
                    --We have air control
                    iAirAAWanted = math.max(iAirAAWanted, M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurGunshipThreat] * 0.75 + math.max(0, M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurGunshipThreat] - 4000) * 0.3 + M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurBomberThreat] * 0.75)
                end

                if bDebugMessages == true then LOG(sFunctionRef..': Will consider getting AirAA in proportion to gunship threat now, iAirAACountOfSearchCategory='..iAirAACountOfSearchCategory..'; Gross mass='..M28Team.tTeamData[iTeam][M28Team.subrefiTeamGrossMass]..';  M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurBomberThreat]='.. M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurBomberThreat]..'; M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurGunshipThreat]='..M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurGunshipThreat]..'; M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurAirAAThreat]='..M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurAirAAThreat]..'; iAirAAWanted='..iAirAAWanted) end
                if iAirAACountOfSearchCategory < 400 and M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurAirAAThreat] < iAirAAWanted and (not (bHaveLowMass) or not (M28Team.tAirSubteamData[iAirSubteam][M28Team.refbHaveAirControl]) or (M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurAirAAThreat] < 30000 and M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurAirAAThreat] < iAirAAWanted * 0.7)) then
                    --Cap total number of AirAA built bsaed on enemy threat
                    if bDebugMessages == true then LOG(sFunctionRef..': Getting AirAA units') end
                    if iAirAASearchCategory and ConsiderBuildingCategory(iAirAASearchCategory) then return sBPIDToBuild end
                end

                --Gunships subject to mass and existing number
                iCurrentConditionToTry = iCurrentConditionToTry + 1
                if iCurGunships < 5 or (not (bHaveLowMass) and iCurGunships < 40 and not(bAirToGroundIsIneffective) and (not(M28Map.bIsCampaignMap) or iCurGunships < 100) and iGunshipCategoryUnlessBombersBetter == M28UnitInfo.refCategoryGunship and
                        (iCurGunships < 22 or (iFactoryTechLevel >= 3 and aiBrain[M28Economy.refiGrossMassBaseIncome] >= 20) or ((M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.3 or (M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.2 and M28Map.bIsCampaignMap)) and M28Team.tAirSubteamData[iAirSubteam][M28Team.refbHaveAirControl] and (M28Team.tTeamData[iTeam][M28Team.subrefiHighestFriendlyAirFactoryTech] <= 2 or M28Map.bIsCampaignMap)))) then
                    if bDebugMessages == true then LOG(sFunctionRef..': Dont have a large number of gunships so will get more') end
                    if ConsiderBuildingCategory(M28UnitInfo.refCategoryGunship) then return sBPIDToBuild end
                end

                --Gunships or bombers if have approaching enemy land experimental
                iCurrentConditionToTry = iCurrentConditionToTry + 1
                if bDebugMessages == true then LOG(sFunctionRef..': Checking if have approaching experimental, iCurGunships='..iCurGunships..'; Is table of enemy land exp empty='..tostring( M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.reftEnemyLandExperimentals]))..'; Can path to base with amphibious='..tostring(aiBrain[M28Map.refbCanPathToEnemyBaseWithAmphibious])) end
                if iCurGunships < 20 and M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.reftEnemyLandExperimentals]) == false and aiBrain[M28Map.refbCanPathToEnemyBaseWithAmphibious] then
                    local iClosestLandExp = 650 --Ignore land exp further away than this
                    local oClosestLandExp, iCurDist
                    for iUnit, oUnit in M28Team.tTeamData[iTeam][M28Team.reftEnemyLandExperimentals] do
                        if M28UnitInfo.IsUnitValid(oUnit) then
                            iCurDist = M28Utilities.GetDistanceBetweenPositions(oUnit:GetPosition(), tLZTeamData[M28Map.reftClosestFriendlyBase])
                            if iCurDist < iClosestLandExp then
                                iClosestLandExp = iCurDist
                                oClosestLandExp = oUnit
                            end
                        end
                    end
                    if bDebugMessages == true then LOG(sFunctionRef..': Considering getting gunship, bomber or torp bomber in response to approaching land experimental threat, oClosestLandExp='..(oClosestLandExp.UnitId or 'nil')..(M28UnitInfo.GetUnitLifetimeCount(oClosestLandExp) or 'nil')..'; iClosestLandExp='..iClosestLandExp) end
                    if oClosestLandExp then
                        if iFactoryTechLevel == 1 and iClosestLandExp >= 250 and ConsiderUpgrading() then return sBPIDToBuild
                        elseif M28UnitInfo.IsUnitUnderwater(oClosestLandExp) then
                            --Only respond if it's a bit closer
                            if iClosestLandExp <= math.min(400, M28Utilities.GetDistanceBetweenPositions(tLZTeamData[M28Map.reftClosestFriendlyBase], tLZTeamData[M28Map.reftClosestEnemyBase]) * 0.4) then
                                if iClosestLandExp <= 200 then
                                    --Get gunships/bombers even though it's underwater at the moment
                                    if bDebugMessages == true then LOG(sFunctionRef..': Nearby land exp so will get gunships or bombers') end
                                    if ConsiderBuildingCategory(iGunshipCategoryUnlessBombersBetter - M28UnitInfo.refCategoryBomber * categories.TECH3) then return sBPIDToBuild end
                                    if ConsiderBuildingCategory(iNormalBomberCategoryToBuild - categories.TECH3) then return sBPIDToBuild end
                                    if ConsiderBuildingCategory(iBackupAirToGroundCategory) then return sBPIDToBuild end
                                else
                                    --Get torp bombers unless we have lots already
                                    if M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurTorpBomberThreat] <= 4500 then
                                        if ConsiderBuildingCategory(M28UnitInfo.refCategoryTorpBomber - categories.TECH3) then return sBPIDToBuild end
                                    end
                                end
                            end
                        else
                            if iClosestLandExp <= 500 or not(M28Team.tAirSubteamData[iAirSubteam][M28Team.refbFarBehindOnAir]) then
                                if bDebugMessages == true then LOG(sFunctionRef..': Approaching land exp so will get gunships or bombers') end
                                if ConsiderBuildingCategory(iGunshipCategoryUnlessBombersBetter) then return sBPIDToBuild end
                                if ConsiderBuildingCategory(M28UnitInfo.refCategoryBomber) then return sBPIDToBuild end
                                if ConsiderBuildingCategory(iBackupAirToGroundCategory) then return sBPIDToBuild end
                            end
                        end
                    end
                end

                --AirAA if far behind on air (lower priority since we are alreayd building in proportion to gunships above; i.e. dont want to get stuck only building airaa if have lost air control
                iCurrentConditionToTry = iCurrentConditionToTry + 1
                if bDebugMessages == true then LOG(sFunctionRef..': AirAA if far behind on air, iCurrentConditionToTry='..iCurrentConditionToTry..'; are we far behind='..tostring(M28Team.tAirSubteamData[iAirSubteam][M28Team.refbFarBehindOnAir])) end
                if M28Team.tAirSubteamData[iAirSubteam][M28Team.refbFarBehindOnAir] and (iAirAACountOfSearchCategory < M28Air.iMinimumASFCountPostGifting or (not(M28Team.tAirSubteamData[iAirSubteam][M28Team.refoLastHumanGiftedASFs]) and iCurGunships >= iAirAACountOfSearchCategory * 0.25 and (not(M28Team.tAirSubteamData[iAirSubteam][M28Team.refbNoAvailableTorpsForEnemies]) or (M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurTorpBomberThreat] or 0) >= 2500))) then
                    if iFactoryTechLevel >= 3 or not(M28Team.tAirSubteamData[iAirSubteam][M28Team.refbOnlyGetASFs]) then
                        if ConsiderBuildingCategory(M28UnitInfo.refCategoryAirAA) then return sBPIDToBuild end
                    end
                end

                --Transport if locations to drop
                iCurrentConditionToTry = iCurrentConditionToTry + 1
                if bDebugMessages == true then LOG(sFunctionRef..': Considering transport builder, is island drop shortlist empty='..tostring(M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.reftTransportIslandDropShortlist]))..'; M28Team.tTeamData[iTeam][M28Team.reftTransportFarAwaySameIslandPlateauLandZoneDropShortlist] empty='..tostring(M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.reftTransportFarAwaySameIslandPlateauLandZoneDropShortlist]))..'; refiTimeOfLastTransportCombatShortlistUpdate empty='..tostring(M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.refiTimeOfLastTransportCombatShortlistUpdate]))..'; refiTimeOfLastTransportCombatShortlistUpdate='..(M28Team.tAirSubteamData[aiBrain.M28AirSubteam][M28Team.refiTimeLastTriedBuildingTransport] or -100)..'; Cur transports='..aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryTransport)..'; reftiHighTechEngiDropPlateauAndZones empty='..tostring(M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.reftiHighTechEngiDropPlateauAndZones]))) end
                if (M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.reftTransportIslandDropShortlist]) == false or M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.reftTransportFarAwaySameIslandPlateauLandZoneDropShortlist]) == false or M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.reftiHighTechEngiDropPlateauAndZones]) == false) or (M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.refiTimeOfLastTransportCombatShortlistUpdate]) == false and (GetGameTimeSeconds() - (M28Team.tAirSubteamData[aiBrain.M28AirSubteam][M28Team.refiTimeLastTriedBuildingTransport] or -300) >= 300 or (M28Team.tTeamData[iTeam][M28Team.refbEnemyBaseInCombatDropShortlist] and GetGameTimeSeconds() - (M28Team.tAirSubteamData[aiBrain.M28AirSubteam][M28Team.refiTimeLastTriedBuildingTransport]) >= 120)) and aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryTransport) == 0) then
                    if GetGameTimeSeconds() - (M28Team.tAirSubteamData[aiBrain.M28AirSubteam][M28Team.refiTimeLastTriedBuildingTransport] or -100) >= 120 then
                        local iAlreadyBuilding = M28Conditions.GetNumberOfUnitsMeetingCategoryUnderConstructionInLandOrWaterZone(tLZTeamData, M28UnitInfo.refCategoryTransport, false)
                        if iAlreadyBuilding == 0 then
                            M28Team.tAirSubteamData[aiBrain.M28AirSubteam][M28Team.refiTimeLastTriedBuildingTransport] = GetGameTimeSeconds()
                            local iCategoryWanted = M28UnitInfo.refCategoryTransport - categories.TECH3 - categories.EXPERIMENTAL
                            if iFactoryTechLevel == 2 and ((oFactory[refiTotalBuildCount] or 0) < 10 or M28Team.tAirSubteamData[iAirSubteam][M28Team.refbNoAvailableTorpsForEnemies]) then
                                iCategoryWanted =  M28UnitInfo.refCategoryTransport * categories.TECH1
                            end
                            if bDebugMessages == true then LOG(sFunctionRef..':lower priority transport builder, iCurrentConditionToTry='..iCurrentConditionToTry) end
                            if ConsiderBuildingCategory(iCategoryWanted) then return sBPIDToBuild end
                        end
                    end
                end

                --AirAA if dont have low mass and lack air control and are at T3
                iCurrentConditionToTry = iCurrentConditionToTry + 1
                if iAirAACountOfSearchCategory < 400 and not (bHaveLowMass) and not (M28Team.tAirSubteamData[iAirSubteam][M28Team.refbHaveAirControl]) and iFactoryTechLevel >= 3 then
                    if iFactoryTechLevel >= 3 or not(M28Team.tAirSubteamData[iAirSubteam][M28Team.refbOnlyGetASFs]) then
                        if ConsiderBuildingCategory(M28UnitInfo.refCategoryAirAA) then return sBPIDToBuild end
                    end
                end

                --AirAA if we have significant sub threat and enemy has torp bombers, and we lack air control
                iCurrentConditionToTry = iCurrentConditionToTry + 1
                if not (M28Team.tAirSubteamData[iAirSubteam][M28Team.refbHaveAirControl]) and M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurAirAAThreat] <= 10000 and (M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurAirAAThreat] <= 1000 or M28Team.tTeamData[iTeam][M28Team.refiEnemyTorpBombersThreat] > 0) then
                    if iFactoryTechLevel >= 3 or not(M28Team.tAirSubteamData[iAirSubteam][M28Team.refbOnlyGetASFs]) then
                        if bDebugMessages == true then LOG(sFunctionRef..': Considering if we have significanlty more sub threat than our AirAA threat, and enemy has torp bombers, in which case will get more airaa') end
                        local tOurSubs = aiBrain:GetListOfUnits(M28UnitInfo.refCategorySubmarine, false, true)
                        if M28Utilities.IsTableEmpty(tOurSubs) == false then
                            local iOurSubThreat = M28UnitInfo.GetMassCostOfUnits(tOurSubs)
                            local iFactor = math.min(1, 0.25 + 0.25 * math.max(1, table.getn(M28Team.tAirSubteamData[iAirSubteam][M28Team.subreftoFriendlyM28Brains])))
                            if bDebugMessages == true then LOG(sFunctionRef..': iOurSubThreat='..iOurSubThreat..'; iFactor='..iFactor..'; M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurAirAAThreat]='..M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurAirAAThreat]) end
                            if iOurSubThreat * iFactor > M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurAirAAThreat] then
                                if ConsiderBuildingCategory(iAirAASearchCategory) then return sBPIDToBuild end
                            end
                        end
                    end
                end

                --T3 bomber if have high mass and are at T3 (incase e.g. the T2 gunship cap has bitten)
                iCurrentConditionToTry = iCurrentConditionToTry + 1
                if not (bHaveLowMass) and iFactoryTechLevel >= 3 and M28Team.tTeamData[iTeam][M28Team.subrefiTeamMassStored] >= 5000 and M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.75 then
                    if tLZTeamData[M28Map.subrefTbWantBP] then
                        if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then return sBPIDToBuild end --redundancy
                    end
                    if bDebugMessages == true then LOG(sFunctionRef..': High mass so want a strat bomber') end
                    if M28Utilities.bLoudModActive and ConsiderBuildingCategory(M28UnitInfo.refCategoryGunship * categories.TECH3) then return sBPIDToBuild
                    elseif ConsiderBuildingCategory(iNormalBomberCategoryToBuild) then return sBPIDToBuild end
                end

                --Bombers if have enemies in adjacent water zone and no enemy air units in cur zone, or AirAA if enemy air units are there, up to a distance of 250
                iCurrentConditionToTry = iCurrentConditionToTry + 1
                if M28Utilities.IsTableEmpty(tLZTeamData[M28Map.reftLZEnemyAirUnits]) then
                    M28Air.RecordOtherLandAndWaterZonesByDistance(tLZData)
                    if M28Utilities.IsTableEmpty(tLZData[M28Map.subrefOtherLandAndWaterZonesByDistance]) == false then
                        for iEntry, tSubtable in tLZData[M28Map.subrefOtherLandAndWaterZonesByDistance] do
                            if tSubtable[M28Map.subrefiDistance] >= math.min(M28Map.iMapSize * 0.5, 250) then break end
                            local tLZOrWZData
                            local tLZOrWZTeamData
                            if bDebugMessages == true then LOG(sFunctionRef..': Considering zone '..tSubtable[M28Map.subrefiLandOrWaterZoneRef]..'; Is water zone='..tostring(tSubtable[M28Map.subrefbIsWaterZone])..'; Plateau or pond='..tSubtable[M28Map.subrefiPlateauOrPond]) end
                            if tSubtable[M28Map.subrefbIsWaterZone] then
                                tLZOrWZData = M28Map.tPondDetails[tSubtable[M28Map.subrefiPlateauOrPond]][M28Map.subrefPondWaterZones][tSubtable[M28Map.subrefiLandOrWaterZoneRef]]
                                tLZOrWZTeamData = tLZOrWZData[M28Map.subrefWZTeamData][iTeam]
                            else
                                --Plateau
                                tLZOrWZData = M28Map.tAllPlateaus[tSubtable[M28Map.subrefiPlateauOrPond]][M28Map.subrefPlateauLandZones][tSubtable[M28Map.subrefiLandOrWaterZoneRef]]
                                tLZOrWZTeamData = tLZOrWZData[M28Map.subrefLZTeamData][iTeam]
                            end
                            if M28Utilities.IsTableEmpty(tLZOrWZTeamData[M28Map.subrefTEnemyUnits]) == false then
                                if M28Team.tAirSubteamData[iAirSubteam][M28Team.refbNoAvailableTorpsForEnemies] then
                                    if ConsiderBuildingCategory(M28UnitInfo.refCategoryTorpBomber) then return sBPIDToBuild end
                                end
                                if bDebugMessages == true then LOG(sFunctionRef..': Are enemy units in the PlateauOrPond '..tSubtable[M28Map.subrefiPlateauOrPond]..' Zone '..tSubtable[M28Map.subrefiLandOrWaterZoneRef]..' so will get gusnhip or bomber, bAirToGroundIsIneffective='..tostring(bAirToGroundIsIneffective or false)) end
                                if ConsiderBuildingCategory(iGunshipCategoryUnlessBombersBetter) then return sBPIDToBuild end
                                if ConsiderBuildingCategory(iBackupAirToGroundCategory) then return sBPIDToBuild end
                            elseif tLZOrWZTeamData[M28Map.refiEnemyAirToGroundThreat] + tLZOrWZTeamData[M28Map.refiEnemyAirAAThreat] + tLZOrWZTeamData[M28Map.refiEnemyAirOtherThreat] > 0 then
                                if iAirAACountOfSearchCategory < 400 and (iAirAACountOfSearchCategory < 150 or (M28Team.tTeamData[iTeam][M28Team.refiEnemyAirAAThreat] >= iAirAACountOfSearchCategory * 200 and (iAirAACountOfSearchCategory <= M28Air.iMinimumASFCountPostGifting or not(M28Team.tAirSubteamData[iAirSubteam][M28Team.refoLastHumanGiftedASFs])))) then
                                    if ConsiderBuildingCategory(iAirAASearchCategory) then return sBPIDToBuild end
                                end
                            end
                        end
                    end
                end

                --AirAA if high mass and lack air control
                iCurrentConditionToTry = iCurrentConditionToTry + 1
                if bDebugMessages == true then LOG(sFunctionRef..'; AirAA if high mass and lack air control, iCurrentConditionToTry='..iCurrentConditionToTry..'; iAirAACountOfSearchCategory='..iAirAACountOfSearchCategory..'; Have low mass='..tostring(bHaveLowMass)..'; Mass%='..M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored]..'; Have air control='..tostring(M28Team.tAirSubteamData[aiBrain.M28AirSubteam][M28Team.refbHaveAirControl])..'; AirAA threat='..M28Team.tAirSubteamData[aiBrain.M28AirSubteam][M28Team.subrefiOurAirAAThreat]) end
                if iAirAACountOfSearchCategory < 400 and not(bHaveLowMass) and M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.4 and (not(M28Team.tAirSubteamData[aiBrain.M28AirSubteam][M28Team.refbHaveAirControl]) or M28Team.tAirSubteamData[aiBrain.M28AirSubteam][M28Team.subrefiOurAirAAThreat] <= 750 * iFactoryTechLevel or (iAirAACountOfSearchCategory <= 50 and M28Team.tAirSubteamData[iAirSubteam][M28Team.refoLastHumanGiftedASFs])) then
                    if bDebugMessages == true then LOG(sFunctionRef..': Low priority AirAA builder') end
                    if iFactoryTechLevel >= 3 or not(M28Team.tAirSubteamData[iAirSubteam][M28Team.refbOnlyGetASFs]) then
                        if ConsiderBuildingCategory(M28UnitInfo.refCategoryAirAA) then return sBPIDToBuild end
                    end
                end

                --Gunship if we dont have low mass (or are in a campaign with at least 500 mass stored and no active upgrades) and have air control
                iCurrentConditionToTry = iCurrentConditionToTry + 1
                if bDebugMessages == true then LOG(sFunctionRef..': Low priority gunship builder, iFactoryTechLevel='..iFactoryTechLevel..'; Lowest air fac tech='..M28Team.tTeamData[iTeam][M28Team.subrefiLowestFriendlyAirFactoryTech]..'; have air control='..tostring(M28Team.tAirSubteamData[aiBrain.M28AirSubteam][M28Team.refbHaveAirControl])..'; Have low mass='..tostring(bHaveLowMass)..'; CampaignMap='..tostring(M28Map.bIsCampaignMap)..'; team mass stored='..M28Team.tTeamData[iTeam][M28Team.subrefiTeamMassStored]..'; Is table of upgrading HQs empty='..tostring(M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.subreftTeamUpgradingHQs]))..'; Is table of upgrading mexes empty='..tostring(M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.subreftTeamUpgradingMexes]))) end
                if (not(bAirToGroundIsIneffective) or M28Map.bIsCampaignMap) and iCurGunships <= 200 and iFactoryTechLevel >= M28Team.tTeamData[iTeam][M28Team.subrefiLowestFriendlyAirFactoryTech] and M28Team.tAirSubteamData[aiBrain.M28AirSubteam][M28Team.refbHaveAirControl] and (not(bHaveLowMass) or (M28Map.bIsCampaignMap and iFactoryTechLevel >= 2 and M28Team.tTeamData[iTeam][M28Team.subrefiTeamMassStored] >= 500 and M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.subreftTeamUpgradingHQs]) and M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.subreftTeamUpgradingMexes]))) then
                    --Either build gunships or AirAA dpeending on which we have less of
                    if iGunshipCategoryUnlessBombersBetter == M28UnitInfo.refCategoryGunship then
                        if bDebugMessages == true then LOG(sFunctionRef..': Will try to build a gunship as have air control') end
                        if ConsiderBuildingCategory(M28UnitInfo.refCategoryGunship) then return sBPIDToBuild end
                    elseif M28Team.tTeamData[iTeam][M28Team.refiGunshipKills] + M28Team.tTeamData[iTeam][M28Team.refiBomberKills] > (M28Team.tTeamData[iTeam][M28Team.refiGunshipLosses] + M28Team.tTeamData[iTeam][M28Team.refiBomberLosses]) * 0.5 then
                        if bDebugMessages == true then LOG(sFunctionRef..': Will try to build our preferred unti category (gunship or bomber) as have air control and dont have low mass') end
                        if ConsiderBuildingCategory(iGunshipCategoryUnlessBombersBetter) then return sBPIDToBuild end
                    end
                end

                --Campaign specific - bombers if we lack gunship and bomber threat
                iCurrentConditionToTry = iCurrentConditionToTry + 1
                if iCurGunships == 0 and iFactoryTechLevel < 3 and M28Team.tTeamData[iTeam][M28Team.subrefiLowestFriendlyAirFactoryTech] < 3 and (M28Map.bIsCampaignMap or M28Overseer.bUnitRestrictionsArePresent) and M28Team.tTeamData[iTeam][M28Team.subrefiOurGunshipThreat] == 0 and M28Team.tAirSubteamData[aiBrain.M28AirSubteam][M28Team.subrefiOurBomberThreat] < 1500 then
                    if bDebugMessages == true then LOG(sFunctionRef..': In campaign so want more gunships or bombers') end
                    if ConsiderBuildingCategory(M28UnitInfo.refCategoryGunship) then return sBPIDToBuild end --redundancy but unlikely we can build them
                    if ConsiderBuildingCategory(iNormalBomberCategoryToBuild) then return sBPIDToBuild end
                end

                --Build air to ground force if high mass and fewer than 100
                iCurrentConditionToTry = iCurrentConditionToTry + 1
                if bDebugMessages == true then LOG(sFunctionRef..': Considering whether to get bombers, bHaveLowMass='..tostring(bHaveLowMass)..'; M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored]='..M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored]..'; Current bombers='..aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryBomber)) end
                if not(bHaveLowMass) and M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.7 and aiBrain:GetCurrentUnits(iGunshipCategoryUnlessBombersBetter) <= 100 then
                    if bDebugMessages == true then LOG(sFunctionRef..': Want to get more bombers due to high mass') end
                    if ConsiderBuildingCategory(iGunshipCategoryUnlessBombersBetter) then return sBPIDToBuild end
                    if aiBrain:GetCurrentUnits(iBackupAirToGroundCategory) <= 100 and ConsiderBuildingCategory(iBackupAirToGroundCategory) then return sBPIDToBuild end
                end
            end
        end

    end
    --Engineers if thisi s an Air HQ and we need BP of this tech level or lower, and have at least 1k mass stored on our team with positive mass income
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if M28Team.tTeamData[iTeam][M28Team.subrefiTeamMassStored] >= 1000 and (M28Team.tTeamData[iTeam][M28Team.subrefiTeamNetMass] > 0 or M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.35) and EntityCategoryContains(M28UnitInfo.refCategoryAirHQ, oFactory.UnitId) and tLZTeamData[M28Map.subrefTbWantBP] and aiBrain[M28Economy.refiGrossMassBaseIncome] >= 3 then
        local bWantBPOfThisTech = false
        for iCurTech = iFactoryTechLevel, 1, -1 do
            if tLZTeamData[M28Map.subrefTBuildPowerByTechWanted][iCurTech] > 0 then
                bWantBPOfThisTech = true
                break
            end
        end
        if bDebugMessages == true then LOG(sFunctionRef..': Air fac last builder for engineers at an air HQ, bWantBPOfThisTech='..tostring(bWantBPOfThisTech)..'; iFactoryTechLevel='..iFactoryTechLevel) end
        if bWantBPOfThisTech then if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then return sBPIDToBuild end end
    end


    if iFactoryTechLevel >= M28Team.tTeamData[iTeam][M28Team.subrefiHighestFriendlyAirFactoryTech] and not(bHaveLowPower and bHaveLowMass) then --i.e. if we dont have low mass we should be building engi even if we lack power; if we dont have low power we should be building airforce even if we dont have loads of mass
        M28Team.tTeamData[iTeam][M28Team.refiTimeLastHadNothingToBuildForAirFactory] = GetGameTimeSeconds()
        tLZTeamData[M28Map.subrefiTimeAirFacHadNothingToBuild] = GetGameTimeSeconds()
        if bDebugMessages == true then LOG(sFunctionRef..': Failed to find something to build for factory '..oFactory.UnitId..M28UnitInfo.GetUnitLifetimeCount(oFactory)..' at time='..GetGameTimeSeconds()..'; oFactory fraction complete='..oFactory:GetFractionComplete()) end
    end
    oFactory[refiTimeSinceLastFailedToGetOrder] = GetGameTimeSeconds() --Redundancy, will also include in parent logic
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
end

function GetBlueprintToBuildForNavalFactory(aiBrain, oFactory)
    local sFunctionRef = 'GetBlueprintToBuildForNavalFactory'
    local bDebugMessages = false if M28Profiler.bGlobalDebugOverride == true then   bDebugMessages = true end
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerStart)



    local iCategoryToBuild
    local iWaterZone = M28Map.GetWaterZoneFromPosition(oFactory:GetPosition())
    local iPond = M28Map.tiPondByWaterZone[iWaterZone]
    local tWZData = M28Map.tPondDetails[iPond][M28Map.subrefPondWaterZones][iWaterZone]
    local iTeam = aiBrain.M28Team
    local tWZTeamData = tWZData[M28Map.subrefWZTeamData][iTeam]
    if not(tWZTeamData) then
        M28Utilities.ErrorHandler('Factory '..oFactory.UnitId..M28UnitInfo.GetUnitLifetimeCount(oFactory)..' doesnt have WZ team data; iPond='..(iPond or 'nil')..'; iWaterZone='..(iWaterZone or 'nil')..'; iTeam='..(aiBrain.M28Team or 'nil'))
        if bDebugMessages == true then M28Utilities.DrawLocation(oFactory:GetPosition()) end
    end
    local iFactoryTechLevel = M28UnitInfo.GetUnitTechLevel(oFactory)
    local tiMAAThresholdByTech = { 50, 500, 1000, 1000 }

    local bHaveLowMass = M28Conditions.TeamHasLowMass(iTeam)
    local bHaveLowPower = M28Conditions.HaveLowPower(iTeam)



    if bDebugMessages == true then
        LOG(sFunctionRef .. ': Near start of code, time=' .. GetGameTimeSeconds() .. '; Pond='..iPond..'; WZ='..iWaterZone..'; oFactory=' .. oFactory.UnitId .. M28UnitInfo.GetUnitLifetimeCount(oFactory) .. '; Checking if we have the highest tech land factory in the current land zone, iFactoryTechLevel=' .. iFactoryTechLevel .. '; Highest friendly factory tech=' .. M28Team.tTeamData[iTeam][M28Team.subrefiHighestFriendlyFactoryTech]..'; Cur T1 surface navy='..aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryNavalSurface * categories.TECH1)..'; T2 surface navy='..aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryNavalSurface * categories.TECH2)..'; T3 navy='..aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryNavalSurface * categories.TECH3)..'; Factory build count='..(oFactory[refiTotalBuildCount] or 'nil'))
    end

    local bConsiderBuildingShieldOrStealthBoats = true
    --Shield boat needs 10 energy per tick; same for stealth boat; dont want this to account for more than 20% of gross energy; so want 50 gross energy per tick per shield boat for it to be <20%
    if bHaveLowPower or iFactoryTechLevel == 1 then
        bConsiderBuildingShieldOrStealthBoats = false
    else
        if GetGameTimeSeconds() - (M28Team.tTeamData[iTeam][M28Team.refiLastTimeNoShieldBoatTargetsByPond][iPond] or -100) <= 5 and EntityCategoryContains(categories.UEF, oFactory.UnitId) then
            bConsiderBuildingShieldOrStealthBoats = false
            if bDebugMessages == true then LOG(sFunctionRef..': Dont want shield or stealth as UEF navla fac and pond has recently had no targets for shield boats') end
        elseif EntityCategoryContains(categories.CYBRAN, oFactory.UnitId) and GetGameTimeSeconds() - (M28Team.tTeamData[iTeam][M28Team.refiLastTimeNoStealthBoatTargetsByPond][iPond] or -100) <= 30 then
            bConsiderBuildingShieldOrStealthBoats = false
            if bDebugMessages == true then LOG(sFunctionRef..': Dont want stealth as cybran naval fac and pond recently had no targets for stealth boats') end
        else
            local iCurShieldAndStealthBoats = aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryShieldBoat + M28UnitInfo.refCategoryStealthBoat)
            local iEnergyMod = 1
            if tWZTeamData[M28Map.subrefWZbContainsUnderwaterStart] then
                iEnergyMod = 2.5
            end
            if aiBrain[M28Economy.refiGrossEnergyBaseIncome] < (1 + iCurShieldAndStealthBoats) * 50 * iEnergyMod then
                bConsiderBuildingShieldOrStealthBoats = false
            elseif iCurShieldAndStealthBoats >= 5 then
                --Want to be a T3 factory and have at least 5 T3 naval units before building more shield boats
                bConsiderBuildingShieldOrStealthBoats = false
                if iFactoryTechLevel >= 3 and iCurShieldAndStealthBoats <= 22 and aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryNavalSurface * categories.TECH3) >= 10 then
                    bConsiderBuildingShieldOrStealthBoats = true
                elseif iCurShieldAndStealthBoats <= 10 and aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryNavalSurface * categories.TECH3 + M28UnitInfo.refCategoryDestroyer + M28UnitInfo.refCategoryCruiser) * 1.5 > iCurShieldAndStealthBoats then
                    bConsiderBuildingShieldOrStealthBoats = true
                end
            end
        end
    end
    local bUseFrigatesAsScouts = M28Team.tTeamData[iTeam][M28Team.subrefbUseFrigatesAsScoutsByPond][iPond]
    if bDebugMessages == true then
        LOG(sFunctionRef .. ': Finished checking if we want to consider building shield/stealth boats, bConsiderBuildingShieldOrStealthBoats=' .. tostring(bConsiderBuildingShieldOrStealthBoats) .. '; Cur shield and stealth boats=' .. aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryShieldBoat + M28UnitInfo.refCategoryStealthBoat) .. '; bHaveLowPower=' .. tostring(bHaveLowPower) .. '; Cur T3 navy and destroyer+cruiser=' .. aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryNavalSurface * categories.TECH3 + M28UnitInfo.refCategoryDestroyer + M28UnitInfo.refCategoryCruiser)..'; Time since last had no shield targets='..GetGameTimeSeconds() - (M28Team.tTeamData[iTeam][M28Team.refiLastTimeNoShieldBoatTargetsByPond][iPond] or -100)..'; Time since last wanted no stealth in this poind='..GetGameTimeSeconds() - (M28Team.tTeamData[iTeam][M28Team.refiLastTimeNoStealthBoatTargetsByPond][iPond] or -100))
    end

    iCategoryToBuild = M28UnitInfo.refCategoryEngineer --Placeholder
    local sBPIDToBuild
    local iCurrentConditionToTry = 0

    --subfunctions to mean we can do away with the 'current condition == 1, == 2.....==999 type approach making it much easier to add to
    function ConsiderBuildingCategory(iCategoryToBuild)
        --GetBlueprintThatCanBuildOfCategory(aiBrain, iCategoryCondition, oFactory, bGetSlowest, bGetFastest, bGetCheapest, iOptionalCategoryThatMustBeAbleToBuild, bIgnoreTechDifferences)
        sBPIDToBuild = GetBlueprintThatCanBuildOfCategory(aiBrain, iCategoryToBuild, oFactory, nil,          nil,           nil,            nil,                                false)
        if bDebugMessages == true then
            LOG(sFunctionRef .. ': Time=' .. GetGameTimeSeconds() .. ' Factory=' .. oFactory.UnitId .. M28UnitInfo.GetUnitLifetimeCount(oFactory) .. '; WZ=' .. iWaterZone .. '; iCurrentConditionToTry=' .. iCurrentConditionToTry .. '; sBPIDToBuild before adjusting for override=' .. (sBPIDToBuild or 'nil'))
        end
        if sBPIDToBuild then
            local bIsEngineer = EntityCategoryContains(M28UnitInfo.refCategoryEngineer, sBPIDToBuild)
            sBPIDToBuild = AdjustBlueprintForOverrides(aiBrain, oFactory, sBPIDToBuild, tWZTeamData, iFactoryTechLevel)
            if bDebugMessages == true then
                if sBPIDToBuild then
                    LOG(sFunctionRef..': sBPIDToBuild after adjusting for override='..(sBPIDToBuild or 'nil')..': '..(__blueprints[sBPIDToBuild].General.UnitName or 'nil')..'; Close to unit cap='..tostring(aiBrain[M28Overseer.refbCloseToUnitCap])..'; bIsEngineer='..tostring(bIsEngineer))
                else
                    LOG(sFunctionRef..': sBPIDToBuild after adjusting for override='..(sBPIDToBuild or 'nil')..'; Close to unit cap='..tostring(aiBrain[M28Overseer.refbCloseToUnitCap])..'; bIsEngineer='..tostring(bIsEngineer))
                end
            end
            if not(sBPIDToBuild) and not(bIsEngineer) and iFactoryTechLevel < 3 and aiBrain[M28Overseer.refbCloseToUnitCap] then
                sBPIDToBuild = M28UnitInfo.GetUnitUpgradeBlueprint(oFactory, true)
            end
        else
            if bDebugMessages == true then LOG(sFunctionRef..': BP to build after adjusting for override is nil') end
        end
        if sBPIDToBuild then
            M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd) --Assumes we will end code if we get to this point
            return sBPIDToBuild
        end
    end

    function ConsiderUpgrading()
        if bDebugMessages == true then LOG(sFunctionRef..': Considering upgrading, do we want to delay to get more engineers or snipe units='..tostring(M28Conditions.CheckIfNeedMoreEngineersOrSnipeUnitsBeforeUpgrading(oFactory))) end
        if not(M28Conditions.CheckIfNeedMoreEngineersOrSnipeUnitsBeforeUpgrading(oFactory)) then
            --Dont upgrade T1 naval fac if it's our highest naval tech and we already have an active naval fac upgrade of this faction or are about to overflow mass
            if iFactoryTechLevel == aiBrain[M28Economy.refiOurHighestNavalFactoryTech] and aiBrain:GetEconomyStoredRatio('MASS') < 0.85 and M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.subreftTeamUpgradingHQs]) == false then
                local iFactionWanted = M28UnitInfo.GetUnitFaction(oFactory)
                local tUpgradingNavalHQs = EntityCategoryFilterDown(M28UnitInfo.refCategoryNavalFactory, M28Team.tTeamData[iTeam][M28Team.subreftTeamUpgradingHQs])
                if M28Utilities.IsTableEmpty(tUpgradingNavalHQs) == false then
                    for iHQ, oHQ in M28Team.tTeamData[iTeam][M28Team.subreftTeamUpgradingHQs] do
                        if M28UnitInfo.IsUnitValid(oHQ) and oHQ:GetAIBrain() == aiBrain and M28UnitInfo.GetUnitFaction(oHQ) == iFactionWanted and M28UnitInfo.GetUnitTechLevel(oHQ) >= iFactoryTechLevel then
                            return nil
                        end
                    end
                end
            end


            sBPIDToBuild = M28UnitInfo.GetUnitUpgradeBlueprint(oFactory, true)
            if sBPIDToBuild then M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd) end
            return sBPIDToBuild
        end
    end


    --MAIN BUILDER LOGIC:
    --Cycle through each naval zone and decide what units to get
    local iCurFrigates = aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryFrigate)
    local bConsiderBuildingMoreCombat = true

    local iCombatCategory
    if iFactoryTechLevel <= 1 then
        iCombatCategory = M28UnitInfo.refCategoryFrigate
        if iCurFrigates >= 75 then
            bConsiderBuildingMoreCombat = false
            --Consider building subs instead early on
        elseif (M28Team.tTeamData[iTeam][M28Team.refiEnemyTorpBombersThreat] or 0) == 0 and M28Team.tTeamData[iTeam][M28Team.subrefiHighestEnemyAirTech] < 3 and M28Team.tTeamData[iTeam][M28Team.subrefiLowestFriendlyNavalFactoryTech] < 3 then
            local iSubLC = M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategorySubmarine)
            if iSubLC <= 6 or (iSubLC <= 12 and M28Team.tTeamData[iTeam][M28Team.subrefiHighestEnemyAirTech] < 2 and M28Team.tTeamData[iTeam][M28Team.subrefiLowestFriendlyNavalFactoryTech] < 2) then
                --Check no nearby hover
                local bNearbyHover = tWZTeamData[M28Map.subrefbWZOnlyHoverEnemies]

                if M28Utilities.IsTableEmpty(tWZData[M28Map.subrefWZAdjacentWaterZones]) == false then
                    for _, iAdjWZ in tWZData[M28Map.subrefWZAdjacentWaterZones] do
                        local tAdjWZTeamData = M28Map.tPondDetails[M28Map.tiPondByWaterZone[iAdjWZ]][M28Map.subrefPondWaterZones][iAdjWZ][M28Map.subrefWZTeamData][iTeam]
                        if tAdjWZTeamData[M28Map.subrefbWZOnlyHoverEnemies] then
                            bNearbyHover = true
                            break
                        end
                    end
                end
                if not(bNearbyHover) then
                    iCombatCategory = M28UnitInfo.refCategorySubmarine
                    if bDebugMessages == true then LOG(sFunctionRef..': will have subs as our main combat unit not frigates') end
                end
            end
            if bDebugMessages == true then LOG(sFunctionRef..' Cnosidering if want to build subs as main combat category instead of frigates, iSubLC='..iSubLC..'; iCurFrigates='..iCurFrigates) end
        else
            if bDebugMessages == true then LOG(sFunctionRef..' Combat category is to just build frigates') end
        end
    elseif iFactoryTechLevel <= 2 then
        local iCurDestroyer = aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryDestroyer)
        local iCurCruiser = aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryCruiser)
        local iCurT3Surface = aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryNavalSurface * categories.TECH3)

        if iCurFrigates < 75 and not(aiBrain[M28Overseer.refbCloseToUnitCap]) and iCurDestroyer > 0 and iCurFrigates < iCurDestroyer * 4 + iCurCruiser * 2 + iCurT3Surface * 5 then
            iCombatCategory = M28UnitInfo.refCategoryFrigate
            if bDebugMessages == true then LOG(sFunctionRef..' Combat category is to build frigates instead of destroyers') end
        else
            iCombatCategory = M28UnitInfo.refCategoryDestroyer
            if bDebugMessages == true then LOG(sFunctionRef..' Combat category is to build destroyer') end
        end
    else
        --T3+
        local iCurDestroyerAndBattlecruiser = aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryDestroyer + M28UnitInfo.refCategoryBattlecruiser)

        local iCurBattleships = aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryBattleship)
        local iOtherT2T3Surface = aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryNavalSurface - categories.TECH1 - M28UnitInfo.refCategoryBattleship - M28UnitInfo.refCategoryDestroyer - M28UnitInfo.refCategoryBattlecruiser)
        if not((aiBrain[M28Overseer.refbCloseToUnitCap])) and (iCurFrigates == 0 or (iCurFrigates <= 75 and iCurDestroyerAndBattlecruiser > 0 and iCurBattleships > 0 and iCurFrigates <= iCurDestroyerAndBattlecruiser * 4 + iCurBattleships * 5 + iOtherT2T3Surface * 2)) then
            iCombatCategory = M28UnitInfo.refCategoryFrigate
        elseif iCurDestroyerAndBattlecruiser == 0 or iCurDestroyerAndBattlecruiser < iCurBattleships * 2 + 2 then
            iCombatCategory = M28UnitInfo.refCategoryDestroyer + M28UnitInfo.refCategoryBattlecruiser
            --If factory can build battlecruiser and we have none and LC is 0 then build instead of battleship
        elseif oFactory:CanBuild('xes0307') and M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryBattlecruiser) <= 1 and (M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryBattlecruiser) == 0 or M28Utilities.IsTableEmpty(M28Team.tTeamData[iTeam][M28Team.reftEnemyBattleships])) then
            iCombatCategory = M28UnitInfo.refCategoryBattlecruiser
        else
            iCombatCategory = M28UnitInfo.refCategoryBattleship
        end
        if bDebugMessages == true then
            LOG(sFunctionRef .. ': Finished getting combat category, iCurDestroyerAndBattlecruiser=' .. iCurDestroyerAndBattlecruiser .. '; iCurFrigates=' .. iCurFrigates .. '; iCurBattleships=' .. iCurBattleships..'; Lifetime battlecruiser count='..M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryBattlecruiser)..'; iOtherT2T3Surface='..iOtherT2T3Surface)
        end
    end

    --High priority engineer if we started in water
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if tWZTeamData[M28Map.subrefWZbContainsUnderwaterStart] then
        if aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryEngineer * M28UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel)) < 3 or (iFactoryTechLevel <= 2 and M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryEngineer) <= 10) then
            if bDebugMessages == true then
                LOG(sFunctionRef .. ': Water start, will get high priority engineer')
            end
            if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then
                return sBPIDToBuild
            end
        end
    end

    --High priority anti-air if we have a battleship and no cruiser, or alternatively if we have 3 destroyers and no cruiser, or enemy has torps and we havent built any cruisers yet
    local iCurCruiserCarrier = aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryCruiserCarrier)
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if bDebugMessages == true then
        LOG(sFunctionRef .. ': Checking if we want to get cruisers, iCurCruiserCarrier=' .. iCurCruiserCarrier..'; Cruiser LC='..M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryCruiser))
    end
    if iCurCruiserCarrier == 0 and iFactoryTechLevel >= 2 and (
            (oFactory[refiTotalBuildCount] <= 5 and M28Team.tTeamData[iTeam][M28Team.refiEnemyTorpBombersThreat] > 0 and M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryCruiser) < M28Team.tTeamData[iTeam][M28Team.refiEnemyTorpBombersThreat] * 1500) or
                    aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryBattleship) + aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryBattlecruiser) > 0
                    or aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryDestroyer) >= 3) then
        if bDebugMessages == true then
            LOG(sFunctionRef .. ': Will try get High priority cruiser')
        end
        if ConsiderBuildingCategory(M28UnitInfo.refCategoryCruiser) then
            return sBPIDToBuild
        end
    end

    --First consider zone we are in
    if bDebugMessages == true then
        LOG(sFunctionRef .. ': Considering immediate needs for cur WZ that are in, tWZTeamData[M28Map.subrefWZThreatEnemySubmersible]=' .. tWZTeamData[M28Map.subrefWZThreatEnemySubmersible] .. '; tWZTeamData[M28Map.subrefWZThreatEnemySurface]=' .. tWZTeamData[M28Map.subrefWZThreatEnemySurface] .. '; tWZTeamData[M28Map.refiEnemyAirToGroundThreat]=' .. tWZTeamData[M28Map.refiEnemyAirToGroundThreat] .. '; tWZTeamData[M28Map.refbWZWantsMobileShield]=' .. tostring(tWZTeamData[M28Map.refbWZWantsMobileShield]) .. '; tWZTeamData[M28Map.refbWZWantsMobileStealth]=' .. tostring(tWZTeamData[M28Map.refbWZWantsMobileStealth])..'; tWZTeamData[M28Map.subrefLZThreatAllyMAA]='..tWZTeamData[M28Map.subrefLZThreatAllyMAA])
    end
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if tWZTeamData[M28Map.subrefWZThreatEnemySubmersible] > 0 then
        if bDebugMessages == true then
            LOG(sFunctionRef .. ': Immediate threat - want antinavy')
        end
        if ConsiderBuildingCategory(M28UnitInfo.refCategoryAntiNavy - categories.SILO) then
            return sBPIDToBuild
        end
    end

    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if tWZTeamData[M28Map.subrefWZThreatEnemySurface] > 0 then
        --Get frigates instead of subs, because subs die easily to ground-fire from frigates, and its possible enemy has hover units
        if bDebugMessages == true then
            LOG(sFunctionRef .. ': Immediate threat - want frigate')
        end
        if ConsiderBuildingCategory(M28UnitInfo.refCategoryFrigate) then
            return sBPIDToBuild
        end --Want frigate as enemy is close
    end

    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if tWZTeamData[M28Map.refiEnemyAirToGroundThreat] > 0 and tWZTeamData[M28Map.refiEnemyAirToGroundThreat] >= math.min(2500, tWZTeamData[M28Map.subrefLZThreatAllyMAA] * 0.35) then
        if EntityCategoryContains(categories.AEON, oFactory.UnitId) or tWZTeamData[M28Map.refiEnemyAirToGroundThreat] >= math.max(100, (tWZTeamData[M28Map.subrefWZThreatAlliedAA] or 0) * 0.5) then
            if bDebugMessages == true then LOG(sFunctionRef .. ': Immediate threat - want AA') end
            if ConsiderBuildingCategory(M28UnitInfo.refCategoryNavalAA) then return sBPIDToBuild end
        end
        --Frigates should be a faster way of getting basic AA
        if bDebugMessages == true then LOG(sFunctionRef .. ': Immediate threat - want AA via frigate') end
        if ConsiderBuildingCategory(M28UnitInfo.refCategoryNavalAA + M28UnitInfo.refCategoryFrigate) then return sBPIDToBuild end
    elseif tWZTeamData[M28Map.refiTimeLastRunFromEnemyAir] and GetGameTimeSeconds() - tWZTeamData[M28Map.refiTimeLastRunFromEnemyAir] <= 15 and (tWZTeamData[M28Map.subrefWZMAAThreatWanted] > 0 or tWZTeamData[M28Map.subrefLZThreatAllyMAA] == 0) then
        if bDebugMessages == true then LOG(sFunctionRef..': Recently had enemy air to ground threat and we lack any MAA so will get some MAA') end
        if ConsiderBuildingCategory(M28UnitInfo.refCategoryNavalAA) then return sBPIDToBuild end
    end

    --Engineer if close to overflowing and dont have low power
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if not(bHaveLowMass) and not(bHaveLowPower) and aiBrain:GetEconomyStoredRatio('MASS') >= 0.5 and tWZTeamData[M28Map.subrefTbWantBP] then
        local iEngineersUnderConstruction = M28Conditions.GetNumberOfUnitsMeetingCategoryUnderConstructionInLandOrWaterZone(tWZTeamData, M28UnitInfo.refCategoryEngineer)
        local iFactoriesInZone = M28Conditions.GetNumberOfConstructedUnitsMeetingCategoryInZone(tWZTeamData, M28UnitInfo.refCategoryFactory)
        if bDebugMessages == true then LOG(sFunctionRef..': Higher priority naval engi builder, iEngineersUnderConstruction='..iEngineersUnderConstruction..'; iFactoriesInZone='..iFactoriesInZone..'; Factory engi LC='..M28Conditions.GetFactoryLifetimeCount(oFactory, M28UnitInfo.refCategoryEngineer)..'; Total build count='..oFactory[refiTotalBuildCount]) end
        if (iFactoriesInZone >= 2 or M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.9 or M28Team.tTeamData[iTeam][M28Team.subrefiTeamNetMass] > 0) and iEngineersUnderConstruction < iFactoriesInZone * 0.5 and (iFactoriesInZone > 1 or M28Conditions.GetFactoryLifetimeCount(oFactory, M28UnitInfo.refCategoryEngineer) < oFactory[refiTotalBuildCount] * 0.5) then
            if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then return sBPIDToBuild end
        end
    end

    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if bConsiderBuildingShieldOrStealthBoats and tWZTeamData[M28Map.refbWZWantsMobileShield] then
        if bDebugMessages == true then
            LOG(sFunctionRef .. ': Want shielding for core WZ')
        end
        if ConsiderBuildingCategory(M28UnitInfo.refCategoryShieldBoat) then return sBPIDToBuild end
    end

    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if bDebugMessages == true then LOG(sFunctionRef..': Considering if want to build stealth boat for this WZ, tWZTeamData[M28Map.refbWZWantsMobileStealth]='..tostring(tWZTeamData[M28Map.refbWZWantsMobileStealth] or false)..'; bConsiderBuildingShieldOrStealthBoats='..tostring(bConsiderBuildingShieldOrStealthBoats or false)) end
    if bConsiderBuildingShieldOrStealthBoats and tWZTeamData[M28Map.refbWZWantsMobileStealth] then
        if bDebugMessages == true then
            LOG(sFunctionRef .. ': Want stealth for core WZ')
        end
        if ConsiderBuildingCategory(M28UnitInfo.refCategoryStealthBoat) then return sBPIDToBuild end
    end

    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if iFactoryTechLevel == 2 then
        --Wnat first t2 unit to be a destroyer, assuming no immediate threats (per above)

        if M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryDestroyer) == 0 then
            local iCruiserLC = M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryCruiserCarrier)
            if bDebugMessages == true then LOG(sFunctionRef..': High priority first destroyer unless want first cruiser more, iCruiserLC='..iCruiserLC) end
            if (iCruiserLC == 0 and GetGameTimeSeconds() - (M28Team.tTeamData[iTeam][M28Team.refiTimeLastHadBombardmentModeByPond] or 0) <= 10) or (M28Team.tTeamData[iTeam][M28Team.refiEnemyTorpBombersThreat] / 1500 >= iCruiserLC and not(M28Conditions.TeamHasAirControl(iTeam)) and aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryFrigate) <= 10 and aiBrain:GetCurrentUnits(M28UnitInfo.refCategorySubmarine) >= 10) then
                if ConsiderBuildingCategory(M28UnitInfo.refCategoryCruiserCarrier) then return sBPIDToBuild end
            end
            if ConsiderBuildingCategory(M28UnitInfo.refCategoryDestroyer) then return sBPIDToBuild end
        end
    end

    --Have at least 1 of the current combat category unit
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if bDebugMessages == true then
        LOG(sFunctionRef .. ': Number of combat category units we have=' .. aiBrain:GetCurrentUnits(iCombatCategory)..'; Destroyer count='..aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryDestroyer)..'; Number of combat category under construction='..M28Conditions.GetNumberOfUnitsMeetingCategoryUnderConstructionInLandOrWaterZone(tWZTeamData, iCombatCategory)..'; bConsiderBuildingMoreCombat='..tostring(bConsiderBuildingMoreCombat))
    end
    if bConsiderBuildingMoreCombat and aiBrain:GetCurrentUnits(iCombatCategory) == 0 and (iFactoryTechLevel < 3 or (M28Conditions.GetNumberOfUnitsMeetingCategoryUnderConstructionInLandOrWaterZone(tWZTeamData, iCombatCategory) == 0 and aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryDestroyer) >= 2)) then
        if bDebugMessages == true then LOG(sFunctionRef..': will try and build more of combat category') end
        if ConsiderBuildingCategory(iCombatCategory) then
            return sBPIDToBuild
        end
    end

    --Upgrade naval fac as priority if enemy has better navy tech than us or we ahve lots of naval units, or are at T1 and enemy has torps; also in high mass scenarios where we already have T3 navy
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if bDebugMessages == true then LOG(sFunctionRef .. ': iCurrentConditionToTry=' .. iCurrentConditionToTry .. '; About ot check if want to upgrade factory, iFactoryTechLevel=' .. iFactoryTechLevel .. '; Is table of active upgrades for WZ empty=' .. tostring(M28Utilities.IsTableEmpty(tWZTeamData[M28Map.subreftoActiveUpgrades]))..'; Are we stalling mass='..tostring(M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingMass])..'; Does this brain have active naval upgrade='..tostring(M28Team.DoesBrainHaveActiveHQUpgradesOfCategory(aiBrain, M28UnitInfo.refCategoryNavalFactory))..'; Highest enemy naval tech='..M28Team.tTeamData[iTeam][M28Team.subrefiHighestEnemyNavyTech]..'; Build count='..oFactory[refiTotalBuildCount]..'; Brain gross mass='..aiBrain[M28Economy.refiGrossMassBaseIncome]..'; Is this primary factory='..tostring((oFactory[refbPrimaryFactoryForIslandOrPond] or false))) end
    if iFactoryTechLevel < 3 and (oFactory[refiTotalBuildCount] >= 5 or iFactoryTechLevel < aiBrain[M28Economy.refiOurHighestNavalFactoryTech] or (GetGameTimeSeconds() - (M28Team.tTeamData[iTeam][M28Team.refiTimeLastHadBombardmentModeByPond][iPond] or -10) <= 4.1) or (iFactoryTechLevel == 1 and M28Team.tTeamData[iTeam][M28Team.refiEnemyTorpBombersThreat] > 0)
            --Primary factory, and enemy is getting t2 navy, and we have o ther factories in this WZ, and we are at t1
            or (iFactoryTechLevel == 1 and M28Team.tTeamData[iTeam][M28Team.subrefiHighestEnemyNavyTech] > 1 and oFactory[refiTotalBuildCount] >= 2 and (oFactory[refbPrimaryFactoryForIslandOrPond] or oFactory[refiTotalBuildCount] >= 4) and M28Utilities.IsTableEmpty(tWZTeamData[M28Map.subreftoActiveUpgrades]) and aiBrain[M28Economy.refiOurHighestNavalFactoryTech] == 1 and aiBrain[M28Economy.refiGrossMassBaseIncome] >= 4.5 and not(M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingMass]) and not(M28Team.DoesBrainHaveActiveHQUpgradesOfCategory(aiBrain, M28UnitInfo.refCategoryNavalFactory)))
    ) then
        local iActiveFactoryUpgrades = 0
        if M28Utilities.IsTableEmpty(tWZTeamData[M28Map.subreftoActiveUpgrades]) == false then
            for iUnit, oUnit in tWZTeamData[M28Map.subreftoActiveUpgrades] do
                if EntityCategoryContains(M28UnitInfo.refCategoryNavalFactory, oUnit.UnitId) then
                    iActiveFactoryUpgrades = iActiveFactoryUpgrades + 1
                end
            end
        end
        local bConsiderUpgrading = false
        if iActiveFactoryUpgrades == 0 then
            bConsiderUpgrading = true
        elseif not(aiBrain[M28Overseer.refbPrioritiseLand] or aiBrain[M28Overseer.refbPrioritiseAir] or aiBrain[M28Overseer.refbPrioritiseLowTech]) then
            local iFactoriesInWZ = 0
            local tFactoriesInWZ = EntityCategoryFilterDown(M28UnitInfo.refCategoryNavalFactory, tWZTeamData[M28Map.subreftoLZOrWZAlliedUnits])
            if M28Utilities.IsTableEmpty(tFactoriesInWZ) == false then
                iFactoriesInWZ = table.getn(tFactoriesInWZ)
            end
            if iActiveFactoryUpgrades < iFactoriesInWZ * 0.5 and not (bHaveLowMass) and not (bHaveLowPower) and (M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.3 or M28Team.tTeamData[iTeam][M28Team.subrefiTeamGrossMass] >= 25) then
                bConsiderUpgrading = true
            end
        end
        if bDebugMessages == true then
            LOG(sFunctionRef .. ': bConsiderUpgrading=' .. tostring(bConsiderUpgrading) .. '; iActiveFactoryUpgrades=' .. iActiveFactoryUpgrades .. '; Is table of activeu pgrades empty=' .. tostring(M28Utilities.IsTableEmpty(tWZTeamData[M28Map.subreftoActiveUpgrades])))
        end
        if bConsiderUpgrading then
            local iUpgradeThreatThreshold
            local iGrossMassThreshold
            if iFactoryTechLevel == 1 then
                iUpgradeThreatThreshold = 1000
                iGrossMassThreshold = 4
            else
                iUpgradeThreatThreshold = 6000
                iGrossMassThreshold = 10
            end
            if M28Team.tTeamData[iTeam][M28Team.subrefiHighestEnemyNavyTech] > iFactoryTechLevel then
                iUpgradeThreatThreshold = iUpgradeThreatThreshold * 0.75
            end
            if aiBrain[M28Overseer.refbPrioritiseLand] or aiBrain[M28Overseer.refbPrioritiseAir] or aiBrain[M28Overseer.refbPrioritiseLowTech] then
                iUpgradeThreatThreshold = iUpgradeThreatThreshold * 1.5
                iGrossMassThreshold = iGrossMassThreshold * 1.75
            elseif aiBrain[M28Overseer.refbPrioritiseHighTech] then
                iUpgradeThreatThreshold = iUpgradeThreatThreshold * 0.75
                iGrossMassThreshold = iGrossMassThreshold * 0.75
            elseif aiBrain[M28Overseer.refbPrioritiseNavy] then
                iGrossMassThreshold = iGrossMassThreshold * 0.85
            end
            if bDebugMessages == true then
                LOG(sFunctionRef .. ': Considering whether to upgrade, tWZTeamData[M28Map.subrefbEnemiesInThisOrAdjacentWZ]=' .. tostring(tWZTeamData[M28Map.subrefbEnemiesInThisOrAdjacentWZ] or false) .. '; tWZTeamData[M28Map.subrefWZTThreatAllyCombatTotal]=' .. tWZTeamData[M28Map.subrefWZTThreatAllyCombatTotal] .. '; iUpgradeThreatThreshold=' .. iUpgradeThreatThreshold)
            end
            if not (tWZTeamData[M28Map.subrefbEnemiesInThisOrAdjacentWZ]) or tWZTeamData[M28Map.subrefWZTThreatAllyCombatTotal] >= iUpgradeThreatThreshold or aiBrain[M28Economy.refiGrossMassBaseIncome] >= 20 then
                --Do we have enough mass income to justify upgrading?
                if bHaveLowMass then
                    iGrossMassThreshold = iGrossMassThreshold * 1.25
                end
                --Lower threshold if enemy has better tech
                if M28Team.tTeamData[iTeam][M28Team.subrefiHighestEnemyNavyTech] then
                    iGrossMassThreshold = iGrossMassThreshold * 0.75
                end
                --Lower threshold if we have built 8+ units and are at T2 and in bombardment mode, and already have 5+ T2 surface naval units
                if not(M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingMass]) and iFactoryTechLevel == 2 and oFactory[refiTotalBuildCount] >= 8 and GetGameTimeSeconds() - (M28Team.tTeamData[iTeam][M28Team.refiTimeLastHadBombardmentModeByPond][iPond] or -10) <= 4.1 and aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryNavalSurface * categories.TECH2) >= 6 then
                    iGrossMassThreshold = iGrossMassThreshold * 0.8
                end
                --Upgrade T1 to T2 if enemy has torp bombers and we lack T2 in this zone
                if iFactoryTechLevel == 1 and M28Team.tTeamData[iTeam][M28Team.refiEnemyTorpBombersThreat] > 0 and not(tWZTeamData[M28Map.subrefbEnemiesInThisOrAdjacentWZ]) then
                    iGrossMassThreshold = iGrossMassThreshold * 0.5
                end
                if bDebugMessages == true then
                    LOG(sFunctionRef .. ': Considering whether to upgrade, Gross mass income=' .. aiBrain[M28Economy.refiGrossMassBaseIncome] .. '; iGrossMassThreshold=' .. iGrossMassThreshold..'; Is this core base='..tostring(tWZTeamData[M28Map.subrefWZbCoreBase] or false)..'; bHaveLowMass='..tostring(bHaveLowMass or false))
                end
                if aiBrain[M28Economy.refiGrossMassBaseIncome] >= iGrossMassThreshold and (tWZTeamData[M28Map.subrefWZbCoreBase] or not(bHaveLowMass) or (aiBrain[M28Economy.refiGrossMassBaseIncome] >= iGrossMassThreshold * 3 and not(M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingMass]))) then
                    if bDebugMessages == true then LOG(sFunctionRef..': Mass income high enough so will try and upgrade naval fac') end
                    if ConsiderUpgrading() then
                        return sBPIDToBuild
                    end
                else
                    --Lower threshold if we have built lots of T2 units

                    local iLifetimeBuildCount = M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryNavalSurface * M28UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel))
                    if bDebugMessages == true then
                        LOG(sFunctionRef .. ': Lifetime build amount of naval units=' .. M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryNavalSurface * M28UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel)))
                    end
                    if iLifetimeBuildCount >= 14 then
                        iGrossMassThreshold = iGrossMassThreshold * math.max(0.35, (1 - iGrossMassThreshold * 0.02))
                        if aiBrain[M28Economy.refiGrossMassBaseIncome] >= iGrossMassThreshold then
                            if bDebugMessages == true then LOG(sFunctionRef..': LC high enough so Will try and upgrade naval fac') end
                            if ConsiderUpgrading() then
                                return sBPIDToBuild
                            end
                        end
                    end
                end
            end
        end
    end

    --Medium priority engineer if no immediate threats in this zone, are in a water start position or high mass, and want more engineers due to having mass but not needing power
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if bDebugMessages == true then
        LOG(sFunctionRef .. ': Engi fi underwtaer start: tWZTeamData[M28Map.subrefWZbContainsUnderwaterStart]=' .. tostring(tWZTeamData[M28Map.subrefWZbContainsUnderwaterStart]) .. '; tWZTeamData[M28Map.subrefTbWantBP]=' .. tostring(tWZTeamData[M28Map.subrefTbWantBP]) .. '; bHaveLowMass=' .. tostring(bHaveLowMass) .. '; aiBrain[M28Economy.refiGrossMassBaseIncome]=' .. aiBrain[M28Economy.refiGrossMassBaseIncome]..'; Mass%='..M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored])
    end
    if tWZTeamData[M28Map.subrefWZbContainsUnderwaterStart] or (not(bHaveLowMass) and M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.2)  then
        if tWZTeamData[M28Map.subrefTbWantBP] and (not (bHaveLowMass) or (aiBrain[M28Economy.refiGrossMassBaseIncome] >= iFactoryTechLevel * 6)) then
            if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then return sBPIDToBuild end
            --Still get 1 T3 engi if dealing with a t3 factory that hasnt built any before and we have lots of mass
        elseif iFactoryTechLevel == 3 and not(bHaveLowMass) and M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.2 and oFactory[refiTotalBuildCount] <= 5 and aiBrain[M28Economy.refiGrossMassBaseIncome] >= 20 and tWZTeamData[M28Map.subrefTThreatEnemyCombatTotal] == 0 and M28Conditions.GetFactoryLifetimeCount(oFactory, M28UnitInfo.refCategoryEngineer, false) == 0 then
            if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then return sBPIDToBuild end
        end
    end

    --Enhancements (LOUD)
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    local sEnhancementWanted = ConsiderFactoryEnhancement(oFactory, tWZTeamData)
    if sEnhancementWanted then return sEnhancementWanted, true end

    --Cycle through each adjacent water zone
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if bDebugMessages == true then
        LOG(sFunctionRef .. ': About to cycle through other land and water zones, is table empty=' .. tostring(M28Utilities.IsTableEmpty(tWZData[M28Map.subrefOtherLandAndWaterZonesByDistance]))..'; Do we have air control='..tostring(M28Team.tAirSubteamData[aiBrain.M28AirSubteam][M28Team.refbHaveAirControl]))
    end
    if M28Utilities.IsTableEmpty(tWZData[M28Map.subrefWZOtherWaterZones]) == false then
        local iOtherWZ
        local iOtherPond

        local iOurCumulativeAAThreat = tWZTeamData[M28Map.subrefWZThreatAlliedAA]
        local iOurCumulativeCombatThreat = tWZTeamData[M28Map.subrefWZTThreatAllyCombatTotal]
        local iEnemyCumulativeAntiNavyThreat = (tWZTeamData[M28Map.subrefWZThreatEnemyAntiNavy] or 0)
        local iEnemyCumulativeCombatThreat = (tWZTeamData[M28Map.subrefTThreatEnemyCombatTotal] or 0)
        local bHaveWantedAA = false
        local bDontCheckPlayableArea = not(M28Map.bIsCampaignMap)
        local iAntiNavyCategoryToGet
        local bConsiderSubsIfNoDestroyersDespiteTorps = false
        if M28Team.tTeamData[iTeam][M28Team.refiEnemyTorpBombersThreat] >= 500 and not(M28Team.tAirSubteamData[aiBrain.M28AirSubteam][M28Team.refbHaveAirControl]) then
            iAntiNavyCategoryToGet = M28UnitInfo.refCategoryAntiNavy - categories.SILO
            if categories.SUBMARINE then iAntiNavyCategoryToGet = iAntiNavyCategoryToGet - categories.SUBMARINE
            else iAntiNavyCategoryToGet = iAntiNavyCategoryToGet - categories.SUBMERSIBLE + M28UnitInfo.refCategorySeraphimDestroyer
            end
            if iFactoryTechLevel == 1 and bHaveLowMass and M28Team.tTeamData[iTeam][M28Team.refiEnemyTorpBombersThreat] >= 1000 and M28Team.tAirSubteamData[aiBrain.M28AirSubteam][M28Team.refbFarBehindOnAir] and aiBrain:GetEconomyStoredRatio('MASS') <= 0.05 then
                bConsiderSubsIfNoDestroyersDespiteTorps = false
            else
                bConsiderSubsIfNoDestroyersDespiteTorps = true
            end
        else
            iAntiNavyCategoryToGet = M28UnitInfo.refCategoryAntiNavy - categories.SILO
        end
        if not(M28Team.tAirSubteamData[aiBrain.M28AirSubteam][M28Team.refbHaveAirControl]) then iAntiNavyCategoryToGet = iAntiNavyCategoryToGet - M28UnitInfo.refCategoryTorpBomber end

        local iMinAARatioWanted = 0.05
        if iFactoryTechLevel >= 2 then
            iMinAARatioWanted = 0.1
            if M28Team.tTeamData[iTeam][M28Team.refiEnemyTorpBombersThreat] > 0 then
                iMinAARatioWanted = 0.2
            end
            if M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] > 1000 then
                iMinAARatioWanted = math.max(0.2, iMinAARatioWanted + 0.05)
            end
            if not(M28Team.tAirSubteamData[aiBrain.M28AirSubteam][M28Team.refbHaveAirControl]) then
                iMinAARatioWanted = iMinAARatioWanted * 1.5
            end
        end

        local iDistThatDeferredAA, bEncounteredEnemyAirThreat

        for iEntry, tSubtable in tWZData[M28Map.subrefWZOtherWaterZones] do
            if bDontCheckPlayableArea or M28Conditions.IsLocationInPlayableArea(tWZData[M28Map.subrefMidpoint]) then
                iOtherWZ = tSubtable[M28Map.subrefWZAWZRef]
                iOtherPond = M28Map.tiPondByWaterZone[iOtherWZ]
                local tOtherWZTeamData = M28Map.tPondDetails[iOtherPond][M28Map.subrefPondWaterZones][iOtherWZ][M28Map.subrefWZTeamData][iTeam]
                iOurCumulativeAAThreat = iOurCumulativeAAThreat + tOtherWZTeamData[M28Map.subrefWZThreatAlliedAA]
                iOurCumulativeCombatThreat = iOurCumulativeCombatThreat + tOtherWZTeamData[M28Map.subrefWZTThreatAllyCombatTotal]
                iEnemyCumulativeAntiNavyThreat = iEnemyCumulativeAntiNavyThreat + (tOtherWZTeamData[M28Map.subrefWZThreatEnemyAntiNavy] or 0)
                iEnemyCumulativeCombatThreat = iEnemyCumulativeCombatThreat + (tOtherWZTeamData[M28Map.subrefTThreatEnemyCombatTotal] or 0)
                if not(bEncounteredEnemyAirThreat) and ((tOtherWZTeamData[M28Map.refiEnemyAirAAThreat] or 0) > 0 or (tOtherWZTeamData[M28Map.refiEnemyAirToGroundThreat] or 0) > 0) then bEncounteredEnemyAirThreat = true end
                if bDebugMessages == true then
                    LOG(sFunctionRef .. ': Considering iOtherWZ=' .. (iOtherWZ or 'nil') .. '; Dist of other WZ='..tSubtable[M28Map.subrefWZAWZDistance]..'; Mod dist%='..(tOtherWZTeamData[M28Map.refiModDistancePercent] or 'nil')..'; tOtherWZTeamData[M28Map.subrefbWZWantsSupport]=' .. tostring(tOtherWZTeamData[M28Map.subrefbWZWantsSupport] or false) .. '; tOtherWZTeamData[M28Map.subrefWZThreatEnemySurface]=' .. (tOtherWZTeamData[M28Map.subrefWZThreatEnemySurface] or 'nil') .. '; tOtherWZTeamData[M28Map.subrefWZTThreatAllyCombatTotal]=' .. (tOtherWZTeamData[M28Map.subrefWZTThreatAllyCombatTotal] or 'nil') .. '; tOtherWZTeamData[M28Map.subrefWZMAAThreatWanted]=' .. (tOtherWZTeamData[M28Map.subrefWZMAAThreatWanted] or 'nil') .. '; tOtherWZTeamData[M28Map.refbWZWantsMobileShield]=' .. tostring(tOtherWZTeamData[M28Map.refbWZWantsMobileShield] or false) .. '; tOtherWZTeamData[M28Map.refbWZWantsMobileStealth]=' .. tostring(tOtherWZTeamData[M28Map.refbWZWantsMobileStealth] or false) .. '; tOtherWZTeamData[M28Map.refbWantLandScout]=' .. tostring(tOtherWZTeamData[M28Map.refbWantLandScout] or false) .. '; bUseFrigatesAsScouts=' .. tostring(bUseFrigatesAsScouts or false) .. '; tOtherWZTeamData[M28Map.refiEnemyAirToGroundThreat]=' .. (tOtherWZTeamData[M28Map.refiEnemyAirToGroundThreat] or 'nil') .. '; tOtherWZTeamData[M28Map.subrefWZThreatAlliedAA]=' .. (tOtherWZTeamData[M28Map.subrefWZThreatAlliedAA] or 'nil') .. '; iOurCumulativeAAThreat=' .. iOurCumulativeAAThreat .. '; iOurCumulativeCombatThreat=' .. iOurCumulativeCombatThreat..'; tOtherWZTeamData[M28Map.subrefWZThreatEnemySubmersible]='..tOtherWZTeamData[M28Map.subrefWZThreatEnemySubmersible]..'; tOtherWZTeamData[M28Map.subrefWZThreatAlliedAntiNavy]='..tOtherWZTeamData[M28Map.subrefWZThreatAlliedAntiNavy]..'; Is table of enenmy units empty='..tostring(M28Utilities.IsTableEmpty(tOtherWZTeamData[M28Map.subrefTEnemyUnits]))..'; iMinAARatioWanted='..iMinAARatioWanted)
                end

                --AA ratio basic value (note we also have a similar AA type test later on, this one is on global values though
                if not(bHaveWantedAA) and ((tOtherWZTeamData[M28Map.refiTimeLastRunFromEnemyAir] and GetGameTimeSeconds() - tOtherWZTeamData[M28Map.refiTimeLastRunFromEnemyAir] <= 20) or (iOurCumulativeCombatThreat >= 4000 and (tOtherWZTeamData[M28Map.subrefbWZWantsSupport] or iOurCumulativeCombatThreat >= 6000*iFactoryTechLevel) and iOurCumulativeCombatThreat * iMinAARatioWanted > iOurCumulativeAAThreat)) then
                    if bDebugMessages == true then LOG(sFunctionRef..': Want AA to maintain basic ratio to combat threat, iOurCumulativeCombatThreat='..iOurCumulativeCombatThreat..'; iOurCumulativeAAThreat='..iOurCumulativeAAThreat) end
                    bHaveWantedAA = true
                end

                if tOtherWZTeamData[M28Map.subrefbWZWantsSupport] then
                    if tOtherWZTeamData[M28Map.subrefWZThreatEnemySubmersible] > tOtherWZTeamData[M28Map.subrefWZThreatAlliedAntiNavy] * 0.75 then
                        if bDebugMessages == true then LOG(sFunctionRef .. ': Will try and get antinavy') end
                        if ConsiderBuildingCategory(iAntiNavyCategoryToGet) then
                            return sBPIDToBuild
                        else
                            if bConsiderSubsIfNoDestroyersDespiteTorps then
                                if ConsiderBuildingCategory(M28UnitInfo.refCategoryAntiNavy - categories.SILO) then
                                    return sBPIDToBuild
                                end
                            else
                                --If far away threat then conserve mass
                                if bHaveLowMass and iFactoryTechLevel < 3 and not(M28Map.bIsCampaignMap) and tSubtable[M28Map.subrefWZAWZDistance] >= 225 and tOtherWZTeamData[M28Map.refiModDistancePercent] > 0.3 then
                                    if bDebugMessages == true then LOG(sFunctionRef..': We want antinavy but enemy has torp bombers, and the zone in question is far away, and we have low mass, so will just not build anything for now') end
                                    break
                                end
                            end
                        end
                    end
                    if tOtherWZTeamData[M28Map.subrefWZThreatEnemySurface] > tOtherWZTeamData[M28Map.subrefWZTThreatAllyCombatTotal] * 0.75 then
                        --We want more combat, but first consider if we need more MAA
                        if bHaveWantedAA and iOurCumulativeCombatThreat > iOurCumulativeAAThreat * 1.5 then
                            if bDebugMessages == true then LOG(sFunctionRef .. ': Will try and get AA unless we already have lots and are at T1, Cur unit count='..aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryNavalAA)) end
                            if iFactoryTechLevel > 1 or aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryNavalAA) < 100 then
                                if ConsiderBuildingCategory(M28UnitInfo.refCategoryNavalAA) then return sBPIDToBuild end
                            end
                        end
                        if bDebugMessages == true then LOG(sFunctionRef .. ': Will try and get CombatCategory or (if that fails) a sub') end
                        if bConsiderBuildingMoreCombat then
                            --Consider building subs if T1-T2 factory and enemy has no antinavy threat and lacks T2 air
                            if not(tOtherWZTeamData[M28Map.subrefbWZOnlyHoverEnemies]) and (((oFactory[refiTotalBuildCount] or 0) <= 15 and (M28Team.tTeamData[iTeam][M28Team.subrefiHighestEnemyAirTech] <= 1 or M28Team.tAirSubteamData[aiBrain.iAirSubteam][M28Team.refbHaveAirControl]))
                                    or (M28Team.tTeamData[iTeam][M28Team.refiEnemyTorpBombersThreat] == 0 and iEnemyCumulativeAntiNavyThreat < iEnemyCumulativeCombatThreat * 0.1))
                            then
                                --Do we want to try building a sub instead?
                                if iEnemyCumulativeAntiNavyThreat < iEnemyCumulativeCombatThreat * 0.15 or (iEnemyCumulativeAntiNavyThreat <= 200 and iEnemyCumulativeCombatThreat >= 1000) then
                                    if ConsiderBuildingCategory(M28UnitInfo.refCategorySubmarine - categories.NUKE) then return sBPIDToBuild end
                                end
                            end

                            --T1 factory - upgrade to t2 navy if enemy has torp launchers, or just abort if we already have an active HQ in this zone and have low mass
                            if iFactoryTechLevel == 1 and tOtherWZTeamData[M28Map.subrefWZBestEnemyAntiNavyRange] >= 50 and M28Utilities.IsTableEmpty(EntityCategoryFilterDown(M28UnitInfo.refCategoryTorpedoLauncher + M28UnitInfo.refCategoryHoverPD, tOtherWZTeamData[M28Map.subrefTEnemyUnits])) == false then
                                local iActiveFactoryUpgrades = 0
                                if M28Utilities.IsTableEmpty(tWZTeamData[M28Map.subreftoActiveUpgrades]) == false then
                                    for iUnit, oUnit in tWZTeamData[M28Map.subreftoActiveUpgrades] do
                                        if EntityCategoryContains(M28UnitInfo.refCategoryNavalFactory, oUnit.UnitId) then
                                            iActiveFactoryUpgrades = iActiveFactoryUpgrades + 1
                                        end
                                    end
                                end
                                if bDebugMessages == true then LOG(sFunctionRef..': Want to upgrade to t2 navy due to enemy torp launcher threat, iActiveFactoryUpgrades='..iActiveFactoryUpgrades) end
                                if iActiveFactoryUpgrades == 0 then
                                    if bDebugMessages == true then LOG(sFunctionRef..': Will try and upgrade') end
                                    if ConsiderUpgrading() then return sBPIDToBuild end
                                end
                                if bHaveLowMass or bHaveLowPower or M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] < 0.3 then
                                    if bDebugMessages == true then LOG(sFunctionRef..': Aborting as would rather not build anything than build t1 navy vs torp launcher (unless are getting relatively high mass)') end
                                    bConsiderBuildingMoreCombat = false
                                    break
                                end
                            end

                            if ConsiderBuildingCategory(iCombatCategory) then return sBPIDToBuild end
                            --Backup for campaign/unit restrictions - build sub
                            if ConsiderBuildingCategory(M28UnitInfo.refCategorySubmarine) then return sBPIDToBuild end
                        end

                    end
                end
                if not (bHaveWantedAA) and (tOtherWZTeamData[M28Map.subrefWZMAAThreatWanted] or 0) > tiMAAThresholdByTech[iFactoryTechLevel] and iOurCumulativeAAThreat < iOurCumulativeCombatThreat then
                    if not(bHaveLowMass) or not(bHaveLowPower) or iOurCumulativeAAThreat < math.max(M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] * 2, tiMAAThresholdByTech[iFactoryTechLevel] * 3) then
                        --Cap on getting MAA unless overflowing
                        if M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.6 or iOurCumulativeAAThreat < math.max(20000, iOurCumulativeCombatThreat * 0.3, 20 * tOtherWZTeamData[M28Map.refiEnemyAirToGroundThreat], 4 * M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] + M28Team.tTeamData[iTeam][M28Team.refiEnemyAirAAThreat]) and (tOtherWZTeamData[M28Map.refiEnemyAirToGroundThreat] or 0) > math.max(tiMAAThresholdByTech[iFactoryTechLevel], (tOtherWZTeamData[M28Map.subrefWZThreatAlliedAA] or 0) * 0.3) then
                            bHaveWantedAA = true
                        end
                    end
                end

                if (M28Utilities.bQuietModActive and iOurCumulativeAAThreat < math.max(20000, iOurCumulativeCombatThreat * math.max(iMinAARatioWanted, 0.3), 20 * tOtherWZTeamData[M28Map.refiEnemyAirToGroundThreat], 4 * M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] + M28Team.tTeamData[iTeam][M28Team.refiEnemyAirAAThreat]) and ((tOtherWZTeamData[M28Map.refiEnemyAirToGroundThreat] or 0) > 0 or M28Team.tTeamData[iTeam][M28Team.refiEnemyTorpBombersThreat] > iOurCumulativeAAThreat * 0.5) and (bHaveWantedAA or ((tOtherWZTeamData[M28Map.refiEnemyAirToGroundThreat] or 0) > math.max(tiMAAThresholdByTech[iFactoryTechLevel], (tOtherWZTeamData[M28Map.subrefWZThreatAlliedAA] or 0) * 0.3))))
                        or (not(M28Utilities.bQuietModActive) and (iOurCumulativeAAThreat < math.max(20000, iOurCumulativeCombatThreat * math.max(iMinAARatioWanted, 0.3), 20 * tOtherWZTeamData[M28Map.refiEnemyAirToGroundThreat], 4 * M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] + M28Team.tTeamData[iTeam][M28Team.refiEnemyAirAAThreat]) and ((tOtherWZTeamData[M28Map.refiEnemyAirToGroundThreat] or 0) > 0 or M28Team.tTeamData[iTeam][M28Team.refiEnemyTorpBombersThreat] > iOurCumulativeAAThreat * 0.4) and (bHaveWantedAA or ((tOtherWZTeamData[M28Map.refiEnemyAirToGroundThreat] or 0) > math.max(tiMAAThresholdByTech[iFactoryTechLevel], (tOtherWZTeamData[M28Map.subrefWZThreatAlliedAA] or 0) * 0.3))))) then
                    if bDebugMessages == true then LOG(sFunctionRef .. ': Will try get AA unless t1 with lots or we are close to base and havent come across any enemy air threats yet, enemy air to ground threat='..(tOtherWZTeamData[M28Map.refiEnemyAirToGroundThreat] or 'nil')..'; bHaveWantedAA='..tostring(bHaveWantedAA or false)..'; Is location in playable area='..tostring(M28Conditions.IsLocationInPlayableArea(tWZData[M28Map.subrefMidpoint]))..'; iDistThatDeferredAA='..(iDistThatDeferredAA or 'nil')..'; bEncounteredEnemyAirThreat='..tostring(bEncounteredEnemyAirThreat or false)) end
                    --Had issue where would overbuild carriers for AA due to
                    if bEncounteredEnemyAirThreat or tSubtable[M28Map.subrefWZAWZDistance] >= 450 or tOtherWZTeamData[M28Map.refiModDistancePercent] >= 0.5 or iOurCumulativeCombatThreat >= 60000 or (iDistThatDeferredAA and iDistThatDeferredAA + 200 < tSubtable[M28Map.subrefWZAWZDistance]) then
                        if iFactoryTechLevel > 1 or aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryNavalAA) < 100 then
                            if bDebugMessages == true then LOG(sFunctionRef..': Trying to get NavalAA category unit') end
                            if ConsiderBuildingCategory(M28UnitInfo.refCategoryNavalAA) then return sBPIDToBuild end
                        end
                    else
                        if not(iDistThatDeferredAA) then
                            if bDebugMessages == true then LOG(sFunctionRef..': Deferring getting AA unit until have searched more water zones, updating iDistThatDeferredAA to this zone dist='..tSubtable[M28Map.subrefWZAWZDistance]) end
                            iDistThatDeferredAA = tSubtable[M28Map.subrefWZAWZDistance]
                        elseif bDebugMessages == true then LOG(sFunctionRef..': Still not far enough away so will keep searching')
                        end
                    end
                end
                if bConsiderBuildingShieldOrStealthBoats and tOtherWZTeamData[M28Map.refbWZWantsMobileShield] then
                    if bDebugMessages == true then
                        LOG(sFunctionRef .. ': Will try and get shield boat')
                    end
                    if ConsiderBuildingCategory(M28UnitInfo.refCategoryShieldBoat) then
                        return sBPIDToBuild
                    end
                end
                if bConsiderBuildingShieldOrStealthBoats and tOtherWZTeamData[M28Map.refbWZWantsMobileStealth] then
                    if bDebugMessages == true then
                        LOG(sFunctionRef .. ': Will try and get stealth boat')
                    end
                    if ConsiderBuildingCategory(M28UnitInfo.refCategoryStealthBoat) then
                        return sBPIDToBuild
                    end
                end
                if bUseFrigatesAsScouts and tOtherWZTeamData[M28Map.refbWantLandScout] and iCurFrigates <= 80 and (iCurFrigates <= 30 or not(aiBrain[M28Overseer.refbCloseToUnitCap])) then
                    if bDebugMessages == true then
                        LOG(sFunctionRef .. ': Will try and get frigate')
                    end
                    if ConsiderBuildingCategory(M28UnitInfo.refCategoryFrigate) then
                        return sBPIDToBuild
                    end
                end
            end
        end
        if bHaveWantedAA and iOurCumulativeAAThreat <= math.max(50000, 6 * M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat]) and iOurCumulativeAAThreat < iOurCumulativeCombatThreat and (iOurCumulativeAAThreat <= math.min(iOurCumulativeCombatThreat, 100) or oFactory[refiTotalBuildCount] <= 10 or (iFactoryTechLevel == 1 and (iOurCumulativeAAThreat * 4 < iOurCumulativeCombatThreat and aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryNavalAA) <= 40)) or (iFactoryTechLevel >= 2 and iOurCumulativeAAThreat < math.max(20000, 4 * M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] + M28Team.tTeamData[iTeam][M28Team.refiEnemyAirAAThreat]) and (aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryNavalAA) <= 100 or iOurCumulativeAAThreat * 3 < iOurCumulativeCombatThreat))) then
            if bDebugMessages == true then LOG(sFunctionRef .. ': Will try and get AA as we have less than our combat threat, iOurCumulativeAAThreat='..iOurCumulativeAAThreat..'; iOurCumulativeCombatThreat='..iOurCumulativeCombatThreat..'; Factory build count='..oFactory[refiTotalBuildCount]) end
            if ConsiderBuildingCategory(M28UnitInfo.refCategoryNavalAA) then return sBPIDToBuild end
        end
    end

    --Engis if high mass
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if bDebugMessages == true then
        LOG(sFunctionRef .. ': Considering engis due to having high mass, bHaveLowMass=' .. tostring(bHaveLowMass) .. '; tWZTeamData[M28Map.subrefTbWantBP]=' .. tostring(tWZTeamData[M28Map.subrefTbWantBP]))
    end
    if not (bHaveLowMass) and tWZTeamData[M28Map.subrefTbWantBP] then
        if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then
            return sBPIDToBuild
        end
    end

    --Bombardment units
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    local bAboutToOverflowMass = false
    if not (bHaveLowMass) and M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.8 then
        bAboutToOverflowMass = true
    end
    if bDebugMessages == true then
        LOG(sFunctionRef .. ': Consdering building bombardment category unit, bHaveLowMass=' .. tostring(bHaveLowMass) .. '; Do we have UEF or seraphim factory=' .. tostring(EntityCategoryContains(categories.UEF + categories.SERAPHIM, oFactory.UnitId)))
    end

    --Add special bombardment ship categories
    --Seraphim T2 - get bombardment ships
    if iFactoryTechLevel >= 2 and categories.bss0206 and oFactory:CanBuild('bss0206') and ConsiderBuildingCategory(categories.bss0206) then
        if bDebugMessages == true then LOG(sFunctionRef..': Seraphim T2 navy - get bombardment ships, sBPIDToBuild='..sBPIDToBuild) end
        return sBPIDToBuild
    elseif iFactoryTechLevel >= 3 then
        local iCurBattleships = aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryBattleship) + M28Conditions.GetNumberOfUnitsMeetingCategoryUnderConstructionInLandOrWaterZone(tWZTeamData, M28UnitInfo.refCategoryBattleship)
        if bDebugMessages == true then LOG(sFunctionRef..': Are at T3 and in bombardment mode, is categories.brmst3bom nil='..tostring(categories.brmst3bom == nil)) end
        if categories.brmst3bom and oFactory:CanBuild('brmst3bom') then
            local iCurBombardment = aiBrain:GetCurrentUnits(categories.brmst3bom) + M28Conditions.GetNumberOfUnitsMeetingCategoryUnderConstructionInLandOrWaterZone(tWZTeamData, M28UnitInfo.refCategoryBattleship)
            if iCurBombardment < iCurBattleships * 2.5 and (iCurBombardment == 0 or iCurBattleships > 0) then
                if bDebugMessages == true then LOG(sFunctionRef..': want to get cybran bombardment ship') end
                if ConsiderBuildingCategory(categories.brmst3bom) then return sBPIDToBuild end
            end
        end

        --Aeon specific - build missile ships once have battleships and are in bombardment mode
        if iCurBattleships >= 1 and EntityCategoryContains(categories.AEON, oFactory.UnitId) then
            local iCurMissileShips = aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryMissileShip * categories.TECH3) + M28Conditions.GetNumberOfUnitsMeetingCategoryUnderConstructionInLandOrWaterZone(tWZTeamData, M28UnitInfo.refCategoryBattleship)
            if bDebugMessages == true then LOG(sFunctionRef..': iCurMissileShips='..iCurMissileShips..'; iCurBattleships='..iCurBattleships..'; Time since last had bombardment with battleships='..GetGameTimeSeconds() - (M28Team.tTeamData[iTeam][M28Team.refiTimeLastHadBattleshipBombardmentByPond][iPond] or -100)) end
            if iCurMissileShips < iCurBattleships * 2 and (iCurMissileShips == 0 or iCurMissileShips <= iCurBattleships or GetGameTimeSeconds() - (M28Team.tTeamData[iTeam][M28Team.refiTimeLastHadBattleshipBombardmentByPond][iPond] or -100) <= 15) then
                if ConsiderBuildingCategory(M28UnitInfo.refCategoryMissileShip * categories.TECH3 - categories.SUBMERSIBLE) then return sBPIDToBuild end
            end
        end
        local iBSWantedAdjust = 0
        if GetGameTimeSeconds() - (M28Team.tTeamData[iTeam][M28Team.refiTimeLastHadBattleshipBombardmentByPond][iPond] or -100) <= 4.1 then iBSWantedAdjust = 5 end
        local iPondSize = M28Map.tPondDetails[iPond][M28Map.subrefiSegmentCount] * M28Map.iLandZoneSegmentSize
        if iPondSize <= 6000 then
            iBSWantedAdjust = math.max(-1, iBSWantedAdjust - 5 * (6000 - iPondSize) / iPondSize)
        elseif iPondSize >= 100000 then
            iBSWantedAdjust = iBSWantedAdjust + 1
        end
        if bDebugMessages == true then LOG(sFunctionRef..': bAboutToOverflowMass='..tostring(bAboutToOverflowMass)..'; iPondSize='..iPondSize..'; iCurBattleships='..iCurBattleships..'; iBSWantedAdjust='..iBSWantedAdjust..'; bHaveLowMass='..tostring(bHaveLowMass)) end
        if bAboutToOverflowMass or (iCurBattleships < 5+ iBSWantedAdjust and (not (bHaveLowMass) or iCurBattleships <= 1 + iBSWantedAdjust * 0.5)) then
            if ConsiderBuildingCategory(M28UnitInfo.refCategoryBattleship) then
                return sBPIDToBuild
            end
        elseif iCurBattleships < 3 and iCurBattleships > 0 and EntityCategoryContains(categories.AEON, oFactory.UnitId) then
            local iCurMissileShips = aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryMissileShip * categories.TECH3)
            if bDebugMessages == true then LOG(sFunctionRef..': Dont want more battleships yet, iCurMissileShips='..iCurMissileShips..'; iCurBattleships='..iCurBattleships) end
            if iCurMissileShips < iCurBattleships then
                if ConsiderBuildingCategory(M28UnitInfo.refCategoryMissileShip * categories.TECH3 - categories.SUBMERSIBLE) then return sBPIDToBuild end
            end
        end
    elseif iFactoryTechLevel == 2 then

        if EntityCategoryContains(categories.UEF + categories.SERAPHIM, oFactory.UnitId) then
            local iCurCruisers = aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryCruiser)
            if bDebugMessages == true then
                LOG(sFunctionRef .. ': UEF T2 naval fac, iCurCruisers=' .. iCurCruisers .. '; bAboutToOverflowMass=' .. tostring(bAboutToOverflowMass or false))
            end
            if bAboutToOverflowMass or (iCurCruisers <= 10 and (not (bHaveLowMass) or iCurCruisers <= 4)) then
                if ConsiderBuildingCategory(M28UnitInfo.refCategoryCruiser) then
                    return sBPIDToBuild
                end
            end
        else
            local iCurDestroyers = aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryDestroyer)
            if bAboutToOverflowMass or (iCurDestroyers <= 8 and (not (bHaveLowMass) or iCurDestroyers < 4)) then
                if ConsiderBuildingCategory(M28UnitInfo.refCategoryDestroyer) then
                    return sBPIDToBuild
                end
            end
        end
    else
        if bConsiderBuildingMoreCombat and (iCurFrigates < 5 or bAboutToOverflowMass or GetGameTimeSeconds() - (M28Team.tTeamData[iTeam][M28Team.refiTimeLastHadBombardmentModeByPond] or -10) >= 4.1) and (bAboutToOverflowMass or (iCurFrigates <= 30 and (not (bHaveLowMass) or iCurFrigates <= 10))) then
            if ConsiderBuildingCategory(M28UnitInfo.refCategoryFrigate) then
                return sBPIDToBuild
            end
        elseif not(bHaveLowPower) and (GetGameTimeSeconds() >= math.max(230, 600 / aiBrain[M28Economy.refiBrainResourceMultiplier]) or not(bHaveLowMass)) and M28Utilities.IsTableEmpty(tWZTeamData[M28Map.subreftoActiveUpgrades]) then
            if (tWZTeamData[M28Map.subrefWZbCoreBase] or not(bHaveLowMass)) then
                if not(aiBrain[M28Overseer.refbPrioritiseLand] or aiBrain[M28Overseer.refbPrioritiseAir] or aiBrain[M28Overseer.refbPrioritiseLowTech]) or (not(bHaveLowPower) and aiBrain:GetEconomyStoredRatio('MASS') <= 0.3 or oFactory[refiTotalBuildCount] >= 15) then
                    if ConsiderUpgrading() then return sBPIDToBuild end
                end
            end
        end
    end

    --Overflowing - build something (e.g. to cover campaign scenarios)
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if bAboutToOverflowMass and not(bHaveLowPower) then
        local iSurfaceCombatCount = aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryNavalSurface * categories.DIRECTFIRE)
        local iAACombatCount = aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryNavalAA)
        local iSubCount = aiBrain:GetCurrentUnits(M28UnitInfo.refCategorySubmarine)
        local iMaxCount = 30
        if M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] <= 0.5 then iMaxCount = 10 end
        if iSurfaceCombatCount < iMaxCount or iAACombatCount < iMaxCount or iSubCount < iMaxCount then
            --First try and get based on whicih we have least of
            if iSurfaceCombatCount < iMaxCount and iSurfaceCombatCount <= iAACombatCount and iSurfaceCombatCount <= iSubCount then
                if ConsiderBuildingCategory(M28UnitInfo.refCategoryNavalSurface * categories.DIRECTFIRE) then return sBPIDToBuild end
            end
            if iSubCount < iMaxCount and iSubCount <= iAACombatCount then
                if ConsiderBuildingCategory(M28UnitInfo.refCategorySubmarine) then return sBPIDToBuild end
            end
            if iAACombatCount < iMaxCount then
                if ConsiderBuildingCategory(M28UnitInfo.refCategorySubmarine) then return sBPIDToBuild end
            end

            --Now just try and get them if we dont have lots already
            if iSurfaceCombatCount < iMaxCount then
                ConsiderBuildingCategory(M28UnitInfo.refCategoryNavalSurface * categories.DIRECTFIRE)
            end
            if iSubCount < iMaxCount then
                if ConsiderBuildingCategory(M28UnitInfo.refCategorySubmarine) then return sBPIDToBuild end
            end
            if iAACombatCount < iMaxCount then
                if ConsiderBuildingCategory(M28UnitInfo.refCategorySubmarine) then return sBPIDToBuild end
            end
        end
    end

    if bDebugMessages == true then
        LOG(sFunctionRef .. ': Have no categories to build')
    end
    oFactory[refiTimeSinceLastFailedToGetOrder] = GetGameTimeSeconds() --Redundancy, will also include in parent logic
    if tWZTeamData then tWZTeamData[M28Map.subrefiTimeNavalFacHadNothingToBuild] = GetGameTimeSeconds() end
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
end

function UpdateLastBuiltTracker(oFactory, sBlueprint)
    local sFunctionRef = 'UpdateLastBuiltTracker'
    local bDebugMessages = false if M28Profiler.bGlobalDebugOverride == true then   bDebugMessages = true end
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerStart)
    if bDebugMessages == true then LOG(sFunctionRef..': start of code, oFactory='..(oFactory.UnitId or 'nil')..(M28UnitInfo.GetUnitLifetimeCount(oFactory) or 'nil')..'; Factory position='..repru(oFactory:GetPosition())..'; sBlueprint='..(sBlueprint or 'nil')..'; reftAssignedPlateauAndLandZoneByTeam='..repru(oFactory[M28UnitInfo.reftAssignedPlateauAndLandZoneByTeam])..'; Time='..GetGameTimeSeconds()) end
    if not (oFactory[refiBuildCountByBlueprint]) then
        oFactory[refiBuildCountByBlueprint] = {}
    end
    oFactory[refiBuildCountByBlueprint][sBlueprint] = (oFactory[refiBuildCountByBlueprint][sBlueprint] or 0) + 1

    --facs - track when last built to reduce risk of power stalling by building at multiple all at once (air fac) or mass stalling with land facs
    local aiBrain = oFactory:GetAIBrain()


    local iPlateauOrZero, iLandOrWaterZone = M28Map.GetClosestPlateauOrZeroAndZoneToPosition(oFactory:GetPosition())
    local tLZOrWZTeamData
    local iTeam = aiBrain.M28Team
    if (iLandOrWaterZone or 0) > 0 then
        if iPlateauOrZero == 0 then
            tLZOrWZTeamData = M28Map.tPondDetails[M28Map.tiPondByWaterZone[iLandOrWaterZone]][M28Map.subrefPondWaterZones][iLandOrWaterZone][M28Map.subrefWZTeamData][iTeam]
        else
            tLZOrWZTeamData = M28Map.tAllPlateaus[iPlateauOrZero][M28Map.subrefPlateauLandZones][iLandOrWaterZone][M28Map.subrefLZTeamData][iTeam]
        end
        tLZOrWZTeamData[M28Map.refiTimeLastBuiltAtFactory] = GetGameTimeSeconds()
    end
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
end

function GetBlueprintToBuildForQuantumGateway(aiBrain, oFactory)
    local sFunctionRef = 'GetBlueprintToBuildForQuantumGateway'
    local bDebugMessages = false if M28Profiler.bGlobalDebugOverride == true then   bDebugMessages = true end
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerStart)

    local iTeam = aiBrain.M28Team
    local iPlateau, iLandZone = M28Map.GetPlateauAndLandZoneReferenceFromPosition(oFactory:GetPosition(), true, oFactory)
    local tLZData = M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iLandZone]
    local tLZTeamData = tLZData[M28Map.subrefLZTeamData][iTeam]
    local bHaveLowMass = M28Conditions.TeamHasLowMass(iTeam)
    local bHaveLowPower = M28Conditions.HaveLowPower(iTeam)


    local bCanPathToEnemyWithLand = false
    if tLZData[M28Map.subrefLZIslandRef] == NavUtils.GetLabel(M28Map.refPathingTypeLand, tLZTeamData[M28Map.reftClosestEnemyBase]) then
        bCanPathToEnemyWithLand = true
    end
    local sBPIDToBuild
    if bDebugMessages == true then
        LOG(sFunctionRef .. ': Near start of code, time=' .. GetGameTimeSeconds() .. '; oFactory=' .. oFactory.UnitId .. M28UnitInfo.GetUnitLifetimeCount(oFactory)..'; aiBrain owner='..aiBrain.Nickname)
    end
    local iFactoryTechLevel = M28UnitInfo.GetUnitTechLevel(oFactory) --to be safe given we include it in adjustblueprintforoverrides
    local iCurrentConditionToTry = 0




    function ConsiderBuildingCategory(iCategoryToBuild, bOptionalGetCheapest)
        --GetBlueprintThatCanBuildOfCategory(aiBrain, iCategoryCondition, oFactory, bGetSlowest, bGetFastest, bGetCheapest, iOptionalCategoryThatMustBeAbleToBuild, bIgnoreTechDifferences)
        sBPIDToBuild = GetBlueprintThatCanBuildOfCategory(aiBrain, iCategoryToBuild, oFactory,  nil,            nil,        bOptionalGetCheapest, nil,                          false)
        if bDebugMessages == true then LOG(sFunctionRef .. ': Time=' .. GetGameTimeSeconds() .. ' Factory=' .. oFactory.UnitId .. M28UnitInfo.GetUnitLifetimeCount(oFactory) .. '; LZ=' .. iLandZone .. '; iCurrentConditionToTry=' .. iCurrentConditionToTry .. '; sBPIDToBuild before adjusting for override=' .. (sBPIDToBuild or 'nil')) end
        if sBPIDToBuild then sBPIDToBuild = AdjustBlueprintForOverrides(aiBrain, oFactory, sBPIDToBuild, tLZTeamData, iFactoryTechLevel) end
        if sBPIDToBuild then
            M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd) --Assumes we will end code if we get to this point
            return sBPIDToBuild
        else
            if bDebugMessages == true then LOG(sFunctionRef..': After adjusting for override we dont have anything to build') end
        end
    end



    local sBPIDToBuild
    if bDebugMessages == true then
        LOG(sFunctionRef .. ': Near start of code, time=' .. GetGameTimeSeconds() .. '; oFactory=' .. oFactory.UnitId .. M28UnitInfo.GetUnitLifetimeCount(oFactory) .. '; bHvaeLowPower=' .. tostring(bHaveLowPower))
    end
    local iFactoryTechLevel = M28UnitInfo.GetUnitTechLevel(oFactory) --to be safe given we include it in adjustblueprintforoverrides
    local iCurrentConditionToTry = 0

    function ConsiderBuildingCategory(iCategoryToBuild, bOptionalGetCheapest)
        --GetBlueprintThatCanBuildOfCategory(aiBrain, iCategoryCondition, oFactory, bGetSlowest, bGetFastest, bGetCheapest, iOptionalCategoryThatMustBeAbleToBuild, bIgnoreTechDifferences)
        sBPIDToBuild = GetBlueprintThatCanBuildOfCategory(aiBrain, iCategoryToBuild, oFactory, nil,             nil,        bOptionalGetCheapest, nil,                          false)
        if bDebugMessages == true then LOG(sFunctionRef .. ': Time=' .. GetGameTimeSeconds() .. ' Factory=' .. oFactory.UnitId .. M28UnitInfo.GetUnitLifetimeCount(oFactory) .. '; LZ=' .. iLandZone .. '; iCurrentConditionToTry=' .. iCurrentConditionToTry .. '; sBPIDToBuild before adjusting for override=' .. (sBPIDToBuild or 'nil')) end
        if sBPIDToBuild then
            sBPIDToBuild = AdjustBlueprintForOverrides(aiBrain, oFactory, sBPIDToBuild, tLZTeamData, iFactoryTechLevel)
        end
        if bDebugMessages == true then LOG(sFunctionRef..': sBPIDToBuild after adjusting  for override='..(sBPIDToBuild or 'nil')) end
        if sBPIDToBuild then
            M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd) --Assumes we will end code if we get to this point
            return sBPIDToBuild
        end
    end

    --LOUD specific - build SACUs if needed to build experimentals, but dont build anything if low on mass and have built a few
    local iCurSACUs = aiBrain:GetCurrentUnits(categories.SUBCOMMANDER)
    if bDebugMessages == true then LOG(sFunctionRef..': Considering whether to abort for LOUD/QUIET if we have several SACUs already, iCurSACUs='..iCurSACUs..'; M28Utilities.bLoudModActive='..tostring(M28Utilities.bLoudModActive or false)..'; Mass%='..aiBrain:GetEconomyStoredRatio('MASS')..'; Fac total build count='..(oFactory[refiTotalBuildCount] or 'nil')..'; Team exp constructed count='..M28Team.tTeamData[iTeam][M28Team.refiConstructedExperimentalCount]) end
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if iCurSACUs >= M28Team.tTeamData[iTeam][M28Team.refiConstructedExperimentalCount] * 2 and (M28Utilities.bLoudModActive or M28Utilities.bQuietModActive) and (bHaveLowMass or aiBrain:GetEconomyStoredRatio('MASS') < 0.3) and oFactory[refiTotalBuildCount] >= 2 then
        if iCurSACUs >= M28Team.tTeamData[iTeam][M28Team.refiConstructedExperimentalCount] * 4 or M28Team.tTeamData[iTeam][M28Team.subrefiActiveM28BrainCount] <= 1 then
            if bDebugMessages == true then LOG(sFunctionRef..': Want to hold off building more SACUs for now, Time='..GetGameTimeSeconds()) end
            M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
            return nil
        end
    end

    --General - if close to unit cap and have lots of SACUs then dont get more (except for LOUD where apparently they give you bonus unit cap?)
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if not(M28Utilities.bLoudModActive or M28Utilities.bQuietModActive) and iCurSACUs >= 15 and aiBrain[M28Overseer.refbCloseToUnitCap] and (iCurSACUs >= 30 or (iCurSACUs >= math.max(20, aiBrain:GetCurrentUnits(M28UnitInfo.refCategoryLandFactory)) and (M28Team.tTeamData[iTeam][M28Team.refiLowestUnitCapAdjustmentLevel] or 0) <= -2) and (M28Team.tTeamData[iTeam][M28Team.refiLowestUnitCapAdjustmentLevel] or 0) <= -1) then
        if bDebugMessages == true then LOG(sFunctionRef..': Dont want more SACUs due to unit cap') end
        M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
        return nil
    end

    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if bDebugMessages == true then LOG(sFunctionRef..': Time since tLZTeamData[M28Map.subrefiTimeLastWantSACUForExp]='..GetGameTimeSeconds() - (tLZTeamData[M28Map.subrefiTimeLastWantSACUForExp] or 0)) end
    if (tLZTeamData[M28Map.subrefiTimeLastWantSACUForExp] or tLZTeamData[M28Map.subrefiTimeLastWantSACUForSMD]) and GetGameTimeSeconds() - math.max((tLZTeamData[M28Map.subrefiTimeLastWantSACUForExp] or 0), tLZTeamData[M28Map.subrefiTimeLastWantSACUForSMD] or 0) <= 10 then
        local bLotsOfSACUsInZone = false
        if iCurSACUs >= 40 then
            local tSACUsInZone = EntityCategoryFilterDown(categories.SUBCOMMANDER, tLZTeamData[M28Map.subreftoLZOrWZAlliedUnits])
            if M28Utilities.IsTableEmpty(tSACUsInZone) == false and table.getn(tSACUsInZone) >= 30 then
                bLotsOfSACUsInZone = true
            end
        end

        if not(bLotsOfSACUsInZone) then
            if ConsiderBuildingCategory(categories.SUBCOMMANDER, true) then return sBPIDToBuild end
        end
    end

    --Build RAS SACUs (note - FAF has bug as of May 2023 where SACUs dont benefit from AIx modifier - have added code in M28 to counteract/fix
    --v107 - will just build normal SACUs and upgrade tem
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if bDebugMessages == true then LOG(sFunctionRef..': Main SACU builder, bHaveLowPower='..tostring(bHaveLowPower)..'; GrossE='..M28Team.tTeamData[iTeam][M28Team.subrefiTeamGrossEnergy]..'; iCurSACUs='..iCurSACUs) end
    if not (bHaveLowPower) or M28Team.tTeamData[iTeam][M28Team.subrefiTeamGrossEnergy] >= 750 then
        --Stop building if have low mass or close to unit cap and have a large number
        if bDebugMessages == true then LOG(sFunctionRef .. ': Will try to build RAS SACU, iCurSACUs='..iCurSACUs..'; Close to unit cap='..tostring(aiBrain[M28Overseer.refbCloseToUnitCap])..'; Have low mass='..tostring(M28Conditions.HaveLowMass(aiBrain))..'; Fac build count='..(oFactory[refiTotalBuildCount] or 'nil')) end
        --[[if aiBrain.CheatEnabled and M28Team.tTeamData[iTeam][M28Team.refiHighestBrainResourceMultiplier] >= 3.5 then
            if ConsiderBuildingCategory(categories.SUBCOMMANDER, true) then
                return sBPIDToBuild
            end--]]
        if iCurSACUs < 60 and (not(aiBrain[M28Overseer.refbCloseToUnitCap]) or oFactory[refiTotalBuildCount] < 5 or iCurSACUs < 30 or not(M28Conditions.HaveLowMass(aiBrain))) then
            if bDebugMessages == true then LOG(sFunctionRef..': Will try and get SACU') end
            if ConsiderBuildingCategory(categories.SUBCOMMANDER, true) then
                return sBPIDToBuild
            end
        end
        --[[ConsiderBuildingCategory(M28UnitInfo.refCategoryRASSACU - categories.SERAPHIM) then --exclude seraphim in case they have all faction quantum gateway or similar
            if bDebugMessages == true then LOG(sFunctionRef .. ': Foudn a non-seraphim RAS SACU blueprint to build=' .. (sBPIDToBuild or 'nil')) end
            return sBPIDToBuild
        elseif ConsiderBuildingCategory(M28UnitInfo.refCategoryRASSACU) then
            if bDebugMessages == true then LOG(sFunctionRef .. ': Foudn an SACU blueprint to build=' .. (sBPIDToBuild or 'nil')) end
            return sBPIDToBuild
        end--]]
    end

    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
end

function GetBlueprintToBuildForExperimentalLandFactory(aiBrain, oFactory)
    --E.g. if we have a land factory, but it's experimental, then should call this
    local sFunctionRef = 'GetBlueprintToBuildForExperimentalLandFactory'
    local bDebugMessages = false if M28Profiler.bGlobalDebugOverride == true then   bDebugMessages = true end
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerStart)

    local iPlateau, iLandZone = M28Map.GetPlateauAndLandZoneReferenceFromPosition(oFactory:GetPosition(), true, oFactory)
    local tLZData = M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iLandZone]
    local iTeam = aiBrain.M28Team
    local tLZTeamData = tLZData[M28Map.subrefLZTeamData][iTeam]
    local bHaveLowMass = M28Conditions.TeamHasLowMass(iTeam)
    local bHaveLowPower = M28Conditions.HaveLowPower(iTeam)

    local bCanPathToEnemyWithLand = false
    if tLZData[M28Map.subrefLZIslandRef] == NavUtils.GetLabel(M28Map.refPathingTypeLand, tLZTeamData[M28Map.reftClosestEnemyBase]) then
        bCanPathToEnemyWithLand = true
    end

    local sBPIDToBuild
    if bDebugMessages == true then
        LOG(sFunctionRef .. ': Near start of code, time=' .. GetGameTimeSeconds() .. '; oFactory=' .. oFactory.UnitId .. M28UnitInfo.GetUnitLifetimeCount(oFactory) .. '; bHvaeLowPower=' .. tostring(bHaveLowPower))
    end
    local iFactoryTechLevel = M28UnitInfo.GetUnitTechLevel(oFactory) --to be safe given we include it in adjustblueprintforoverrides
    local iCurrentConditionToTry = 0

    function ConsiderBuildingCategory(iCategoryToBuild, bOptionalGetCheapest)
        --GetBlueprintThatCanBuildOfCategory(aiBrain, iCategoryCondition, oFactory, bGetSlowest, bGetFastest, bGetCheapest, iOptionalCategoryThatMustBeAbleToBuild, bIgnoreTechDifferences)
        sBPIDToBuild = GetBlueprintThatCanBuildOfCategory(aiBrain, iCategoryToBuild, oFactory,  nil,            nil,        bOptionalGetCheapest, nil,                          false)
        if bDebugMessages == true then LOG(sFunctionRef .. ': Time=' .. GetGameTimeSeconds() .. ' Factory=' .. oFactory.UnitId .. M28UnitInfo.GetUnitLifetimeCount(oFactory) .. '; LZ=' .. iLandZone .. '; iCurrentConditionToTry=' .. iCurrentConditionToTry .. '; sBPIDToBuild before adjusting for override=' .. (sBPIDToBuild or 'nil')) end
        if sBPIDToBuild then sBPIDToBuild = AdjustBlueprintForOverrides(aiBrain, oFactory, sBPIDToBuild, tLZTeamData, iFactoryTechLevel) end
        if sBPIDToBuild then
            M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd) --Assumes we will end code if we get to this point
            return sBPIDToBuild
        end
    end

    --First try to build engineer if we lack any in this zone and have low power
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if bHaveLowPower and tLZTeamData[M28Map.subrefTbWantBP] then
        local bHaveNoFactoryOrEngineer = true
        for iUnit, oUnit in tLZTeamData[M28Map.subreftoLZOrWZAlliedUnits] do
            if not(oUnit.Dead) and EntityCategoryContains(M28UnitInfo.refCategoryEngineer + M28UnitInfo.refCategoryFactory - categories.EXPERIMENTAL, oUnit.UnitId) and oUnit:GetFractionComplete() == 1 then
                bHaveNoFactoryOrEngineer = false
                break
            end
        end
        if bHaveNoFactoryOrEngineer then
            if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer - categories.EXPERIMENTAL) then return sBPIDToBuild end
        end
    end

    --Emergency defence
    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if tLZTeamData[M28Map.refiEnemyAirToGroundThreat] > 0 then
        if ConsiderBuildingCategory(M28UnitInfo.refCategoryAA - categories.EXPERIMENTAL) then return sBPIDToBuild end
    end

    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if tLZTeamData[M28Map.subrefbDangerousEnemiesInThisLZ] then
        if ConsiderBuildingCategory(M28UnitInfo.refCategoryLandCombat - categories.EXPERIMENTAL) then return sBPIDToBuild end
    end

    --Build units unless stalling mass or energy, prioritising experimentals if we have built alot of T3
    if not(M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingMass]) and not(M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingEnergy]) then
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        local iLifetimeBuildCount = 20
        if aiBrain[M28Overseer.refbPrioritiseLowTech] then iLifetimeBuildCount = iLifetimeBuildCount * 2 end
        if bDebugMessages == true then LOG(sFunctionRef..': Dealing with experimental land factory, oFactory[refiTotalBuildCount]='..oFactory[refiTotalBuildCount]..'; Team exp constructed count='..M28Team.tTeamData[iTeam][M28Team.refiConstructedExperimentalCount]..'; Brain lifetime count for land combat='..M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryLandCombat * categories.TECH3 + M28UnitInfo.refCategoryAirToGround * categories.TECH3)) end
        if oFactory[refiTotalBuildCount] >= iLifetimeBuildCount or M28Team.tTeamData[iTeam][M28Team.refiConstructedExperimentalCount] >= 2 or aiBrain[M28Overseer.refbPrioritiseHighTech] or M28Conditions.GetLifetimeBuildCount(aiBrain, M28UnitInfo.refCategoryLandCombat * categories.TECH3 + M28UnitInfo.refCategoryAirToGround * categories.TECH3) >= iLifetimeBuildCount then
            if ConsiderBuildingCategory(categories.ALLUNITS * categories.EXPERIMENTAL) then return sBPIDToBuild end
        end

        --Just build as though a normal land factory
        if bDebugMessages == true then LOG(sFunctionRef..': Will just do normal land factory logic') end
        M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
        return GetBlueprintToBuildForLandFactory(aiBrain, oFactory)
    end
    if bDebugMessages == true then LOG(sFunctionRef..': Are stalling mass so wont build anything') end
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
end

function GetBlueprintToBuildForExperimentalFactoryBuilding(aiBrain, oFactory)
    --Likeliy to just be novax for now; also includes the 'observational satellite' building added by a unit mod

    local sFunctionRef = 'GetBlueprintToBuildForExperimentalFactoryBuilding'
    local bDebugMessages = false if M28Profiler.bGlobalDebugOverride == true then   bDebugMessages = true end
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerStart)

    local iCategoryToBuild
    local iPlateau, iLandZone = M28Map.GetPlateauAndLandZoneReferenceFromPosition(oFactory:GetPosition(), true, oFactory)
    local tLZData = M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iLandZone]
    local iTeam = aiBrain.M28Team
    local tLZTeamData = tLZData[M28Map.subrefLZTeamData][iTeam]
    local bHaveLowMass = M28Conditions.TeamHasLowMass(iTeam)
    local bHaveLowPower = M28Conditions.HaveLowPower(iTeam)

    local bCanPathToEnemyWithLand = false
    if tLZData[M28Map.subrefLZIslandRef] == NavUtils.GetLabel(M28Map.refPathingTypeLand, tLZTeamData[M28Map.reftClosestEnemyBase]) then
        bCanPathToEnemyWithLand = true
    end

    local sBPIDToBuild
    if bDebugMessages == true then
        LOG(sFunctionRef .. ': Near start of code, time=' .. GetGameTimeSeconds() .. '; oFactory=' .. oFactory.UnitId .. M28UnitInfo.GetUnitLifetimeCount(oFactory) .. '; bHvaeLowPower=' .. tostring(bHaveLowPower))
    end
    local iFactoryTechLevel = M28UnitInfo.GetUnitTechLevel(oFactory) --to be safe given we include it in adjustblueprintforoverrides
    local iCurrentConditionToTry = 0

    function ConsiderBuildingCategory(iCategoryToBuild, bOptionalGetCheapest)
        --GetBlueprintThatCanBuildOfCategory(aiBrain, iCategoryCondition, oFactory, bGetSlowest, bGetFastest, bGetCheapest, iOptionalCategoryThatMustBeAbleToBuild, bIgnoreTechDifferences)
        sBPIDToBuild = GetBlueprintThatCanBuildOfCategory(aiBrain, iCategoryToBuild, oFactory,  nil,            nil,        bOptionalGetCheapest, nil,                          false)
        if bDebugMessages == true then LOG(sFunctionRef .. ': Time=' .. GetGameTimeSeconds() .. ' Factory=' .. oFactory.UnitId .. M28UnitInfo.GetUnitLifetimeCount(oFactory) .. '; LZ=' .. iLandZone .. '; iCurrentConditionToTry=' .. iCurrentConditionToTry .. '; sBPIDToBuild before adjusting for override=' .. (sBPIDToBuild or 'nil')) end
        if sBPIDToBuild then sBPIDToBuild = AdjustBlueprintForOverrides(aiBrain, oFactory, sBPIDToBuild, tLZTeamData, iFactoryTechLevel) end
        if sBPIDToBuild then
            M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd) --Assumes we will end code if we get to this point
            return sBPIDToBuild
        end
    end

    --If dont have low power then build something; if dont have low mass and arent close to unit cap then build anything


    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if not (bHaveLowPower) and not(bHaveLowMass) and not(M28Team.tTeamData[iTeam][M28Team.refiTimeLastNearUnitCap]) then
        if ConsiderBuildingCategory(categories.ALLUNITS) then return sBPIDToBuild end
    end

    iCurrentConditionToTry = iCurrentConditionToTry + 1
    if not(bHaveLowPower) then
        if ConsiderBuildingCategory(M28UnitInfo.refCategoryExperimentalLevel) then return sBPIDToBuild end
    end

    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
end

function GetBlueprintToBuildForMobileLandFactory(aiBrain, oFactory)
    local sFunctionRef = 'GetBlueprintToBuildForMobileLandFactory'
    local bDebugMessages = false if M28Profiler.bGlobalDebugOverride == true then   bDebugMessages = true end
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerStart)



    local iPlateau, iLandZone = M28Map.GetClosestPlateauOrZeroAndZoneToPosition(oFactory:GetPosition())

    if bDebugMessages == true then LOG(sFunctionRef..': Near start of code, oFactory='..oFactory.UnitId..M28UnitInfo.GetUnitLifetimeCount(oFactory)..'; brain='..aiBrain.Nickname..'; Position='..repru(oFactory:GetPosition())..'; Time='..GetGameTimeSeconds()..'; iPlateau or zero='..(iPlateau or 'nil')..'; iLandZone='..(iLandZone or 'nil')) end

    if (iPlateau or -1) > 0 and (iLandZone or 0) > 0 then --not in a water zone
        local sBPIDToBuild
        local iFactoryTechLevel = 3
        local tLZData = M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iLandZone]
        local iTeam = aiBrain.M28Team
        local tLZTeamData = tLZData[M28Map.subrefLZTeamData][iTeam]
        local iCurrentConditionToTry = 0
        local bHaveLowMass = M28Conditions.TeamHasLowMass(iTeam)

        function ConsiderBuildingCategory(iCategoryToBuild, bOptionalGetCheapest)
            --GetBlueprintThatCanBuildOfCategory(aiBrain, iCategoryCondition, oFactory, bGetSlowest, bGetFastest, bGetCheapest, iOptionalCategoryThatMustBeAbleToBuild, bIgnoreTechDifferences)
            sBPIDToBuild = GetBlueprintThatCanBuildOfCategory(aiBrain, iCategoryToBuild, oFactory,  nil,            nil,        bOptionalGetCheapest, nil,                          false)
            if bDebugMessages == true then
                LOG(sFunctionRef .. ': Time=' .. GetGameTimeSeconds() .. ' Factory=' .. oFactory.UnitId .. M28UnitInfo.GetUnitLifetimeCount(oFactory) .. '; LZ=' .. iLandZone .. '; iCurrentConditionToTry=' .. iCurrentConditionToTry .. '; sBPIDToBuild before adjusting for override=' .. (sBPIDToBuild or 'nil'))
            end
            if sBPIDToBuild then
                sBPIDToBuild = AdjustBlueprintForOverrides(aiBrain, oFactory, sBPIDToBuild, tLZTeamData, iFactoryTechLevel)
            end
            if sBPIDToBuild then
                M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd) --Assumes we will end code if we get to this point
                return sBPIDToBuild
            end
        end

        local iMAACategoryWanted = M28UnitInfo.refCategoryMAA - categories.TECH1
        if (oFactory[refiTotalBuildCount] or 0) <= 5 and not(aiBrain[M28Overseer.refbCloseToUnitCap]) and M28Conditions.GetFactoryLifetimeCount(oFactory, M28UnitInfo.refCategoryMAA - categories.TECH3, false) < 2 then iMAACategoryWanted = M28UnitInfo.refCategoryMAA * categories.TECH2 end

        --Build T2 MAA if enemy has air units in this zone
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if bDebugMessages == true then LOG(sFunctionRef..': High priority air builder check, iCurrentConditionToTry='..iCurrentConditionToTry..'; Is table of enemy air units emty='..tostring(M28Utilities.IsTableEmpty(tLZTeamData[M28Map.reftLZEnemyAirUnits]))..'; Have low mass='..tostring(bHaveLowMass)..'; MAA wanted='..(tLZTeamData[M28Map.subrefLZMAAThreatWanted] or 'nil')..'; Ally MAA='..(tLZTeamData[M28Map.subrefLZThreatAllyMAA] or 'nil')..'; Enemy air to ground='..(tLZTeamData[M28Map.refiEnemyAirToGroundThreat] or 'nil')) end
        if (M28Utilities.IsTableEmpty(tLZTeamData[M28Map.reftLZEnemyAirUnits]) == false or not(bHaveLowMass) and (tLZTeamData[M28Map.subrefLZMAAThreatWanted] > tLZTeamData[M28Map.subrefLZThreatAllyMAA] or tLZTeamData[M28Map.refiEnemyAirToGroundThreat] > 0)) then
            if bDebugMessages == true then LOG(sFunctionRef..': Wil ltry and get more MAA') end
            if ConsiderBuildingCategory(iMAACategoryWanted) then return sBPIDToBuild end
        end

        --Build engineer if we have lots of reclaim in this zone and dont have a large enemy threat
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if bDebugMessages == true then LOG(sFunctionRef..': Engineer for reclaim builder - mass in LZ='..tLZData[M28Map.subrefTotalMassReclaim]..'; Enemy mobile DF='..tLZTeamData[M28Map.subrefLZThreatEnemyMobileDFTotal]..'; Want BP='..tostring(tLZTeamData[M28Map.subrefTbWantBP])) end
        if tLZData[M28Map.subrefTotalSignificantMassReclaim] >= 500 and tLZData[M28Map.subrefTotalSignificantMassReclaim] >= 5000 or M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingMass] and tLZTeamData[M28Map.subrefLZThreatEnemyMobileDFTotal] <= 500 and tLZTeamData[M28Map.subrefTbWantBP] then
            if bDebugMessages == true then LOG(sFunctionRef..': Will try and get an engineer') end
            if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then return sBPIDToBuild end
        end

        --Build MAA if fatboy lacks sufficient escort
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] >= 3000 then
            local iExistingMAA = 0
            if M28Utilities.IsTableEmpty(oFactory[M28Land.reftoAssignedMAAGuards]) == false then
                iExistingMAA = table.getn(oFactory[M28Land.reftoAssignedMAAGuards])
            end
            if iExistingMAA < M28Land.iFatboySafeMAACount and (iExistingMAA < M28Land.iFatboyBaseMAACount or (M28Team.tTeamData[iTeam][M28Team.refiEnemyAirToGroundThreat] >= 12000 and not(M28Conditions.TeamHasAirControl(iTeam)))) then
                if ConsiderBuildingCategory(iMAACategoryWanted) then return sBPIDToBuild end
            end
        end

        --Build df units or t1 arti if have nearby DF enemies in this zone or nearby
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if tLZTeamData[M28Map.subrefLZThreatEnemyMobileDFTotal] >= 500 then
            local tNearbyEnemies = aiBrain:GetUnitsAroundPoint(M28UnitInfo.refCategoryLandCombat * categories.TECH3 + M28UnitInfo.refCategoryLandExperimental, oFactory:GetPosition(), 45, 'Enemy')
            if bDebugMessages == true then LOG(sFunctionRef..': Will get t1 arti if nearby enemies or stalling mass, otherwise will get percies, is tNearbyEnemies empty='..tostring(M28Utilities.IsTableEmpty(tNearbyEnemies))..'; subrefbTeamIsStallingMass='..tostring(M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingMass])) end
            if M28Utilities.IsTableEmpty(tNearbyEnemies) and not(M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingMass]) then
                if ConsiderBuildingCategory(M28UnitInfo.refCategoryLandCombat * categories.TECH3, false) then return sBPIDToBuild end
            end
            if ConsiderBuildingCategory(M28UnitInfo.refCategoryIndirect * categories.TECH1, true) then return sBPIDToBuild end
        end

        --Build engineer if have unclaimed mexes in zone and no engineers
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if tLZTeamData[M28Map.subrefLZThreatEnemyMobileDFTotal] <= 10 and tLZTeamData[M28Map.subrefTbWantBP] and M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subrefMexUnbuiltLocations]) == false and (M28Utilities.IsTableEmpty(tLZTeamData[M28Map.subreftoLZOrWZAlliedUnits]) or GetEngiCountInZone() == 0) then
            if bDebugMessages == true then LOG(sFunctionRef..': Unclaimed mexes, will try and get engineer') end
            if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then return sBPIDToBuild end
        end

        --Build MAA if have need of it in this zone
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if tLZTeamData[M28Map.subrefLZThreatAllyMAA] <= 1500 and (tLZTeamData[M28Map.subrefLZThreatAllyMAA] <= 400 or tLZTeamData[M28Map.subrefLZMAAThreatWanted] > tLZTeamData[M28Map.subrefLZThreatAllyMAA] and tLZTeamData[M28Map.subrefLZThreatAllyGroundAA] <= 5000) then
            if bDebugMessages == true then LOG(sFunctionRef..': Have too little MAA in zone will try and get more') end
            if ConsiderBuildingCategory(iMAACategoryWanted) then return sBPIDToBuild end
        end


        --Build engineer if some mass in the zone
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if bDebugMessages == true then LOG(sFunctionRef..': Engineer for reclaim builder - mass in LZ='..tLZData[M28Map.subrefTotalMassReclaim]..'; Enemy mobile DF='..tLZTeamData[M28Map.subrefLZThreatEnemyMobileDFTotal]..'; Want BP='..tostring(tLZTeamData[M28Map.subrefTbWantBP])) end
        if tLZData[M28Map.subrefTotalSignificantMassReclaim] >= 500 and tLZTeamData[M28Map.subrefLZThreatEnemyMobileDFTotal] <= 500 and tLZTeamData[M28Map.subrefTbWantBP] then
            if bDebugMessages == true then LOG(sFunctionRef..': Will try and get an engineer') end
            if ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then return sBPIDToBuild end
        end

        --If enemy threat in-range then build percies (the above builder covers t1 arti when enemy is really close)
        if not(M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingMass]) then
            local tNearbyEnemies = aiBrain:GetUnitsAroundPoint(M28UnitInfo.refCategoryLandCombat * categories.TECH3 + M28UnitInfo.refCategoryLandExperimental, oFactory:GetPosition(), 130, 'Enemy')
            if bDebugMessages == true then LOG(sFunctionRef..': Will get percies if enemies nearby, is tNearbyEnemies empty='..tostring(M28Utilities.IsTableEmpty(tNearbyEnemies))..'; subrefbTeamIsStallingMass='..tostring(M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingMass])) end
            if M28Utilities.IsTableEmpty(tNearbyEnemies) then
                if ConsiderBuildingCategory(M28UnitInfo.refCategoryLandCombat * categories.TECH3, false) then return sBPIDToBuild end
            end
        end


        --Build MAA if need it in adjacent zone, and also check if we want to build mobile shields
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if M28Utilities.IsTableEmpty(tLZData[M28Map.subrefLZAdjacentLandZones]) == false then
            local bHaveZoneWantingMobileShields = tLZTeamData[M28Map.refbLZWantsMobileShield]
            for _, iAdjLZ in tLZData[M28Map.subrefLZAdjacentLandZones] do
                local tAdjLZTeamData = M28Map.tAllPlateaus[iPlateau][M28Map.subrefPlateauLandZones][iAdjLZ][M28Map.subrefLZTeamData][iTeam]
                if ((tAdjLZTeamData[M28Map.refiEnemyAirToGroundThreat] or 0) > 0 or (tAdjLZTeamData[M28Map.refiEnemyAirAAThreat] or 0) >= 750) and (tLZTeamData[M28Map.subrefLZThreatAllyMAA] <= math.max(2000, (tAdjLZTeamData[M28Map.refiEnemyAirToGroundThreat] or 0) * 2 + (tAdjLZTeamData[M28Map.refiEnemyAirAAThreat] or 0) * 0.25)) then
                    if ConsiderBuildingCategory(iMAACategoryWanted) then return sBPIDToBuild end
                end
                if not(bHaveZoneWantingMobileShields) then bHaveZoneWantingMobileShields = tAdjLZTeamData[M28Map.refbLZWantsMobileShield] end
            end
            if bDebugMessages == true then LOG(sFunctionRef..': bHaveZoneWantingMobileShields='..tostring(bHaveZoneWantingMobileShields)..'; Have low power='..tostring(M28Conditions.HaveLowPower(iTeam)).. 'Cur time='..GetGameTimeSeconds()..'; Time last had no shield targets for this plateau='..(M28Team.tTeamData[iTeam][M28Team.refiLastTimeNoShieldTargetsByIsland][tLZData[M28Map.subrefLZIslandRef]] or 'nil')) end
            if bHaveZoneWantingMobileShields and not(M28Conditions.HaveLowPower(iTeam)) and GetGameTimeSeconds() - (M28Team.tTeamData[iTeam][M28Team.refiLastTimeNoShieldTargetsByIsland][tLZData[M28Map.subrefLZIslandRef]] or -100) >= 30 then
                if bDebugMessages == true then LOG(sFunctionRef..': Will build mobile land shield') end
                if ConsiderBuildingCategory(M28UnitInfo.refCategoryMobileLandShield) then return sBPIDToBuild end
            end
        end


        --If we are close to overflowing build combat units
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if bDebugMessages == true then LOG(sFunctionRef..': High level of mass check, bHaveLowMass='..tostring(bHaveLowMass)..'; Lowest mass% stored='..M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored]) end
        if not(bHaveLowMass) and M28Team.tTeamData[iTeam][M28Team.subrefiTeamAverageMassPercentStored] >= 0.4 then
            if tLZTeamData[M28Map.subrefTbWantBP] and tLZTeamData[M28Map.subrefLZThreatEnemyMobileDFTotal] <= 20 and ConsiderBuildingCategory(M28UnitInfo.refCategoryEngineer) then
                return sBPIDToBuild
            elseif (tLZTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ] or NavUtils.GetTerrainLabel(M28Map.refPathingTypeLand, tLZTeamData[M28Map.reftClosestFriendlyBase]) == tLZData[M28Map.subrefLZIslandRef]) and ConsiderBuildingCategory(M28UnitInfo.refCategoryDFTank - M28UnitInfo.refCategoryLightAttackBot) then
                return sBPIDToBuild
            elseif tLZTeamData[M28Map.subrefbEnemiesInThisOrAdjacentLZ] and ConsiderBuildingCategory(M28UnitInfo.refCategoryAmphibiousCombat) then return sBPIDToBuild
            end
        end
    end

    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
end


function GetBlueprintToBuildForAircraftCarrier(aiBrain, oFactory)
    local sFunctionRef = 'GetBlueprintToBuildForAircraftCarrier'
    local bDebugMessages = false if M28Profiler.bGlobalDebugOverride == true then   bDebugMessages = true end
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerStart)



    local iPlateauOrZero, iLandOrWaterZone = M28Map.GetClosestPlateauOrZeroAndZoneToPosition(oFactory:GetPosition())
    local tLZOrWZData, tLZOrWZTeamData

    local iTeam = aiBrain.M28Team
    if (iPlateauOrZero or -1) == 0 and (iLandOrWaterZone or 0) > 0 then --in a water zone
        tLZOrWZData = M28Map.tPondDetails[M28Map.tiPondByWaterZone[iLandOrWaterZone]][M28Map.subrefPondWaterZones][iLandOrWaterZone]
        tLZOrWZTeamData = tLZOrWZData[M28Map.subrefWZTeamData][iTeam]
        if bDebugMessages == true then LOG(sFunctionRef..': Are in pond '..(M28Map.tiPondByWaterZone[iLandOrWaterZone] or 'nil')) end
    else
        --Land zone
        tLZOrWZData = M28Map.tAllPlateaus[iPlateauOrZero][M28Map.subrefPlateauLandZones][iLandOrWaterZone]
        tLZOrWZTeamData = tLZOrWZData[M28Map.subrefLZTeamData][iTeam]
    end
    if bDebugMessages == true then LOG(sFunctionRef..': Near start of carrier code, oFactory='..oFactory.UnitId..M28UnitInfo.GetUnitLifetimeCount(oFactory)..'; brain='..aiBrain.Nickname..'; Position='..repru(oFactory:GetPosition())..'; Time='..GetGameTimeSeconds()..'; iPlateau or zero='..(iPlateauOrZero or 'nil')..'; iLandOrWaterZone='..(iLandOrWaterZone or 'nil')..'; Is tLZOrWZTeamData nil='..tostring(tLZOrWZTeamData == nil)) end
    if tLZOrWZTeamData then
        local sBPIDToBuild
        local iFactoryTechLevel = M28UnitInfo.GetUnitTechLevel(oFactory)
        local iCurrentConditionToTry = 0
        local bHaveLowMass = M28Conditions.TeamHasLowMass(iTeam)
        local bHaveLowEnergy = M28Conditions.HaveLowPower(iTeam)
        local iAirSubteam = aiBrain.M28AirSubteam

        function ConsiderBuildingCategory(iCategoryToBuild, bOptionalGetCheapest)
            --GetBlueprintThatCanBuildOfCategory(aiBrain, iCategoryCondition, oFactory, bGetSlowest, bGetFastest, bGetCheapest, iOptionalCategoryThatMustBeAbleToBuild, bIgnoreTechDifferences)
            sBPIDToBuild = GetBlueprintThatCanBuildOfCategory(aiBrain, iCategoryToBuild, oFactory,  nil,            nil,        bOptionalGetCheapest, nil,                          false)
            if bDebugMessages == true then
                LOG(sFunctionRef .. ': Time=' .. GetGameTimeSeconds() .. ' Factory=' .. oFactory.UnitId .. M28UnitInfo.GetUnitLifetimeCount(oFactory) .. '; iLandOrWaterZone='..iLandOrWaterZone..'; iCurrentConditionToTry=' .. iCurrentConditionToTry .. '; sBPIDToBuild before adjusting for override=' .. (sBPIDToBuild or 'nil'))
            end
            if sBPIDToBuild then
                sBPIDToBuild = AdjustBlueprintForOverrides(aiBrain, oFactory, sBPIDToBuild, tLZOrWZTeamData, iFactoryTechLevel)
            end
            if sBPIDToBuild then
                M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd) --Assumes we will end code if we get to this point
                return sBPIDToBuild
            end
        end

        local iNormalBomberCategoryToBuild, iGunshipCategoryUnlessBombersBetter, iBackupAirToGroundCategory, bAirToGroundIsIneffective = GetBomberAndGunshipOrBomberPreferredCategoryForPrimaryAirToGround(iTeam, iFactoryTechLevel, iAirSubteam, aiBrain)


        --Only consider building if we have very high resources (e.g. paragon or loads of other resources, or getting close to overflowing), or if we have decent air to ground threat and lack air control
        if bDebugMessages == true then LOG(sFunctionRef..': Deciding if have sufficient eco to build something from a carrier, bHaveLowMass='..tostring(bHaveLowMass)..'; have low energy='..tostring(bHaveLowEnergy)..'; Gross mass income='..(aiBrain[M28Economy.refiGrossMassBaseIncome] or 'nil')..'; Energy gross income='..(aiBrain[M28Economy.refiGrossEnergyBaseIncome] or 'nil')..'; Mass% stored='..aiBrain:GetEconomyStoredRatio('MASS')..'; Gross energy when last stalled='..(M28Team.tTeamData[iTeam][M28Team.subrefiGrossEnergyWhenStalled] or 0)) end
        if not(bHaveLowMass) and not(bHaveLowEnergy) and (aiBrain[M28Economy.refiGrossMassBaseIncome] >= 250 * aiBrain[M28Economy.refiBrainBuildRateMultiplier] or aiBrain:GetEconomyStoredRatio('MASS') >= 0.6) and (aiBrain[M28Economy.refiGrossEnergyBaseIncome] >= 2500 * aiBrain[M28Economy.refiBrainBuildRateMultiplier] or (aiBrain[M28Economy.refiGrossEnergyBaseIncome] >= math.max(750, (M28Team.tTeamData[iTeam][M28Team.subrefiGrossEnergyWhenStalled] or 0) + 300)))  then

            --Build asf if behind on air
            iCurrentConditionToTry = iCurrentConditionToTry + 1
            if M28Team.tAirSubteamData[iAirSubteam][M28Team.refbFarBehindOnAir] then
                if bDebugMessages == true then LOG(sFunctionRef..': Are far behind on air so will build airaa') end
                if ConsiderBuildingCategory(M28UnitInfo.refCategoryAirAA) then return sBPIDToBuild end
            end
            --Build torp bomber if need them
            iCurrentConditionToTry = iCurrentConditionToTry + 1
            if M28Team.tAirSubteamData[iAirSubteam][M28Team.refbNoAvailableTorpsForEnemies] then
                if bDebugMessages == true then LOG(sFunctionRef..': Want torp bombers') end
                if ConsiderBuildingCategory(M28UnitInfo.refCategoryTorpBomber) then return sBPIDToBuild end
            end

            --Build asf if lack air control
            iCurrentConditionToTry = iCurrentConditionToTry + 1
            if not(M28Team.tAirSubteamData[iAirSubteam][M28Team.refbHaveAirControl]) then
                if bDebugMessages == true then LOG(sFunctionRef..': Lack air control so will build airaa') end
                if ConsiderBuildingCategory(M28UnitInfo.refCategoryAirAA) then return sBPIDToBuild end
            end

            --Build gunship if we lack gunship threat
            if M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurGunshipThreat] + M28Team.tAirSubteamData[iAirSubteam][M28Team.subrefiOurBomberThreat] < 50000 and (not(bAirToGroundIsIneffective) or M28Map.bIsCampaignMap) then
                if bDebugMessages == true then LOG(sFunctionRef..': Will get more gunships') end
                if ConsiderBuildingCategory(iGunshipCategoryUnlessBombersBetter) or ConsiderBuildingCategory(iBackupAirToGroundCategory) then return sBPIDToBuild end
            end

            --Build strat bomber otherwise if have loads of mass
            if (aiBrain[M28Economy.refiGrossMassBaseIncome] >= 600 and (M28Team.tTeamData[iTeam][M28Team.refbBuiltParagon] or aiBrain:GetEconomyStoredRatio('MASS') >= 0.25)) or (aiBrain:GetEconomyStoredRatio('MASS') >= 0.97 and aiBrain:GetEconomyStored('MASS') >= 2000) then
                if bDebugMessages == true then LOG(sFunctionRef..': Will get strats') end
                if M28Utilities.bLoudModActive and iFactoryTechLevel >= 3 and ConsiderBuildingCategory(iGunshipCategoryUnlessBombersBetter) then return sBPIDToBuild
                elseif ConsiderBuildingCategory(iNormalBomberCategoryToBuild) then return sBPIDToBuild end
            end
            --Czar - for some reason it is categorised as a Tech3 unit
        elseif not(bHaveLowEnergy) and not(M28Team.tTeamData[iTeam][M28Team.subrefbTeamIsStallingMass]) and EntityCategoryContains(categories.EXPERIMENTAL + categories.TECH3 * categories.AIR - categories.NAVAL, oFactory.UnitId) and M28UnitInfo.GetUnitHealthAndShieldPercent(oFactory) >= 0.7 then
            --If mod dist is <0.55 then consider building
            if bDebugMessages == true then LOG(sFunctionRef..': Mod dist%='..( tLZOrWZTeamData[M28Map.refiModDistancePercent] or 'nil')) end
            if tLZOrWZTeamData[M28Map.refiModDistancePercent] <= 0.55 then
                if bDebugMessages == true then LOG(sFunctionRef..': Have air control='..tostring(M28Team.tAirSubteamData[aiBrain.M28AirSubteam][M28Team.refbHaveAirControl] or false)..'; bHaveLowMass='..tostring(bHaveLowMass or false)) end
                if not(M28Team.tAirSubteamData[iAirSubteam][M28Team.refbHaveAirControl]) then
                    if ConsiderBuildingCategory(M28UnitInfo.refCategoryAirAA) then return sBPIDToBuild end
                end
                if not(bHaveLowMass) and (not(bAirToGroundIsIneffective) or aiBrain:GetEconomyStoredRatio('MASS') >= 0.5) then
                    if ConsiderBuildingCategory(iGunshipCategoryUnlessBombersBetter - categories.TECH1 - categories.TECH2) then return sBPIDToBuild end
                end
            end
        end
    end

    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
end

function GetBlueprintToBuildForTempest(aiBrain, oFactory)
    local sFunctionRef = 'GetBlueprintToBuildForTempest'
    local bDebugMessages = false if M28Profiler.bGlobalDebugOverride == true then   bDebugMessages = true end
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerStart)



    local iPlateauOrZero, iLandOrWaterZone = M28Map.GetClosestPlateauOrZeroAndZoneToPosition(oFactory:GetPosition())
    local tLZOrWZData, tLZOrWZTeamData

    local iTeam = aiBrain.M28Team
    if (iPlateauOrZero or -1) == 0 and (iLandOrWaterZone or 0) > 0 then --in a water zone
        tLZOrWZData = M28Map.tPondDetails[M28Map.tiPondByWaterZone[iLandOrWaterZone]][M28Map.subrefPondWaterZones][iLandOrWaterZone]
        tLZOrWZTeamData = tLZOrWZData[M28Map.subrefWZTeamData][iTeam]
        if bDebugMessages == true then LOG(sFunctionRef..': Are in pond '..(M28Map.tiPondByWaterZone[iLandOrWaterZone] or 'nil')) end
    else
        --Land zone
        tLZOrWZData = M28Map.tAllPlateaus[iPlateauOrZero][M28Map.subrefPlateauLandZones][iLandOrWaterZone]
        tLZOrWZTeamData = tLZOrWZData[M28Map.subrefLZTeamData][iTeam]
    end
    if bDebugMessages == true then LOG(sFunctionRef..': Near start of carrier code, oFactory='..oFactory.UnitId..M28UnitInfo.GetUnitLifetimeCount(oFactory)..'; brain='..aiBrain.Nickname..'; Position='..repru(oFactory:GetPosition())..'; Time='..GetGameTimeSeconds()..'; iPlateau or zero='..(iPlateauOrZero or 'nil')..'; iLandOrWaterZone='..(iLandOrWaterZone or 'nil')..'; Is tLZOrWZTeamData nil='..tostring(tLZOrWZTeamData == nil)) end
    if tLZOrWZTeamData then
        local sBPIDToBuild
        local iFactoryTechLevel = M28UnitInfo.GetUnitTechLevel(oFactory)
        local iCurrentConditionToTry = 0
        local bHaveLowMass = M28Conditions.TeamHasLowMass(iTeam)
        local bHaveLowEnergy = M28Conditions.HaveLowPower(iTeam)

        function ConsiderBuildingCategory(iCategoryToBuild, bOptionalGetCheapest)
            --GetBlueprintThatCanBuildOfCategory(aiBrain, iCategoryCondition, oFactory, bGetSlowest, bGetFastest, bGetCheapest, iOptionalCategoryThatMustBeAbleToBuild, bIgnoreTechDifferences)
            sBPIDToBuild = GetBlueprintThatCanBuildOfCategory(aiBrain, iCategoryToBuild, oFactory,  nil,            nil,        bOptionalGetCheapest, nil,                          false)
            if bDebugMessages == true then
                LOG(sFunctionRef .. ': Time=' .. GetGameTimeSeconds() .. ' Factory=' .. oFactory.UnitId .. M28UnitInfo.GetUnitLifetimeCount(oFactory) .. '; iLandOrWaterZone='..iLandOrWaterZone..'; iCurrentConditionToTry=' .. iCurrentConditionToTry .. '; sBPIDToBuild before adjusting for override=' .. (sBPIDToBuild or 'nil'))
            end
            if sBPIDToBuild then
                sBPIDToBuild = AdjustBlueprintForOverrides(aiBrain, oFactory, sBPIDToBuild, tLZOrWZTeamData, iFactoryTechLevel)
            end
            if sBPIDToBuild then
                M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd) --Assumes we will end code if we get to this point
                return sBPIDToBuild
            end
        end

        --Emergency builder - facing an enemy air to ground threat
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if (tLZOrWZTeamData[M28Map.refiEnemyAirToGroundThreat] or 0) >= math.max(500, (tLZOrWZTeamData[M28Map.subrefWZThreatAlliedMAA] or 0)*0.25) then
            if ConsiderBuildingCategory(M28UnitInfo.refCategoryNavalAA) then return sBPIDToBuild end
        end

        --Overflowing mass builder - get subhunters if we dont have lots already and enemy has units in an adjacent water zone
        iCurrentConditionToTry = iCurrentConditionToTry + 1
        if not(bHaveLowMass) and not(bHaveLowEnergy) and tLZOrWZTeamData[M28Map.subrefbDangerousEnemiesInAdjacentWZ] and (aiBrain[M28Economy.refiGrossMassBaseIncome] >= 350 * aiBrain[M28Economy.refiBrainBuildRateMultiplier] or aiBrain:GetEconomyStoredRatio('MASS') >= 0.6) and (aiBrain[M28Economy.refiGrossEnergyBaseIncome] >= 2500 * aiBrain[M28Economy.refiBrainBuildRateMultiplier] or (aiBrain[M28Economy.refiGrossEnergyBaseIncome] >= math.max(750, (M28Team.tTeamData[iTeam][M28Team.subrefiGrossEnergyWhenStalled] or 0) + 300)))  then
            if aiBrain:GetCurrentUnits(M28UnitInfo.refCategorySubmarine) <= 25 then
                if ConsiderBuildingCategory(M28UnitInfo.refCategorySubmarine) then return sBPIDToBuild end
            end
        end

    end

    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
end

function GetBomberAndGunshipOrBomberPreferredCategoryForPrimaryAirToGround(iTeam, iFactoryTechLevel, iAirSubteam, aiBrain)
    local iNormalBomberCategoryToBuild, iGunshipCategoryUnlessBombersBetter, iBackupAirToGroundCategory, bAirToGroundIsIneffective
    iNormalBomberCategoryToBuild = M28UnitInfo.refCategoryBomber
    if M28Utilities.bLoudModActive then iNormalBomberCategoryToBuild = iNormalBomberCategoryToBuild - categories.TECH3 end --LOUD has messed up bomber attributes so a bomber with an attack order on a target can keep circling it and never drop a bomb
    --Are we prioritising bombers over gunships?
    if aiBrain[M28Overseer.refbStratsOverGunships] and iFactoryTechLevel >= 3 and (M28Team.tTeamData[iTeam][M28Team.refiBomberLosses] <= 20000 or (M28Team.tTeamData[iTeam][M28Team.refiGunshipLosses] > M28Team.tTeamData[iTeam][M28Team.refiBomberLosses] * 0.5 and M28Team.tTeamData[iTeam][M28Team.refiGunshipKills] > 0 and M28Team.tTeamData[iTeam][M28Team.refiGunshipKills] / M28Team.tTeamData[iTeam][M28Team.refiGunshipLosses] > 1.2 * M28Team.tTeamData[iTeam][M28Team.refiBomberKills] / M28Team.tTeamData[iTeam][M28Team.refiBomberLosses])) then
        if M28Team.tTeamData[iTeam][M28Team.refiBomberLosses] >= 5000 and M28Team.tTeamData[iTeam][M28Team.refiGunshipLosses] >= 5000 and M28Team.tTeamData[iTeam][M28Team.refiGunshipKills] < M28Team.tTeamData[iTeam][M28Team.refiGunshipLosses] * 0.35 and M28Team.tTeamData[iTeam][M28Team.refiBomberKills] < M28Team.tTeamData[iTeam][M28Team.refiBomberLosses] * 0.35 then
            bAirToGroundIsIneffective = true
        end
        iGunshipCategoryUnlessBombersBetter = iNormalBomberCategoryToBuild
        --Seraphim - prefer strats over t2 gunships if enemy has significant AA threat on our side of map, and has built significant lightnign tanks
    elseif iFactoryTechLevel == 3 and  M28Team.tLandSubteamData[aiBrain.M28LandSubteam][M28Team.refiEnemyGroundAAThreatNearOurSide] >= 4000 and M28Team.tTeamData[iTeam][M28Team.iEnemyT3MAAActiveCount] >= 4 + 4 * M28Team.tTeamData[iTeam][M28Team.subrefiActiveM28BrainCount] and M28Team.tTeamData[iTeam][M28Team.refiGunshipLosses] >= 2000 and (M28Conditions.EnemyTeamHasFaction(iTeam, M28UnitInfo.refFactionSeraphim) or M28Conditions.EnemyTeamHasFaction(iTeam, M28UnitInfo.refFactionUEF)) then
        if M28Team.tTeamData[iTeam][M28Team.refiBomberLosses] >= 5000 and M28Team.tTeamData[iTeam][M28Team.refiGunshipLosses] >= 5000 and M28Team.tTeamData[iTeam][M28Team.refiGunshipKills] < M28Team.tTeamData[iTeam][M28Team.refiGunshipLosses] * 0.35 and M28Team.tTeamData[iTeam][M28Team.refiBomberKills] < M28Team.tTeamData[iTeam][M28Team.refiBomberLosses] * 0.35 then
            bAirToGroundIsIneffective = true
        end
        iGunshipCategoryUnlessBombersBetter = iNormalBomberCategoryToBuild
    elseif M28Team.tTeamData[iTeam][M28Team.refiGunshipLosses] <= 75000 or M28Team.tTeamData[iTeam][M28Team.subrefiOurGunshipThreat] <= 10000 then --i.e. c.50 broadswords in losses before consider switching to bombers; also want minimum level of gunships to deal with raids
        iGunshipCategoryUnlessBombersBetter = M28UnitInfo.refCategoryGunship
    elseif (M28Team.tTeamData[iTeam][M28Team.refiBomberKills] > 10000 or M28Team.tTeamData[iTeam][M28Team.refiBomberLosses] >= 20000) and M28Team.tTeamData[iTeam][M28Team.refiGunshipLosses] > 0 and M28Team.tTeamData[iTeam][M28Team.refiBomberLosses] > 0 then
        --Pick whichever of gunships nd bombers has the better kill:loss ratio; we know that losses are > 0 so can divide by this
        local iGunshipKillLossRatio = M28Team.tTeamData[iTeam][M28Team.refiGunshipKills] / M28Team.tTeamData[iTeam][M28Team.refiGunshipLosses]
        local iBomberKillLossRatio = M28Team.tTeamData[iTeam][M28Team.refiBomberKills] / M28Team.tTeamData[iTeam][M28Team.refiBomberLosses]
        if iGunshipKillLossRatio >= iBomberKillLossRatio then
            iGunshipCategoryUnlessBombersBetter = M28UnitInfo.refCategoryGunship
        else
            iGunshipCategoryUnlessBombersBetter = iNormalBomberCategoryToBuild
        end
        if iGunshipKillLossRatio < 0.35 and iBomberKillLossRatio < 0.35 and ((M28Utilities.bLoudModActive or M28Utilities.bQuietModActive) or not(M28Team.tAirSubteamData[iAirSubteam][M28Team.refbHaveAirControl])) then
            bAirToGroundIsIneffective = true
        end
    else
        --We have built lots of gunships, and not lost lots of bombers (or killed lots with them), so get bombers
        iGunshipCategoryUnlessBombersBetter = iNormalBomberCategoryToBuild
    end

        if iFactoryTechLevel >= 3 then iBackupAirToGroundCategory = M28UnitInfo.refCategoryGunship + M28UnitInfo.refCategoryBomber
    else
    iBackupAirToGroundCategory = M28UnitInfo.refCategoryGunship + M28UnitInfo.refCategoryBomber * categories.TECH2 --i.e. dont want to risk building t1 bombers from a gunship builder just because we aren't at t3 yet
    end
    return iNormalBomberCategoryToBuild, iGunshipCategoryUnlessBombersBetter, iBackupAirToGroundCategory, bAirToGroundIsIneffective
end